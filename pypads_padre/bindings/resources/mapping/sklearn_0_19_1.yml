metadata:
  author: "Thomas WeiÃŸgerber"
  version: "0.1.0"
  library:
    name: "sklearn"
    version: ">= 0.19.1"

fragments:
  default_model:
    !!python/pPath __init__:
      hooks: "pypads_init"
    !!python/rSeg (fit|.fit_predict|fit_transform)$:
      hooks: "pypads_fit"
    !!python/rSeg (fit_predict|predict|score)$:
      hooks: "pypads_predict"
    !!python/rSeg (fit_transform|transform)$:
      hooks: "pypads_transform"

mappings:
  !!python/pPath sklearn:
    data:
      "@rdf":
        mapped_by: "http://www.padre-lab.eu/PyPadsInjection"
        defined_in: "http://www.padre-lab.eu/onto/Sklearn#0.19.1"
    !!python/pPath base.BaseEstimator:
      ;default_model: ~
      !!python/pPath __init__:
        hooks: "pypads_estimator"
      data:
        "@rdf":
          in_context: "http://www.padre-lab.eu/onto/Estimator"
    !!python/rSeg (RegressorMixin|ClassifierMixin|DensityMixin):
      !!python/pPath score:
        hooks: "pypads_metric"
    !!python/pPath metrics.classification:
      !!python/rSeg .f1_score:
        hooks: "pypads_metric"
        data:
          "@rdf":
            in_context: "http://www.padre-lab.eu/onto/Metric"
    !!python/pPath datasets.base:
        !!python/rSeg (?!^load_data$)load_.*:
          hooks: "pypads_dataset"
          data:
            "@rdf":
              in_context: "http://www.padre-lab.eu/onto/Dataset"
    !!python/pPath model_selection:
      !!python/pPath _search.BaseSearchCV:
        !!python/pPath fit:
          hooks: ["pypads_param_search", "pypads_fit"]
          data:
            "@rdf":
              in_context: "http://www.padre-lab.eu/onto/ParameterSearch"
        !!python/pPath predict:
          hooks: "pypads_predict"
      !!python/pPath _validation._fit_and_score:
          hooks: ["pypads_param_search_exec"]
          data:
            "@rdf":
              in_context: "http://www.padre-lab.eu/onto/ParameterSearchExecution"
    !!python/pPath model_selection._split:
      !!python/pPath BaseCrossValidator:
        !!python/pPath split:
          hooks: ["pypads_split"]
          data:
            "@rdf":
              in_context: "http://www.padre-lab.eu/onto/Splitting"
      !!python/pPath BaseShuffleSplit.split:
        hooks: ["pypads_split"]
        data:
          "@rdf":
            in_context: "http://www.padre-lab.eu/onto/Splitting"
    :calibration.CalibratedClassifierCV:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: 'The classifier whose output decision function needs to be calibrated
              to offer more accurate prediction probability outputs. '
              kind_of_value: '{object, None}'
              name: base_estimator
              optional: 'False'
              default_value: None
              path: base_estimator
            - description: The method to use for calibration.
              kind_of_value: '{''sigmoid'', ''isotonic''}'
              name: calibration_method
              optional: 'False'
              default_value: '''sigmoid'''
              path: method
            - description: Determines the cross-validation splitting strategy.
              kind_of_value: '{integer, object (cross-validation generator),  iterable yielding
              train and test splits, None, ''prefit'''
              name: cross_validation
              optional: 'True'
              default_value: '3'
              path: cv
          optimisation_parameters: []
        name: probability calibration with cross validation
        other_names: []
        type: Classification
    :cluster.affinity_propagation_.AffinityPropagation:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Damping factor is the extent to which the current value is maintained
                relative to incoming values (weighted 1 - damping). This in order to avoid
                numerical oscillations when updating these values (messages).
              kind_of_value: float (between 0.5 and 1)
              name: damping
              optional: 'True'
              default_value: '0.5'
              path: damping
            - description: Make a copy of input data.
              kind_of_value: boolean
              name: copy
              optional: 'True'
              default_value: 'True'
              path: copy
            - description: Preferences for each point - points with larger values of preferences
                are more likely to be chosen as exemplars. The number of exemplars, ie of
                clusters, is influenced by the input preferences value. If the preferences
                are not passed as arguments, they will be set to the median of the input
                similarities.
              kind_of_value: '{array-like, shape (n_samples,), float, None}'
              name: preference
              optional: 'True'
              default_value: None
              path: preference
            - description: Which affinity to use.
              kind_of_value: '{''precomputed'', ''euclidean''}'''
              name: affinity
              optional: 'True'
              default_value: '''euclidean'''
              path: affinity
            - description: Whether to be verbose.
              kind_of_value: boolean
              name: verbose
              optional: 'True'
              default_value: 'False'
              path: verbose
          optimisation_parameters:
            - description: Maximum number of iterations over the complete dataset before
                stopping independently of any early stopping criterion heuristics.
              kind_of_value: integer
              name: max_iterations
              optional: 'True'
              default_value: '200'
              path: max_iter
            - description: Number of iterations with no change in the number of estimated
                clusters that stops the convergence.
              kind_of_value: integer
              name: convergence_iteration
              optional: 'True'
              default_value: '15'
              path: convergence_iter
        name: affinity propagation clustering
        other_names: []
        type: Clustering
    :cluster.bicluster.SpectralBiclustering:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: The number of biclusters to find.
              kind_of_value: integer
              name: num_clusters
              optional: 'True'
              default_value: '3'
              path: n_clusters
            - description: Method of normalizing and converting singular vectors into biclusters.
              kind_of_value: '{''scale'', ''bistochastic'', ''log''}'
              name: method
              optional: 'True'
              default_value: '''bistochastic'''
              path: method
            - description: Number of singular vectors to check.
              kind_of_value: integer
              name: num_components
              optional: 'True'
              default_value: '6'
              path: n_components
            - description: Number of best singular vectors to which to project the data
                for clustering.
              kind_of_value: integer
              name: num_best
              optional: 'True'
              default_value: '3'
              path: n_best
            - description: Selects the algorithm for finding singular vectors.
              kind_of_value: '{''randomized'', ''arpack''}'
              name: svd_method
              optional: 'True'
              default_value: '''randomized'''
              path: svd_method
            - description: Number of vectors to use in calculating the SVD.
              kind_of_value: '{integer, None}'
              name: num_svd_vecs
              optional: 'True'
              default_value: None
              path: n_svd_vecs
            - description: Whether to use mini-batch k-means, which is faster but may get
                different results.
              kind_of_value: boolean
              name: mini_batch
              optional: 'True'
              default_value: 'False'
              path: mini_batch
            - description: Method for initialization of k-means algorithm.
              kind_of_value: '{''k-means++'', ''random'',  array of shape (n_clusters, n_features)}'
              name: initialization_method
              optional: 'False'
              default_value: '''k-means++'''
              path: init
            - description: The seed of the pseudo random number generator to use when shuffling
                the data. If int, random_state is the seed used by the random number generator;
                If RandomState instance, random_state is the random number generator; If
                None, the random number generator is the RandomState instance used by np.random.
              kind_of_value: '{integer, RandomState instance, None}'
              name: random_state
              optional: 'True'
              default_value: None
              path: random_state
          optimisation_parameters:
            - description: Number of time the k-means algorithm will be run with different
                centroid seeds.
              kind_of_value: integer
              name: num_initialization
              optional: 'False'
              default_value: '10'
              path: n_init
            - description: The number of jobs to use for the computation. If -1 all CPUs
                are used.
              kind_of_value: integer
              name: jobs
              optional: 'False'
              default_value: '1'
              path: n_jobs
        name: spectral biclustering
        other_names: []
        type: Clustering
    :cluster.bicluster.SpectralCoclustering:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: The number of biclusters to find.
              kind_of_value: integer
              name: num_clusters
              optional: 'True'
              default_value: '3'
              path: n_clusters
            - description: Selects the algorithm for finding singular vectors.
              kind_of_value: '{''randomized'', ''arpack''}'
              name: svd_method
              optional: 'True'
              default_value: '''randomized'''
              path: svd_method
            - description: Number of vectors to use in calculating the SVD.
              kind_of_value: '{integer, None}'
              name: num_svd_vecs
              optional: 'True'
              default_value: None
              path: n_svd_vecs
            - description: Whether to use mini-batch k-means, which is faster but may get
                different results.
              kind_of_value: boolean
              name: mini_batch
              optional: 'True'
              default_value: 'False'
              path: mini_batch
            - description: Method for initialization of k-means algorithm.
              kind_of_value: '{''k-means++'', ''random'',  array of shape (n_clusters, n_features)}'
              name: initialization_method
              optional: 'False'
              default_value: '''k-means++'''
              path: init
            - description: The seed of the pseudo random number generator to use when shuffling
                the data. If int, random_state is the seed used by the random number generator;
                If RandomState instance, random_state is the random number generator; If
                None, the random number generator is the RandomState instance used by np.random.
              kind_of_value: '{integer, RandomState instance, None}'
              name: random_state
              optional: 'True'
              default_value: None
              path: random_state
          optimisation_parameters:
            - description: Number of time the k-means algorithm will be run with different
                centroid seeds.
              kind_of_value: integer
              name: num_initialization
              optional: 'False'
              default_value: '10'
              path: n_init
            - description: The number of jobs to use for the computation. If -1 all CPUs
                are used.
              kind_of_value: integer
              name: jobs
              optional: 'False'
              default_value: '1'
              path: n_jobs
        name: spectral co-clustering
        other_names: []
        type: Clustering
    :cluster.birch.Birch:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: The radius of the subcluster obtained by merging a new sample
                and the closest subcluster should be lesser than the threshold. Otherwise
                a new subcluster is started. Setting this value to be very low promotes
                splitting and vice-versa.
              kind_of_value: float
              name: threshold
              optional: 'False'
              default_value: '0.5'
              path: threshold
            - description: Maximum number of CF subclusters in each node. If a new samples
                enters such that the number of subclusters exceed the branching_factor then
                that node is split into two nodes with the subclusters redistributed in
                each. The parent subcluster of that node is removed and two new subclusters
                are added as parents of the 2 split nodes.
              kind_of_value: integer
              name: branching_factor
              optional: 'False'
              default_value: '50'
              path: branching_factor
            - description: Number of clusters after the final clustering step, which treats
                the subclusters from the leaves as new samples.
              kind_of_value: '{integer, instance of sklearn.cluster model, None}'
              name: num_clusters
              optional: 'False'
              default_value: '3'
              path: n_clusters
            - description: Whether or not to compute labels for each fit.
              kind_of_value: boolean
              name: compute_labels
              optional: 'False'
              default_value: 'True'
              path: compute_labels
            - description: Whether or not to make a copy of the given data. If set to False,
                the initial data will be overwritten.
              kind_of_value: boolean
              name: copy
              optional: 'False'
              default_value: 'True'
              path: copy
          optimisation_parameters: []
        name: birch clustering
        other_names: []
        type: Clustering
    :cluster.dbscan_.DBSCAN:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: The maximum distance between two samples for them to be considered
                as in the same neighborhood.
              kind_of_value: float
              name: eps
              optional: 'True'
              default_value: '0.5'
              path: eps
            - description: The number of samples (or total weight) in a neighborhood for
                a point to be considered as a core point. This includes the point itself.
              kind_of_value: integer
              name: min_samples
              optional: 'True'
              default_value: '5'
              path: min_samples
            - description: The metric to use when calculating distance between instances
                in a feature array.
              kind_of_value: '{''cityblock'', ''cosine'', ''euclidean'', ''l1'', ''l2'',
              ''manhattan'', ''braycurtis'', ''canberra'', ''chebyshev'', ''correlation'',
              ''dice'', ''hamming'', ''jaccard'', ''kulsinski'', ''mahalanobis'', ''matching'',
              ''minkowski'', ''rogerstanimoto'', ''russellrao'', ''seuclidean'', ''sokalmichener'',
              ''sokalsneath'', ''sqeuclidean'', ''yule'', a callable that should take
              two arrays as input and return one value indicating the distance between
              them}'
              name: distance_metric
              optional: 'False'
              default_value: '''euclidean'''
              path: metric
            - description: Additional keyword arguments for the metric function.
              kind_of_value: dict
              name: metric_parameters
              optional: 'True'
              default_value: None
              path: metric_params
            - description: The algorithm to be used by the NearestNeighbors module to compute
                pointwise distances and find nearest neighbors.
              kind_of_value: '{''auto'', ''ball_tree'', ''kd_tree'', ''brute''}'
              name: algorithm
              optional: 'True'
              default_value: '''auto'''
              path: algorithm
            - description: Leaf size passed to BallTree or KDTree. This can affect the speed
                of the construction and query, as well as the memory required to store the
                tree. The optimal value depends on the nature of the problem.
              kind_of_value: integer
              name: leaf_size
              optional: 'True'
              default_value: '30'
              path: leaf_size
            - description: The power of the Minkowski metric to be used to calculate distance
                between points.
              kind_of_value: '{integer, None}'
              name: minkowski_parameter
              optional: 'True'
              default_value: None
              path: p
          optimisation_parameters:
            - description: The number of jobs to use for the computation. If -1 all CPUs
                are used.
              kind_of_value: integer
              name: jobs
              optional: 'True'
              default_value: '1'
              path: n_jobs
        name: DBSCAN
        other_names: []
        type: Clustering
    :cluster.hierarchical.AgglomerativeClustering:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: The number of clusters to find.
              kind_of_value: integer
              name: num_clusters
              optional: 'True'
              default_value: '2'
              path: n_clusters
            - description: Which affinity to use.
              kind_of_value: '{''precomputed'', ''euclidean'', ''l1'', ''l2'', ''manhattan'',
              ''cosine''}'
              name: affinity
              optional: 'False'
              default_value: '''euclidean'''
              path: affinity
            - description: Used to cache the output of the computation of the tree.
              kind_of_value: '{None, object with the joblib.Memory interface, path to cashing
              directory}'
              name: memory
              optional: 'True'
              default_value: None
              path: memory
            - description: Connectivity matrix. Defines for each sample the neighboring
                samples following a given structure of the data. This can be a connectivity
                matrix itself or a callable that transforms the data into a connectivity
                matrix.
              kind_of_value: '{array-like, callable, None}'
              name: connectivity_matrix
              optional: 'True'
              default_value: None
              path: connectivity
            - description: Stop early the construction of the tree at num_clusters. This
                is useful to decrease computation time if the number of clusters is not
                small compared to the number of samples. This option is useful only when
                specifying a connectivity matrix. Note also that when varying the number
                of clusters and using caching, it may be advantageous to compute the full
                tree.
              kind_of_value: '{boolean, ''auto''}'
              name: compute_full_tree
              optional: 'True'
              default_value: '''auto'''
              path: compute_full_tree
            - description: Which linkage criterion to use. The linkage criterion determines
                which distance to use between sets of observation. The algorithm will merge
                the pairs of cluster that minimize this criterion.
              kind_of_value: '{''ward'', ''complete'', ''average''}'
              name: linkage_criterion
              optional: 'True'
              default_value: '''ward'''
              path: linkage
            - description: This combines the values of agglomerated features into a single
                value, and should accept an array of shape [M, N] and the keyword argument
                axis=1, and reduce it to an array of size [M].
              kind_of_value: callable
              name: pooling_function
              optional: 'False'
              default_value: <function mean>
              path: pooling_func
          optimisation_parameters: []
        name: agglomerative clustering
        other_names: []
        type: Clustering
    :cluster.hierarchical.FeatureAgglomeration:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: The number of clusters to find.
              kind_of_value: integer
              name: num_clusters
              optional: 'True'
              default_value: '2'
              path: n_clusters
            - description: Which affinity to use.
              kind_of_value: '{''precomputed'', ''euclidean'', ''l1'', ''l2'', ''manhattan'',
              ''cosine''}'''
              name: affinity
              optional: 'False'
              default_value: '''euclidean'''
              path: affinity
            - description: Used to cache the output of the computation of the tree.
              kind_of_value: '{None, object with the joblib.Memory interface, path to cashing
              directory}'
              name: memory
              optional: 'True'
              default_value: None
              path: memory
            - description: Connectivity matrix. Defines for each sample the neighboring
                samples following a given structure of the data. This can be a connectivity
                matrix itself or a callable that transforms the data into a connectivity
                matrix.
              kind_of_value: '{array-like, callable, None}'
              name: connectivity_matrix
              optional: 'True'
              default_value: None
              path: connectivity
            - description: Stop early the construction of the tree at num_clusters. This
                is useful to decrease computation time if the number of clusters is not
                small compared to the number of samples. This option is useful only when
                specifying a connectivity matrix. Note also that when varying the number
                of clusters and using caching, it may be advantageous to compute the full
                tree.
              kind_of_value: '{boolean, ''auto''}'
              name: compute_full_tree
              optional: 'True'
              default_value: '''auto'''
              path: compute_full_tree
            - description: Which linkage criterion to use. The linkage criterion determines
                which distance to use between sets of observation. The algorithm will merge
                the pairs of cluster that minimize this criterion.
              kind_of_value: '{''ward'', ''complete'', ''average''}'
              name: linkage_criterion
              optional: 'True'
              default_value: '''ward'''
              path: linkage
            - description: This combines the values of agglomerated features into a single
                value, and should accept an array of shape [M, N] and the keyword argument
                axis=1, and reduce it to an array of size [M].
              kind_of_value: callable
              name: pooling_function
              optional: 'False'
              default_value: <function mean>
              path: pooling_func
          optimisation_parameters: []
        name: feature agglomerative clustering
        other_names: []
        type: Clustering
    :cluster.k_means_.KMeans:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: The number of clusters to form as well as the number of centroids
                to generate.
              kind_of_value: integer
              name: num_clusters
              optional: 'True'
              default_value: '8'
              path: n_clusters
            - description: Method for initialization.
              kind_of_value: '{''k-means++'', ''random'',  array of shape (n_clusters, n_features)}'
              name: initialization_method
              optional: 'False'
              default_value: '''k-means++'''
              path: init
            - description: Relative tolerance with regards to inertia to declare convergence
              kind_of_value: float
              name: tolerance
              optional: 'False'
              default_value: '0.0001'
              path: tol
            - description: Verbosity mode.
              kind_of_value: integer
              name: verbose
              optional: 'False'
              default_value: '0'
              path: verbose
            - description: The seed of the pseudo random number generator to use when shuffling
                the data. If int, random_state is the seed used by the random number generator;
                If RandomState instance, random_state is the random number generator; If
                None, the random number generator is the RandomState instance used by np.random.
              kind_of_value: '{integer, RandomState instance, None}'
              name: random_state
              optional: 'True'
              default_value: None
              path: random_state
            - description: When pre-computing distances it is more numerically accurate
                to center the data first. If copy_x is True, then the original data is not
                modified. If False, the original data is modified, and put back before the
                function returns, but small numerical differences may be introduced by subtracting
                and then adding the data mean.
              kind_of_value: boolean
              name: copy_X
              optional: 'True'
              default_value: 'True'
              path: copy_x
            - description: K-means algorithm to use.
              kind_of_value: '{''auto'', ''full'', ''elkan''}'
              name: algorithm
              optional: 'False'
              default_value: '''auto'''
              path: algorithm
          optimisation_parameters:
            - description: Number of time the k-means algorithm will be run with different
                centroid seeds.
              kind_of_value: integer
              name: num_initialization
              optional: 'False'
              default_value: '10'
              path: n_init
            - description: Maximum number of iterations of the k-means algorithm for a single
                run.
              kind_of_value: integer
              name: max_iterations
              optional: 'False'
              default_value: '300'
              path: max_iter
            - description: "Precompute distances (faster but takes more memory). \u2018\
              auto\u2019 : do not precompute distances if n_samples * n_clusters > 12\
              \ million. This corresponds to about 100MB overhead per job using double\
              \ precision."
              kind_of_value: '{''auto'', True, False}'
              name: precompute_distances
              optional: 'False'
              default_value: '''auto'''
              path: precompute_distances
            - description: The number of jobs to use for the computation. If -1 all CPUs
                are used.
              kind_of_value: integer
              name: jobs
              optional: 'False'
              default_value: '1'
              path: n_jobs
        name: k-means clustering
        other_names:
          - "Lloyd\u2019s algorithm"
        type: Clustering
    :cluster.k_means_.MiniBatchKMeans:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: The number of clusters to form as well as the number of centroids
                to generate.
              kind_of_value: integer
              name: num_clusters
              optional: 'True'
              default_value: '8'
              path: n_clusters
            - description: Method for initialization.
              kind_of_value: '{''k-means++'', ''random'',  array of shape (n_clusters, n_features)}'
              name: initialization_method
              optional: 'False'
              default_value: '''k-means++'''
              path: init
            - description: Size of the mini batches.
              kind_of_value: integer
              name: batch_size
              optional: 'True'
              default_value: '100'
              path: batch_size
            - description: Verbosity mode.
              kind_of_value: integer
              name: verbose
              optional: 'True'
              default_value: '0'
              path: verbose
            - description: Compute label assignment and inertia for the complete dataset
                once the minibatch optimization has converged in fit.
              kind_of_value: boolean
              name: compute_labels
              optional: 'False'
              default_value: 'True'
              path: compute_labels
            - description: The seed of the pseudo random number generator to use when shuffling
                the data. If int, random_state is the seed used by the random number generator;
                If RandomState instance, random_state is the random number generator; If
                None, the random number generator is the RandomState instance used by np.random.
              kind_of_value: '{integer, RandomState instance, None}'
              name: random_state
              optional: 'True'
              default_value: None
              path: random_state
            - description: Control early stopping based on the relative center changes as
                measured by a smoothed, variance-normalized of the mean center squared position
                changes. This early stopping heuristics is closer to the one used for the
                batch variant of the algorithms but induces a slight computational and memory
                overhead over the inertia heuristic.
              kind_of_value: float
              name: tolerance
              optional: 'False'
              default_value: '0.0'
              path: tol
          optimisation_parameters:
            - description: Maximum number of iterations over the complete dataset before
                stopping independently of any early stopping criterion heuristics.
              kind_of_value: integer
              name: max_iterations
              optional: 'True'
              default_value: '100'
              path: max_iter
            - description: Control early stopping based on the consecutive number of mini
                batches that does not yield an improvement on the smoothed inertia.
              kind_of_value: integer
              name: max_no_improvement
              optional: 'False'
              default_value: '10'
              path: max_no_improvement
            - description: Number of samples to randomly sample for speeding up the initialization
                (sometimes at the expense of accuracy).
              kind_of_value: integer
              name: initialization_size
              optional: 'True'
              default_value: 3*batch size
              path: init_size
            - description: Number of random initializations that are tried.
              kind_of_value: integer
              name: num_initialization
              optional: 'False'
              default_value: '3'
              path: n_init
            - description: Control the fraction of the maximum number of counts for a center
                to be reassigned. A higher value means that low count centers are more easily
                reassigned, which means that the model will take longer to converge, but
                should converge in a better clustering.
              kind_of_value: float
              name: reassignment_ratio
              optional: 'False'
              default_value: '0.01'
              path: reassignment_ratio
        name: mini batch k-means clustering
        other_names: []
        type: Clustering
    :cluster.mean_shift_.MeanShift:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Bandwidth used in the RBF kernel.
              kind_of_value: '{float, None}'
              name: bandwidth
              optional: 'True'
              default_value: None
              path: bandwidth
            - description: Seeds used to initialize kernels.
              kind_of_value: '{array of shape=[n_samples, n_features], None}'
              name: seeds
              optional: 'True'
              default_value: None
              path: seeds
            - description: If true, initial kernel locations are not locations of all points,
                but rather the location of the discretized version of points, where points
                are binned onto a grid whose coarseness corresponds to the bandwidth. Setting
                this option to True will speed up the algorithm because fewer seeds will
                be initialized.
              kind_of_value: boolean
              name: bin_seeding
              optional: 'True'
              default_value: 'False'
              path: bin_seeding
            - description: To speed up the algorithm, accept only those bins with at least
                min_bin_freq points as seeds.
              kind_of_value: integer
              name: min_bin_freq
              optional: 'True'
              default_value: '1'
              path: min_bin_freq
            - description: If true, then all points are clustered, even those orphans that
                are not within any kernel. Orphans are assigned to the nearest kernel. If
                false, then orphans are given cluster label -1.
              kind_of_value: boolean
              name: cluster_all
              optional: 'False'
              default_value: 'True'
              path: cluster_all
          optimisation_parameters:
            - description: The number of jobs to use for the computation. If -1 all CPUs
                are used.
              kind_of_value: integer
              name: jobs
              optional: 'False'
              default_value: '1'
              path: n_jobs
        name: mean shift clustering with flat kernel
        other_names: []
        type: Clustering
    :cluster.spectral.SpectralClustering:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: The dimension of the projection subspace.
              kind_of_value: integer
              name: num_clusters
              optional: 'True'
              default_value: '8'
              path: n_clusters
            - description: The eigenvalue decomposition strategy to use.
              kind_of_value: '{''lobpcg'', ''arpack'', ''amg'', None]'
              name: eigen_solver
              optional: 'False'
              default_value: None
              path: eigen_solver
            - description: Kernel coefficient for rbf, poly, sigmoid, laplacian and chi2
                kernels.
              kind_of_value: float
              name: kernel_coefficient
              optional: 'False'
              default_value: '10'
              path: gamma
            - description: Which affinity to use.
              kind_of_value: '{''nearest_neighbors'', ''precomputed'', ''rbf'', ''sigmoid'',
              ''polynomial'', ''poly'', ''linear'', ''cosine'', array-like, callable}'''
              name: affinity
              optional: 'True'
              default_value: '''rbf'''
              path: affinity
            - description: Number of neighbors to use when constructing the affinity matrix
                using the nearest neighbors method.
              kind_of_value: integer
              name: num_neighbours
              optional: 'True'
              default_value: '10'
              path: n_neighbors
            - description: Stopping criterion for eigendecomposition of the Laplacian matrix.
              kind_of_value: float
              name: eigen_tol
              optional: 'True'
              default_value: '0.0'
              path: eigen_tol
            - description: The strategy to use to assign labels in the embedding space.
                There are two ways to assign labels after the laplacian embedding. k-means
                can be applied and is a popular choice. But it can also be sensitive to
                initialization. Discretization is another approach which is less sensitive
                to random initialization.
              kind_of_value: '{''kmeans'', ''discretize''}'
              name: assign_labels
              optional: 'False'
              default_value: '''kmeans'''
              path: assign_labels
            - description: Degree of the polynomial kernel.
              kind_of_value: float
              name: kernel_degree
              optional: 'False'
              default_value: '3.0'
              path: degree
            - description: Zero coefficient for polynomial and sigmoid kernels.
              kind_of_value: float
              name: zero_coefficient
              optional: 'False'
              default_value: '1.0'
              path: coef0
            - description: Additional parameters (keyword arguments) for kernel function
                passed as callable object.
              kind_of_value: dictionary of string to any
              name: kernel_parameters
              optional: 'True'
              default_value: None
              path: kernel_params
          optimisation_parameters:
            - description: The number of jobs to use for the computation. If -1 all CPUs
                are used.
              kind_of_value: integer
              name: jobs
              optional: 'True'
              default_value: '1'
              path: n_jobs
            - description: Number of time the k-means algorithm will be run with different
                centroid seeds.
              kind_of_value: integer
              name: num_initialization
              optional: 'True'
              default_value: '10'
              path: n_init
        name: spectral clustering
        other_names: []
        type: Clustering
    :covariance.outlier_detection.EllipticEnvelope:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Specifies if the estimated precision is stored.
              kind_of_value: boolean
              name: store_precision
              optional: 'True'
              default_value: 'True'
              path: store_precision
            - description: If True, the support of robust location and covariance estimates
                is computed, and a covariance estimate is recomputed from it, without centering
                the data. Useful to work with data whose mean is significantly equal to
                zero but is not exactly zero. If False, the robust location and covariance
                are directly computed with the FastMCD algorithm without additional treatment.
              kind_of_value: boolean
              name: assume_centered
              optional: 'True'
              default_value: 'False'
              path: assume_centered
            - description: 'The proportion of points to be included in the support of the
              raw MCD estimate. If None, the minimum value of support_fraction will be
              used within the algorithm: [n_sample + n_features + 1] / 2.'
              kind_of_value: '{float in (0., 1.), None}'
              name: support_fraction
              optional: 'True'
              default_value: None
              path: support_fraction
            - description: The amount of contamination of the data set, i.e. the proportion
                of outliers in the data set.
              kind_of_value: float in (0., 0.5)
              name: contamination
              optional: 'True'
              default_value: '0.1'
              path: contamination
            - description: The seed of the pseudo random number generator to use when shuffling
                the data. If int, random_state is the seed used by the random number generator;
                If RandomState instance, random_state is the random number generator; If
                None, the random number generator is the RandomState instance used by np.random.
              kind_of_value: '{integer, RandomState instance, None}'
              name: random_state
              optional: 'True'
              default_value: None
              path: random_state
          optimisation_parameters: []
        name: elliptice envelope
        other_names: []
        type: Outlier Detection
    :cross_decomposition.cca_.CCA:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Number of components to keep.
              kind_of_value: integer
              name: num_components
              optional: 'False'
              default_value: '2'
              path: n_components
            - description: Whether to scale the data.
              kind_of_value: boolean
              name: scale
              optional: 'False'
              default_value: 'True'
              path: scale
            - description: Tolerance used in the iterative algorithm.
              kind_of_value: positive float
              name: tolerance
              optional: 'False'
              default_value: '0.000006'
              path: tol
            - description: "Whether the deflation should be done on a copy. Let the default\
              \ value to True unless you don\u2019t care about side effect."
              kind_of_value: boolean
              name: copy
              optional: 'True'
              default_value: 'True'
              path: copy
          optimisation_parameters:
            - description: The maximum number of iterations of the NIPALS inner loop.
              kind_of_value: integer
              name: max_iterations
              optional: 'False'
              default_value: '500'
              path: max_iter
        name: canonical correlation analysis
        other_names:
          - CCA
        type: Matrix Decomposition
    :cross_decomposition.pls_.PLSCanonical:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Number of components to keep.
              kind_of_value: integer
              name: num_components
              optional: 'False'
              default_value: '2'
              path: n_components
            - description: Whether to scale the data.
              kind_of_value: boolean
              name: scale
              optional: 'False'
              default_value: 'True'
              path: scale
            - description: The algorithm used to estimate the weights.
              kind_of_value: '{''nipals'', ''svd''}'
              name: weight_algorithm
              optional: 'False'
              default_value: '''nipals'''
              path: algorithm
            - description: Tolerance used in the iterative algorithm.
              kind_of_value: positive float
              name: tolerance
              optional: 'False'
              default_value: '0.000006'
              path: tol
            - description: "Whether the deflation should be done on a copy. Let the default\
              \ value to True unless you don\u2019t care about side effect."
              kind_of_value: boolean
              name: copy
              optional: 'True'
              default_value: 'True'
              path: copy
          optimisation_parameters:
            - description: The maximum number of iterations of the NIPALS inner loop.
              kind_of_value: integer
              name: max_iterations
              optional: 'False'
              default_value: '500'
              path: max_iter
        name: 2 blocks canonical partial least squares
        other_names:
          - PLS Canonical
        type: Regression
    :cross_decomposition.pls_.PLSRegression:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Number of components to keep.
              kind_of_value: integer
              name: num_components
              optional: 'False'
              default_value: '2'
              path: n_components
            - description: Whether to scale the data.
              kind_of_value: boolean
              name: scale
              optional: 'False'
              default_value: 'True'
              path: scale
            - description: Tolerance used in the iterative algorithm.
              kind_of_value: positive float
              name: tolerance
              optional: 'False'
              default_value: '0.000006'
              path: tol
            - description: "Whether the deflation should be done on a copy. Let the default\
              \ value to True unless you don\u2019t care about side effect."
              kind_of_value: boolean
              name: copy
              optional: 'True'
              default_value: 'True'
              path: copy
          optimisation_parameters:
            - description: The maximum number of iterations of the NIPALS inner loop.
              kind_of_value: integer
              name: max_iterations
              optional: 'False'
              default_value: '500'
              path: max_iter
        name: partial least squares regression
        other_names:
          - PLS Regession
        type: Regression
    :cross_decomposition.pls_.PLSSVD:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Number of components to keep.
              kind_of_value: integer
              name: num_components
              optional: 'False'
              default_value: '2'
              path: n_components
            - description: Whether to scale the data.
              kind_of_value: boolean
              name: scale
              optional: 'False'
              default_value: 'True'
              path: scale
            - description: "Whether the deflation should be done on a copy. Let the default\
              \ value to True unless you don\u2019t care about side effect."
              kind_of_value: boolean
              name: copy
              optional: 'True'
              default_value: 'True'
              path: copy
          optimisation_parameters: []
        name: partial least squares singular value decomposition
        other_names:
          - PLSSVD
        type: Matrix Decomposition
    :decomposition.SparseCoder:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: The dictionary atoms used for sparse coding. Lines are assumed
                to be normalized to unit norm.
              kind_of_value: array of shape [n_components, n_features]
              name: dictionary
              optional: 'False'
              default_value: ''
              path: dictionary
            - description: Algorithm used to transform the data.
              kind_of_value: '{''lasso_lars'', ''lasso_cd'', ''lars'', ''omp'', ''threshold''}'
              name: transform_algorithm
              optional: 'False'
              default_value: '''omp'''
              path: transform_algorithm
            - description: Number of nonzero coefficients to target in each column of the
                solution.
              kind_of_value: '{integer, None}'
              name: transform_num_nonzero_coefs
              optional: 'False'
              default_value: None
              path: transform_n_nonzero_coefs
            - description: Penalty applied to the L1 norm.
              kind_of_value: '{float, None}'
              name: l1_penalty
              optional: 'False'
              default_value: None
              path: transform_alpha
            - description: Whether to split the sparse feature vector into the concatenation
                of its negative part and its positive part. This can improve the performance
                of downstream classifiers.
              kind_of_value: boolean
              name: split_sign
              optional: 'False'
              default_value: 'False'
              path: split_sign
          optimisation_parameters:
            - description: The number of jobs to use for the computation. If -1 all CPUs
                are used.
              kind_of_value: integer
              name: jobs
              optional: 'False'
              default_value: '1'
              path: n_jobs
        name: sparse coding
        other_names: []
        type: Dimensionality Reduction
    :decomposition.dict_learning.DictionaryLearning:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Number of dictionary elements to extract.
              kind_of_value: '{integer, None}'
              name: num_components
              optional: 'False'
              default_value: None
              path: n_components
            - description: sparsity controlling parameter
              kind_of_value: float
              name: sparsity_control_param
              optional: 'False'
              default_value: '1.0'
              path: alpha
            - description: Tolerance for numerical error.
              kind_of_value: float
              name: tolerance
              optional: 'True'
              default_value: '0.00000001'
              path: tol
            - description: Method to solve the Lasso problem.
              kind_of_value: '{''lars'', ''cd''}'
              name: fit_algorithm
              optional: 'False'
              default_value: ''
              path: fit_algorithm
            - description: Algorithm used to transform the data.
              kind_of_value: '{''lasso_lars'', ''lasso_cd'', ''lars'', ''omp'', ''threshold''}'
              name: transform_algorithm
              optional: 'False'
              default_value: '''omp'''
              path: transform_algorithm
            - description: Number of nonzero coefficients to target in each column of the
                solution.
              kind_of_value: '{integer, None}'
              name: transform_num_nonzero_coefs
              optional: 'False'
              default_value: None
              path: transform_n_nonzero_coefs
            - description: Penalty applied to the L1 norm.
              kind_of_value: '{float, None}'
              name: l1_penalty
              optional: 'False'
              default_value: None
              path: transform_alpha
            - description: Initial value for the code, for warm restart.
              kind_of_value: '{array of shape (n_samples, n_components), None}'
              name: code_init
              optional: 'False'
              default_value: None
              path: code_init
            - description: Initial value for the dictionary, for warm restart.
              kind_of_value: '{array of shape (n_components, n_features), None}'
              name: dict_init
              optional: 'False'
              default_value: None
              path: dict_init
            - description: To control the verbosity of the procedure.
              kind_of_value: boolean
              name: verbose
              optional: 'False'
              default_value: 'False'
              path: verbose
            - description: Whether to split the sparse feature vector into the concatenation
                of its negative part and its positive part. This can improve the performance
                of downstream classifiers.
              kind_of_value: boolean
              name: split_sign
              optional: 'False'
              default_value: 'False'
              path: split_sign
            - description: The seed of the pseudo random number generator to use when shuffling
                the data. If int, random_state is the seed used by the random number generator;
                If RandomState instance, random_state is the random number generator; If
                None, the random number generator is the RandomState instance used by np.random.
              kind_of_value: '{integer, RandomState instance, None}'
              name: random_state
              optional: 'True'
              default_value: None
              path: random_state
          optimisation_parameters:
            - description: Maximum number of iterations.
              kind_of_value: integer
              name: max_iterations
              optional: 'True'
              default_value: '1000'
              path: max_iter
            - description: The number of jobs to use for the computation. If -1 all CPUs
                are used.
              kind_of_value: integer
              name: jobs
              optional: 'True'
              default_value: '1'
              path: n_jobs
        name: dictionary learning
        other_names: []
        type: Dimensionality Reduction
    :decomposition.dict_learning.MiniBatchDictionaryLearning:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Number of dictionary elements to extract.
              kind_of_value: '{integer, None}'
              name: num_components
              optional: 'False'
              default_value: None
              path: n_components
            - description: sparsity controlling parameter
              kind_of_value: float
              name: sparsity_control_param
              optional: 'False'
              default_value: '1.0'
              path: alpha
            - description: Method to solve the Lasso problem.
              kind_of_value: '{''lars'', ''cd''}'
              name: fit_algorithm
              optional: 'False'
              default_value: ''
              path: fit_algorithm
            - description: Size of minibatches for stochastic optimizers.
              kind_of_value: integer
              name: batch_size
              optional: 'True'
              default_value: '3'
              path: batch_size
            - description: Whether to shuffle the samples before forming batches.
              kind_of_value: boolean
              name: shuffle
              optional: 'True'
              default_value: 'True'
              path: shuffle
            - description: Initial value for the dictionary, for warm restart.
              kind_of_value: '{array of shape (n_components, n_features), None}'
              name: dict_init
              optional: 'False'
              default_value: None
              path: dict_init
            - description: Algorithm used to transform the data.
              kind_of_value: '{''lasso_lars'', ''lasso_cd'', ''lars'', ''omp'', ''threshold''}'
              name: transform_algorithm
              optional: 'False'
              default_value: '''omp'''
              path: transform_algorithm
            - description: Number of nonzero coefficients to target in each column of the
                solution.
              kind_of_value: '{integer, None}'
              name: transform_num_nonzero_coefs
              optional: 'False'
              default_value: None
              path: transform_n_nonzero_coefs
            - description: Penalty applied to the L1 norm.
              kind_of_value: '{float, None}'
              name: l1_penalty
              optional: 'False'
              default_value: None
              path: transform_alpha
            - description: To control the verbosity of the procedure.
              kind_of_value: boolean
              name: verbose
              optional: 'False'
              default_value: 'False'
              path: verbose
            - description: Whether to split the sparse feature vector into the concatenation
                of its negative part and its positive part. This can improve the performance
                of downstream classifiers.
              kind_of_value: boolean
              name: split_sign
              optional: 'False'
              default_value: 'False'
              path: split_sign
            - description: The seed of the pseudo random number generator to use when shuffling
                the data. If int, random_state is the seed used by the random number generator;
                If RandomState instance, random_state is the random number generator; If
                None, the random number generator is the RandomState instance used by np.random.
              kind_of_value: '{integer, RandomState instance, None}'
              name: random_state
              optional: 'True'
              default_value: None
              path: random_state
          optimisation_parameters:
            - description: Maximum number of iterations.
              kind_of_value: integer
              name: max_iterations
              optional: 'True'
              default_value: '1000'
              path: n_iter
            - description: The number of jobs to use for the computation. If -1 all CPUs
                are used.
              kind_of_value: integer
              name: jobs
              optional: 'True'
              default_value: '1'
              path: n_jobs
        name: mini batch dictionary learning
        other_names: []
        type: Dimensionality Reduction
    :decomposition.factor_analysis.FactorAnalysis:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Dimensionality of latent space, the number of components of X
                that are obtained after transform.
              kind_of_value: '{integer, None}'
              name: num_components
              optional: 'False'
              default_value: None
              path: n_components
            - description: Stopping tolerance for EM algorithm.
              kind_of_value: float
              name: tolerance
              optional: 'True'
              default_value: '0.01'
              path: tol
            - description: The initial guess of the noise variance for each feature.
              kind_of_value: '{array of shape (n_features,), None}'
              name: noise_variance_init
              optional: 'False'
              default_value: None
              path: noise_variance_init
            - description: Selects the algorithm for finding singular vectors.
              kind_of_value: '{''randomized'', ''lapack''}'
              name: svd_method
              optional: 'False'
              default_value: '''randomized'''
              path: svd_method
            - description: Number of iterations for the power method computed by svd_solver
                == 'randomized'.
              kind_of_value: integer
              name: iterated_power
              optional: 'True'
              default_value: '3'
              path: iterated_power
            - description: The seed of the pseudo random number generator to use when shuffling
                the data. If int, random_state is the seed used by the random number generator;
                If RandomState instance, random_state is the random number generator; If
                None, the random number generator is the RandomState instance used by np.random.
              kind_of_value: '{integer, RandomState instance, None}'
              name: random_state
              optional: 'True'
              default_value: None
              path: random_state
          optimisation_parameters:
            - description: Maximum number of iterations.
              kind_of_value: integer
              name: max_iterations
              optional: 'True'
              default_value: '1000'
              path: max_iter
        name: factor analysis
        other_names:
          - FA
        type: Dimensionality Reduction
    :decomposition.fastica_.FastICA:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Number of components to use. If none is passed, all are used.
              kind_of_value: '{integer, None}'
              name: num_components
              optional: 'True'
              default_value: None
              path: n_components
            - description: Apply parallel or deflational algorithm for FastICA.
              kind_of_value: '{''parallel'', ''deflation''}'
              name: algorithm
              optional: 'False'
              default_value: '''parallel'''
              path: algorithm
            - description: If whiten is false, the data is already considered to be whitened,
                and no whitening is performed.
              kind_of_value: boolean
              name: whiten
              optional: 'True'
              default_value: 'True'
              path: whiten
            - description: The functional form of the G function used in the approximation
                to neg-entropy.
              kind_of_value: '{''logcosh'', ''exp'', ''cube'', function that contains a
              tuple containing the value of the function, and of its derivative}'
              name: functional_function_form
              optional: 'True'
              default_value: '''logcosh'''
              path: fun
            - description: Arguments to send to the functional form.
              kind_of_value: '{dictionary, None}'
              name: function_arguments
              optional: 'True'
              default_value: None
              path: fun_args
            - description: Tolerance on update at each iteration.
              kind_of_value: float
              name: tolerance
              optional: 'True'
              default_value: '0.0001'
              path: tol
            - description: The mixing matrix to be used to initialize the algorithm.
              kind_of_value: '{array of shape (n_components, n_components), None}'
              name: w_init
              optional: 'False'
              default_value: None
              path: w_init
            - description: The seed of the pseudo random number generator to use when shuffling
                the data. If int, random_state is the seed used by the random number generator;
                If RandomState instance, random_state is the random number generator; If
                None, the random number generator is the RandomState instance used by np.random.
              kind_of_value: '{integer, RandomState instance, None}'
              name: random_state
              optional: 'True'
              default_value: None
              path: random_state
          optimisation_parameters:
            - description: Maximum number of iterations during fit.
              kind_of_value: integer
              name: max_iterations
              optional: 'True'
              default_value: '200'
              path: max_iter
        name: fast independent component analysis
        other_names:
          - fast ICA
        type: Dimensionality Reduction
    :decomposition.incremental_pca.IncrementalPCA:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Number of components to keep.
              kind_of_value: '{integer, None}'
              name: num_components
              optional: 'False'
              default_value: None
              path: n_components
            - description: When True (False by default) the components_ vectors are multiplied
                by the square root of n_samples and then divided by the singular values
                to ensure uncorrelated outputs with unit component-wise variances. Whitening
                will remove some information from the transformed signal (the relative variance
                scales of the components) but can sometime improve the predictive accuracy
                of the downstream estimators by making their data respect some hard-wired
                assumptions.
              kind_of_value: boolean
              name: whiten
              optional: 'True'
              default_value: 'False'
              path: whiten
            - description: If False, data passed to fit are overwritten and running fit(X).transform(X)
                will not yield the expected results, use fit_transform(X) instead.
              kind_of_value: boolean
              name: copy
              optional: 'False'
              default_value: 'True'
              path: copy
            - description: The number of samples to use for each batch.
              kind_of_value: '{integer, None}'
              name: batch_size
              optional: 'False'
              default_value: None
              path: batch_size
          optimisation_parameters: []
        name: incremental principal component analysis
        other_names:
          - incremental PCA
        type: Dimensionality Reduction
    :decomposition.kernel_pca.KernelPCA:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Number of components to keep.
              kind_of_value: '{integer, None}'
              name: num_components
              optional: 'False'
              default_value: None
              path: n_components
            - description: Kernel mapping used internally.
              kind_of_value: '{''linear'', ''poly'', ''rbf'', ''sigmoid'', ''cosine'', ''precomputed''}'
              name: kernel
              optional: 'False'
              default_value: '''linear'''
              path: kernel
            - description: Gamma parameter for the RBF, polynomial and sigmoid kernels.
                Interpretation depends on kernels.
              kind_of_value: float
              name: gamma
              optional: 'False'
              default_value: None
              path: gamma
            - description: Degree of the polynomial kernel.
              kind_of_value: integer
              name: kernel_degree
              optional: 'False'
              default_value: '3'
              path: degree
            - description: Zero coefficient for polynomial and sigmoid kernels.
              kind_of_value: float
              name: zero_coefficient
              optional: 'False'
              default_value: '1.0'
              path: coef0
            - description: Additional parameters (keyword arguments) for kernel function
                passed as callable object.
              kind_of_value: mapping of string to any
              name: kernel_parameters
              optional: 'False'
              default_value: None
              path: kernel_params
            - description: Hyperparameter of the ridge regression that learns the inverse
                transform.
              kind_of_value: integer
              name: ridge_alpha
              optional: 'False'
              default_value: '1'
              path: alpha
            - description: Learn the inverse transform for non-precomputed kernels. (i.e.
                learn to find the pre-image of a point)
              kind_of_value: boolean
              name: fit_inverse_transform
              optional: 'False'
              default_value: 'False'
              path: fit_inverse_transform
            - description: Solver for the eigenvalue decomposition.  If num_components is
                much less than the number of training samples, arpack may be more efficient
                than the dense eigensolver.
              kind_of_value: '{''auto'', ''arpack'', ''dense'']'
              name: eigen_solver
              optional: 'False'
              default_value: '''auto'''
              path: eigen_solver
            - description: Convergence tolerance for arpack. If 0, optimal value will be
                chosen by arpack.
              kind_of_value: float
              name: tolerance
              optional: 'False'
              default_value: '0.0'
              path: tol
            - description: If True, then all components with zero eigenvalues are removed.
              kind_of_value: boolean
              name: remove_zero_eigenvalue
              optional: 'False'
              default_value: 'False'
              path: remove_zero_eig
            - description: The seed of the pseudo random number generator to use when shuffling
                the data. If int, random_state is the seed used by the random number generator;
                If RandomState instance, random_state is the random number generator; If
                None, the random number generator is the RandomState instance used by np.random.
              kind_of_value: '{integer, RandomState instance, None}'
              name: random_state
              optional: 'True'
              default_value: None
              path: random_state
            - description: If True, input X is copied and stored by the model in the X_fit_
                attribute. If no further changes will be done to X, setting copy_X=False
                saves memory by storing a reference.
              kind_of_value: boolean
              name: copy_X
              optional: 'True'
              default_value: 'True'
              path: copy_X
          optimisation_parameters:
            - description: Maximum number of iterations for arpack. If None, optimal value
                will be chosen by arpack.
              kind_of_value: integer
              name: max_iterations
              optional: 'True'
              default_value: None
              path: max_iter
            - description: The number of jobs to use for the computation. If -1 all CPUs
                are used.
              kind_of_value: integer
              name: jobs
              optional: 'True'
              default_value: '1'
              path: n_jobs
        name: kernel principal component analysis
        other_names:
          - kernel PCA
        type: Dimensionality Reduction
    :decomposition.nmf.NMF:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Number of components to use. If none is passed, all are used.
              kind_of_value: '{integer, None}'
              name: num_components
              optional: 'True'
              default_value: None
              path: n_components
            - description: Method used to initialize the procedure.
              kind_of_value: '{''random'', ''nndsvd'', ''nndsvda'', ''nndsvdar'', ''custom'',
              None}'
              name: initialization_method
              optional: 'False'
              default_value: None
              path: init
            - description: Numerical solver to use.
              kind_of_value: '{''cd'', ''mu''}'
              name: solver
              optional: 'False'
              default_value: '''cd'''
              path: solver
            - description: Tolerance of the stopping condition.
              kind_of_value: float
              name: tolerance
              optional: 'False'
              default_value: '0.0001'
              path: tol
            - description: The seed of the pseudo random number generator to use when shuffling
                the data. If int, random_state is the seed used by the random number generator;
                If RandomState instance, random_state is the random number generator; If
                None, the random number generator is the RandomState instance used by np.random.
              kind_of_value: '{integer, RandomState instance, None}'
              name: random_state
              optional: 'True'
              default_value: None
              path: random_state
            - description: Constant that multiplies the regularization terms. Set it to
                zero to have no regularization.
              kind_of_value: double
              name: regularization_multiplier
              optional: 'False'
              default_value: '0.0'
              path: alpha
            - description: The ElasticNet mixing parameter, with 0 <= l1_ratio <= 1. For
                l1_ratio = 0 the penalty is an elementwise L2 penalty (aka Frobenius Norm).
                For l1_ratio = 1 it is an elementwise L1 penalty. For 0 < l1_ratio < 1,
                the penalty is a combination of L1 and L2.
              kind_of_value: double
              name: l1_ratio
              optional: 'False'
              default_value: '0.0'
              path: l1_ratio
            - description: Whether to be verbose.
              kind_of_value: boolean
              name: verbose
              optional: 'False'
              default_value: 'False'
              path: verbose
            - description: If true, randomize the order of coordinates in the CD solver.
              kind_of_value: boolean
              name: shuffle
              optional: 'False'
              default_value: 'False'
              path: shuffle
          optimisation_parameters:
            - description: Maximum number of iterations during fit.
              kind_of_value: integer
              name: max_iterations
              optional: 'True'
              default_value: '200'
              path: max_iter
        name: non-negative matrix factorization
        other_names:
          - NFM
        type: Dimensionality Reduction
    :decomposition.online_lda.LatentDirichletAllocation:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Number of topics.
              kind_of_value: integer
              name: num_components
              optional: 'True'
              default_value: '10'
              path: n_components
            - description: Prior of document topic distribution theta. If the value is None,
                defaults to 1 / n_components. In the literature, this is called alpha.
              kind_of_value: '{float, None}'
              name: doc_topic_prior
              optional: 'True'
              default_value: None
              path: doc_topic_prior
            - description: Prior of topic word distribution beta. If the value is None,
                defaults to 1 / n_components. In the literature, this is called eta.
              kind_of_value: '{float, None}'
              name: topic_word_prior
              optional: 'True'
              default_value: None
              path: topic_word_prior
            - description: Method used to update _component. Only used in fit method. In
                general, if the data size is large, the online update will be much faster
                than the batch update.
              kind_of_value: '{''batch'', ''online''}'
              name: learning_method
              optional: 'False'
              default_value: '''online'''
              path: learning_method
            - description: It is a parameter that control learning rate in the online learning
                method. The value should be set between (0.5, 1.0] to guarantee asymptotic
                convergence. When the value is 0.0 and batch_size is n_samples, the update
                method is same as batch learning. In the literature, this is called kappa.
              kind_of_value: float between (0.5, 1.0]
              name: learning_decay
              optional: 'True'
              default_value: '0.7'
              path: learning_decay
            - description: A (positive) parameter that downweights early iterations in online
                learning. It should be greater than 1.0. In the literature, this is called
                tau_0.
              kind_of_value: float > 0
              name: learning_offset
              optional: 'True'
              default_value: '10.'
              path: learning_offset
            - description: Number of documents to use in each EM iteration. Only used in
                online learning.
              kind_of_value: integer
              name: batch_size
              optional: 'True'
              default_value: '128'
              path: batch_size
            - description: How often to evaluate perplexity. Only used in fit method. set
                it to 0 or negative number to not evalute perplexity in training at all.
                Evaluating perplexity can help you check convergence in training process,
                but it will also increase total training time. Evaluating perplexity in
                every iteration might increase training time up to two-fold.
              kind_of_value: integer
              name: evaluate_every
              optional: 'True'
              default_value: '0'
              path: evaluate_every
            - description: Total number of documents. Only used in the partial_fit method.
              kind_of_value: integer
              name: total_samples
              optional: 'True'
              default_value: '1000000'
              path: total_samples
            - description: Perplexity tolerance in batch learning.
              kind_of_value: float
              name: perplexity_tolerance
              optional: 'True'
              default_value: '0.1'
              path: perp_tol
            - description: Stopping tolerance for updating document topic distribution in
                E-step.
              kind_of_value: float
              name: mean_change_tolerance
              optional: 'True'
              default_value: '0.001'
              path: mean_change_tol
            - description: Max number of iterations for updating document topic distribution
                in the E-step.
              kind_of_value: integer
              name: max_doc_update_iteration
              optional: 'False'
              default_value: '100'
              path: max_doc_update_iter
            - description: Controls the verbosity level.
              kind_of_value: integer
              name: verbose
              optional: 'True'
              default_value: '0'
              path: verbose
            - description: The seed of the pseudo random number generator to use when shuffling
                the data. If int, random_state is the seed used by the random number generator;
                If RandomState instance, random_state is the random number generator; If
                None, the random number generator is the RandomState instance used by np.random.
              kind_of_value: '{integer, RandomState instance, None}'
              name: random_state
              optional: 'True'
              default_value: None
              path: random_state
          optimisation_parameters:
            - description: Maximum number of iterations during fit.
              kind_of_value: integer
              name: max_iterations
              optional: 'True'
              default_value: '200'
              path: max_iter
            - description: The number of jobs to use in the E-step. If -1, all CPUs are
                used. If -1 all CPUs are used.
              kind_of_value: integer
              name: jobs
              optional: 'True'
              default_value: '1'
              path: n_jobs
        name: latent Dirichlet allocation
        other_names:
          - LDA
        type: Dimensionality Reduction
    :decomposition.pca.PCA:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Number of components to keep.
              kind_of_value: '{integer, float, None, ''mle''}'
              name: num_components
              optional: 'False'
              default_value: None
              path: n_components
            - description: If False, data passed to fit are overwritten and running fit(X).transform(X)
                will not yield the expected results, use fit_transform(X) instead.
              kind_of_value: boolean
              name: copy
              optional: 'False'
              default_value: 'True'
              path: copy
            - description: When True (False by default) the components_ vectors are multiplied
                by the square root of n_samples and then divided by the singular values
                to ensure uncorrelated outputs with unit component-wise variances. Whitening
                will remove some information from the transformed signal (the relative variance
                scales of the components) but can sometime improve the predictive accuracy
                of the downstream estimators by making their data respect some hard-wired
                assumptions.
              kind_of_value: boolean
              name: whiten
              optional: 'True'
              default_value: 'False'
              path: whiten
            - description: singular value decomposition solver
              kind_of_value: ' {''auto'', ''full'', ''arpack'', ''randomized''}'
              name: svd_solver
              optional: 'False'
              default_value: '''auto'''
              path: svd_solver
            - description: Tolerance for singular values computed by svd_solver == 'arpack'.
              kind_of_value: float >= 0
              name: tolerance
              optional: 'False'
              default_value: '0.0'
              path: tol
            - description: Number of iterations for the power method computed by svd_solver
                == 'randomized'.
              kind_of_value: '{integer >= 0, ''auto''}'
              name: iterated_power
              optional: 'False'
              default_value: '''auto'''
              path: iterated_power
            - description: The seed of the pseudo random number generator to use when shuffling
                the data. If int, random_state is the seed used by the random number generator;
                If RandomState instance, random_state is the random number generator; If
                None, the random number generator is the RandomState instance used by np.random.
              kind_of_value: '{integer, RandomState instance, None}'
              name: random_state
              optional: 'True'
              default_value: None
              path: random_state
          optimisation_parameters: []
        name: principal component analysis
        other_names:
          - PCA
        type: Dimensionality Reduction
    :decomposition.sparse_pca.MiniBatchSparsePCA:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Number of sparse atoms to extract.
              kind_of_value: '{integer, None}'
              name: num_components
              optional: 'False'
              default_value: None
              path: n_components
            - description: Sparsity controlling parameter. Higher values lead to sparser
                components.
              kind_of_value: float
              name: sparsity_parmeter
              optional: 'False'
              default_value: '1'
              path: alpha
            - description: Amount of ridge shrinkage to apply in order to improve conditioning
                when calling the transform method.
              kind_of_value: float
              name: ridge_alpha
              optional: 'False'
              default_value: '0.01'
              path: ridge_alpha
            - description: ''
              kind_of_value: '{callable, None}'
              name: callback
              optional: 'True'
              default_value: ''
              path: callback
            - description: The number of features to take in each mini batch.
              kind_of_value: integer
              name: batch_size
              optional: 'True'
              default_value: '3'
              path: batch_size
            - description: Controls the verbosity; the higher, the more messages.
              kind_of_value: integer
              name: verbose
              optional: 'True'
              default_value: '0'
              path: verbose
            - description: Whether to shuffle the data before splitting it in batches.
              kind_of_value: boolean
              name: shuffle
              optional: 'True'
              default_value: 'True'
              path: shuffle
            - description: Embedding method.
              kind_of_value: '{''lars'', ''cd''}'
              name: lasso_method
              optional: 'False'
              default_value: '''lars'''
              path: method
            - description: The seed of the pseudo random number generator to use when shuffling
                the data. If int, random_state is the seed used by the random number generator;
                If RandomState instance, random_state is the random number generator; If
                None, the random number generator is the RandomState instance used by np.random.
              kind_of_value: '{integer, RandomState instance, None}'
              name: random_state
              optional: 'True'
              default_value: None
              path: random_state
          optimisation_parameters:
            - description: Number of iterations to perform for each mini batch.
              kind_of_value: integer
              name: num_iter
              optional: 'True'
              default_value: '100'
              path: n_iter
            - description: The number of jobs to use for the computation. If -1 all CPUs
                are used.
              kind_of_value: integer
              name: jobs
              optional: 'False'
              default_value: '1'
              path: n_jobs
        name: mini batch sparse principal component analysis
        other_names:
          - mini batch sparse PCA
        type: Dimensionality Reduction
    :decomposition.sparse_pca.SparsePCA:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Number of sparse atoms to extract.
              kind_of_value: '{integer, None}'
              name: num_components
              optional: 'False'
              default_value: None
              path: n_components
            - description: Sparsity controlling parameter. Higher values lead to sparser
                components.
              kind_of_value: float
              name: sparsity_parmeter
              optional: 'False'
              default_value: '1'
              path: alpha
            - description: Amount of ridge shrinkage to apply in order to improve conditioning
                when calling the transform method.
              kind_of_value: float
              name: ridge_alpha
              optional: 'False'
              default_value: '0.01'
              path: ridge_alpha
            - description: Tolerance for the stopping condition.
              kind_of_value: float
              name: tolerance
              optional: 'False'
              default_value: '0.00000001'
              path: tol
            - description: Embedding method.
              kind_of_value: '{''lars'', ''cd''}'
              name: lasso_method
              optional: 'False'
              default_value: '''lars'''
              path: method
            - description: Initial values for the loadings for warm restart scenarios.
              kind_of_value: array of shape (n_samples, n_components)
              name: U_init
              optional: 'False'
              default_value: None
              path: U_init
            - description: Initial values for the components for warm restart scenarios.
              kind_of_value: array of shape (n_components, n_features)
              name: V_init
              optional: 'False'
              default_value: None
              path: V_init
            - description: Controls the verbosity; the higher, the more messages.
              kind_of_value: integer
              name: verbose
              optional: 'True'
              default_value: '0'
              path: verbose
            - description: The seed of the pseudo random number generator to use when shuffling
                the data. If int, random_state is the seed used by the random number generator;
                If RandomState instance, random_state is the random number generator; If
                None, the random number generator is the RandomState instance used by np.random.
              kind_of_value: '{integer, RandomState instance, None}'
              name: random_state
              optional: 'True'
              default_value: None
              path: random_state
          optimisation_parameters:
            - description: Maximum number of iterations to perform.
              kind_of_value: integer
              name: max_iterations
              optional: 'True'
              default_value: '1000'
              path: max_iter
            - description: The number of jobs to use for the computation. If -1 all CPUs
                are used.
              kind_of_value: integer
              name: jobs
              optional: 'False'
              default_value: '1'
              path: n_jobs
        name: sparse principal component analysis
        other_names:
          - sparse PCA
        type: Dimensionality Reduction
    :decomposition.truncated_svd.TruncatedSVD:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Number of sparse atoms to extract.
              kind_of_value: '{integer, None}'
              name: num_components
              optional: 'False'
              default_value: '2'
              path: n_components
            - description: singular value decomposition solver
              kind_of_value: ' {''arpack'', ''randomized''}'
              name: svd_solver
              optional: 'False'
              default_value: '''randomized'''
              path: algorithm
            - description: Tolerance for ARPACK. 0 means machine precision. Ignored by randomized
                SVD solver.
              kind_of_value: float
              name: tolerance
              optional: 'True'
              default_value: '0.0'
              path: tol
            - description: The seed of the pseudo random number generator to use when shuffling
                the data. If int, random_state is the seed used by the random number generator;
                If RandomState instance, random_state is the random number generator; If
                None, the random number generator is the RandomState instance used by np.random.
              kind_of_value: '{integer, RandomState instance, None}'
              name: random_state
              optional: 'True'
              default_value: None
              path: random_state
          optimisation_parameters:
            - description: Number of iterations for randomized SVD solver. Not used by ARPACK.
                The default is larger than the default in randomized_svd to handle sparse
                matrices that may have large slowly decaying spectrum.
              kind_of_value: integer
              name: num_iter
              optional: 'True'
              default_value: '5'
              path: n_iter
        name: truncated single value decomposition
        other_names:
          - truncated SVD
          - LSA
        type: Dimensionality Reduction
    :discriminant_analysis.LinearDiscriminantAnalysis:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: 'Possible values: singular value decomposition (svd), least squares
              solution (lsqr), eigenvalue decomposition (eigen)'
              kind_of_value: '{''svd'', ''lsqr'', ''eigen''}'
              name: estimation_algorithm
              optional: 'True'
              default_value: '''svd'''
              path: solver
            - description: 'Shrinkage is a tool to improve estimation of covariance matrices
              in situations where the number of training samples is small compared to
              the number of features. Possible values: no shrinkage (None), automatic
              shrinkage using the Ledoit-Wolf lemma (auto), fixed shrinkage parameter(float
              between 0 and 1)'
              kind_of_value: '{None, ''auto'', float between 0 and 1}'
              name: shrinkage
              optional: 'True'
              default_value: None
              path: shrinkage
            - description: Class priors.
              kind_of_value: array in shape of (n_classes,)
              name: priors
              optional: 'True'
              default_value: None
              path: priors
            - description: Number of components (< n_classes - 1) for dimensionality reduction.
              kind_of_value: integer
              name: num_components
              optional: 'True'
              default_value: None
              path: n_components
            - description: "Additionally compute class covariance matrix (default False),\
              \ used only in \u2018svd\u2019 solver."
              kind_of_value: boolean
              name: store_covariance
              optional: 'True'
              default_value: 'False'
              path: store_covariance
            - description: Threshold used for rank estimation in SVD solver.
              kind_of_value: float
              name: tolerance
              optional: 'True'
              default_value: '0.0001'
              path: tol
          optimisation_parameters: []
        name: linear discriminant analysis
        other_names:
          - LDA
        type: Classification
    :discriminant_analysis.QuadraticDiscriminantAnalysis:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Class priors.
              kind_of_value: array in shape of [n_classes]
              name: priors
              optional: 'True'
              default_value: None
              path: priors
            - description: Regularizes the covariance estimate.
              kind_of_value: float
              name: regularisation_parameter
              optional: 'True'
              default_value: '0.0'
              path: reg_param
            - description: If True the covariance matrices are computed and stored in the
                self.covariance_ attribute.
              kind_of_value: boolean
              name: store_covariance
              optional: 'False'
              default_value: 'False'
              path: store_covariance
            - description: Threshold used for rank estimation.
              kind_of_value: float
              name: tolerance
              optional: 'True'
              default_value: '0.0001'
              path: tol
          optimisation_parameters: []
        name: quadratic discriminant analysis
        other_names:
          - QDA
        type: Classification
    :ensemble.VotingClassifier:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Used estimators.
              kind_of_value: string, estimator tuple{('lr', clf1), ('rf', clf2), ('gnb',
                clf3), ('dt', clf1), ('knn', clf2), ('svc', clf3)}
              name: estimators
              optional: 'False'
              default_value: ''
              path: estimators
            - description: If 'hard', uses predicted class labels for majority rule voting.
                Else if 'soft', predicts the class label based on the argmax of the sums
                of the predicted probabilities, which is recommended for an ensemble of
                well-calibrated classifiers.
              kind_of_value: '{''hard'', ''soft''}'
              name: voting
              optional: 'False'
              default_value: '''hard'''
              path: voting
            - description: Sequence of weights (float or int) to weight the occurrences
                of predicted class labels (hard voting) or class probabilities before averaging
                (soft voting). Uses uniform weights if None.
              kind_of_value: array-like, shape = [n_classifiers] integer, float, None
              name: weights
              optional: 'True'
              default_value: None
              path: weights
            - description: Affects shape of transform output only when voting='soft'.
              kind_of_value: '{boolean, None}'
              name: flatten_transform
              optional: 'True'
              default_value: None
              path: flatten_transform
          optimisation_parameters:
            - description: The number of jobs to use for the computation. If -1 all CPUs
                are used.
              kind_of_value: integer
              name: jobs
              optional: 'True'
              default_value: '1'
              path: n_jobs
        name: voting classifier
        other_names: []
        type: Classifcation
    :ensemble.bagging.BaggingClassifier:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: The base estimator to fit on random subsets of the dataset.
              kind_of_value: '{object, None}'
              name: base_estimator
              optional: 'True'
              default_value: None
              path: base_estimator
            - description: The number of trees in the forest.
              kind_of_value: integer
              name: num_estimators
              optional: 'True'
              default_value: '10'
              path: n_estimators
            - description: The number of samples to draw from X to train each base estimator.
              kind_of_value: '{integer, float}'
              name: max_samples
              optional: 'True'
              default_value: '1.0'
              path: max_samples
            - description: The number of features to draw from X to train each base estimator.
              kind_of_value: '{integer, float}'
              name: max_features
              optional: 'True'
              default_value: '1.0'
              path: max_features
            - description: Whether samples are drawn with replacement.
              kind_of_value: boolean
              name: bootstrap
              optional: 'True'
              default_value: 'True'
              path: bootstrap
            - description: Whether features are drawn with replacement.
              kind_of_value: boolean
              name: bootstrap_features
              optional: 'True'
              default_value: 'False'
              path: bootstrap_features
            - description: Whether to use out-of-bag samples to estimate the generalization
                error.
              kind_of_value: boolean
              name: oob_samples
              optional: 'False'
              default_value: 'False'
              path: oob_score
            - description: When set to True, reuse the solution of the previous call to
                fit and add more estimators to the ensemble, otherwise, just fit a whole
                new ensemble.
              kind_of_value: boolean
              name: reuse_previous
              optional: 'True'
              default_value: 'False'
              path: warm_start
            - description: The seed of the pseudo random number generator to use when shuffling
                the data. If int, random_state is the seed used by the random number generator;
                If RandomState instance, random_state is the random number generator; If
                None, the random number generator is the RandomState instance used by np.random.
              kind_of_value: '{integer, RandomState instance, None}'
              name: random_state
              optional: 'True'
              default_value: None
              path: random_state
            - description: Controls the verbosity of the tree building process.
              kind_of_value: integer
              name: verbose
              optional: 'True'
              default_value: '0'
              path: verbose
          optimisation_parameters:
            - description: The number of jobs to use for the computation. If -1 all CPUs
                are used.
              kind_of_value: integer
              name: jobs
              optional: 'True'
              default_value: '1'
              path: n_jobs
        name: bagging classifier
        other_names: []
        type: Classification
    :ensemble.bagging.BaggingRegressor:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: The base estimator to fit on random subsets of the dataset.
              kind_of_value: '{object, None}'
              name: base_estimator
              optional: 'True'
              default_value: None
              path: base_estimator
            - description: The number of trees in the forest.
              kind_of_value: integer
              name: num_estimators
              optional: 'True'
              default_value: '10'
              path: n_estimators
            - description: The number of samples to draw from X to train each base estimator.
              kind_of_value: '{integer, float}'
              name: max_samples
              optional: 'True'
              default_value: '1.0'
              path: max_samples
            - description: The number of features to draw from X to train each base estimator.
              kind_of_value: '{integer, float}'
              name: max_features
              optional: 'True'
              default_value: '1.0'
              path: max_features
            - description: Whether samples are drawn with replacement.
              kind_of_value: boolean
              name: bootstrap
              optional: 'True'
              default_value: 'True'
              path: bootstrap
            - description: Whether features are drawn with replacement.
              kind_of_value: boolean
              name: bootstrap_features
              optional: 'True'
              default_value: 'False'
              path: bootstrap_features
            - description: Whether to use out-of-bag samples to estimate the generalization
                error.
              kind_of_value: boolean
              name: oob_samples
              optional: 'False'
              default_value: 'False'
              path: oob_score
            - description: When set to True, reuse the solution of the previous call to
                fit and add more estimators to the ensemble, otherwise, just fit a whole
                new ensemble.
              kind_of_value: boolean
              name: reuse_previous
              optional: 'True'
              default_value: 'False'
              path: warm_start
            - description: The seed of the pseudo random number generator to use when shuffling
                the data. If int, random_state is the seed used by the random number generator;
                If RandomState instance, random_state is the random number generator; If
                None, the random number generator is the RandomState instance used by np.random.
              kind_of_value: '{integer, RandomState instance, None}'
              name: random_state
              optional: 'True'
              default_value: None
              path: random_state
            - description: Controls the verbosity of the tree building process.
              kind_of_value: integer
              name: verbose
              optional: 'True'
              default_value: '0'
              path: verbose
          optimisation_parameters:
            - description: The number of jobs to use for the computation. If -1 all CPUs
                are used.
              kind_of_value: integer
              name: jobs
              optional: 'True'
              default_value: '1'
              path: n_jobs
        name: bagging regressor
        other_names: []
        type: Regression
    :ensemble.forest.ExtraTreesClassifier:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: The number of trees in the forest.
              kind_of_value: integer
              name: num_estimators
              optional: 'True'
              default_value: '10'
              path: n_estimators
            - description: The function to measure the quality of a split.
              kind_of_value: '{''gini'', ''entropy''}'
              name: split_quality
              optional: 'True'
              default_value: '''gini'''
              path: criterion
            - description: The number of features to consider when looking for the best
                split.
              kind_of_value: '{integer, float, ''auto'', ''sqrt'', ''log2'', None}'
              name: max_features
              optional: 'True'
              default_value: '''auto'''
              path: max_features
            - description: The maximum depth of the tree.
              kind_of_value: '{integer, None}'
              name: max_depth_tree
              optional: 'True'
              default_value: None
              path: max_depth
            - description: The minimum number of samples required to split an internal node.
              kind_of_value: '{integer, float}'
              name: min_samples_split
              optional: 'True'
              default_value: '2'
              path: min_samples_split
            - description: The minimum number of samples required to be at a leaf node.
              kind_of_value: '{integer, float}'
              name: min_samples_leaf
              optional: 'True'
              default_value: '1'
              path: min_samples_leaf
            - description: The minimum weighted fraction of the sum total of weights (of
                all the input samples) required to be at a leaf node.
              kind_of_value: float
              name: min_weight_fraction_leaf
              optional: 'True'
              default_value: '0.0'
              path: min_weight_fraction_leaf
            - description: Grow a tree with max_leaf_nodes in best-first fashion.
              kind_of_value: '{integer, None}'
              name: max_leaf_nodes
              optional: 'True'
              default_value: None
              path: max_leaf_nodes
            - description: A node will be split if this split induces a decrease of the
                impurity greater than or equal to this value.
              kind_of_value: float
              name: min_impurity_decrease
              optional: 'True'
              default_value: '0.0'
              path: min_impurity_decrease
            - description: Whether bootstrap samples are used when building trees.
              kind_of_value: boolean
              name: bootstrap
              optional: 'True'
              default_value: 'False'
              path: bootstrap
            - description: Whether to use out-of-bag samples to estimate the generalization
                accuracy.
              kind_of_value: boolean
              name: oob_samples
              optional: 'False'
              default_value: 'False'
              path: oob_score
            - description: The seed of the pseudo random number generator to use when shuffling
                the data. If int, random_state is the seed used by the random number generator;
                If RandomState instance, random_state is the random number generator; If
                None, the random number generator is the RandomState instance used by np.random.
              kind_of_value: '{integer, RandomState instance, None}'
              name: random_state
              optional: 'True'
              default_value: None
              path: random_state
            - description: Controls the verbosity of the tree building process.
              kind_of_value: integer
              name: verbose
              optional: 'True'
              default_value: '0'
              path: verbose
            - description: When set to True, reuse the solution of the previous call to
                fit and add more estimators to the ensemble, otherwise, just fit a whole
                new forest.
              kind_of_value: boolean
              name: reuse_previous
              optional: 'True'
              default_value: 'False'
              path: warm_start
            - description: Weights associated with classes.
              kind_of_value: '{dict, ''balanced'', ''balanced_subsample'', None}'
              name: class_weight
              optional: 'True'
              default_value: None
              path: class_weight
          optimisation_parameters:
            - description: The number of jobs to use for the computation. If -1 all CPUs
                are used.
              kind_of_value: integer
              name: jobs
              optional: 'True'
              default_value: '1'
              path: n_jobs
        name: extra-trees classifier
        other_names: []
        type: Classification
    :ensemble.forest.ExtraTreesRegressor:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: The number of trees in the forest.
              kind_of_value: integer
              name: num_estimators
              optional: 'True'
              default_value: '10'
              path: n_estimators
            - description: The function to measure the quality of a split.
              kind_of_value: '{''mse'', ''mae''}'
              name: split_quality
              optional: 'True'
              default_value: '''mse'''
              path: criterion
            - description: The number of features to consider when looking for the best
                split.
              kind_of_value: '{integer, float, ''auto'', ''sqrt'', ''log2'', None}'
              name: max_features
              optional: 'True'
              default_value: '''auto'''
              path: max_features
            - description: The maximum depth of the tree.
              kind_of_value: '{integer, None}'
              name: max_depth_tree
              optional: 'True'
              default_value: None
              path: max_depth
            - description: The minimum number of samples required to split an internal node.
              kind_of_value: '{integer, float}'
              name: min_samples_split
              optional: 'True'
              default_value: '2'
              path: min_samples_split
            - description: The minimum number of samples required to be at a leaf node.
              kind_of_value: '{integer, float}'
              name: min_samples_leaf
              optional: 'True'
              default_value: '1'
              path: min_samples_leaf
            - description: The minimum weighted fraction of the sum total of weights (of
                all the input samples) required to be at a leaf node.
              kind_of_value: float
              name: min_weight_fraction_leaf
              optional: 'True'
              default_value: '0.0'
              path: min_weight_fraction_leaf
            - description: Grow a tree with max_leaf_nodes in best-first fashion.
              kind_of_value: '{integer, None}'
              name: max_leaf_nodes
              optional: 'True'
              default_value: None
              path: max_leaf_nodes
            - description: A node will be split if this split induces a decrease of the
                impurity greater than or equal to this value.
              kind_of_value: float
              name: min_impurity_decrease
              optional: 'True'
              default_value: '0.0'
              path: min_impurity_decrease
            - description: Whether bootstrap samples are used when building trees.
              kind_of_value: boolean
              name: bootstrap
              optional: 'True'
              default_value: 'False'
              path: bootstrap
            - description: Whether to use out-of-bag samples to estimate the R^2 on unseen
                data.
              kind_of_value: boolean
              name: oob_samples
              optional: 'False'
              default_value: 'False'
              path: oob_score
            - description: Controls the verbosity of the tree building process.
              kind_of_value: integer
              name: verbose
              optional: 'True'
              default_value: '0'
              path: verbose
            - description: When set to True, reuse the solution of the previous call to
                fit and add more estimators to the ensemble, otherwise, just fit a whole
                new forest.
              kind_of_value: boolean
              name: reuse_previous
              optional: 'True'
              default_value: 'False'
              path: warm_start
            - description: The seed of the pseudo random number generator to use when shuffling
                the data. If int, random_state is the seed used by the random number generator;
                If RandomState instance, random_state is the random number generator; If
                None, the random number generator is the RandomState instance used by np.random.
              kind_of_value: '{integer, RandomState instance, None}'
              name: random_state
              optional: 'True'
              default_value: None
              path: random_state
          optimisation_parameters:
            - description: The number of jobs to use for the computation. If -1 all CPUs
                are used.
              kind_of_value: integer
              name: jobs
              optional: 'True'
              default_value: '1'
              path: n_jobs
        name: extra-trees regressor
        other_names: []
        type: Regression
    :ensemble.forest.RandomForestClassifier:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: The number of trees in the forest.
              kind_of_value: integer
              name: num_estimators
              optional: 'True'
              default_value: '10'
              path: n_estimators
            - description: The function to measure the quality of a split.
              kind_of_value: '{''gini'', ''entropy''}'
              name: split_quality
              optional: 'True'
              default_value: '''gini'''
              path: criterion
            - description: The number of features to consider when looking for the best
                split.
              kind_of_value: '{integer, float, ''auto'', ''sqrt'', ''log2'', None}'
              name: max_features
              optional: 'True'
              default_value: '''auto'''
              path: max_features
            - description: The maximum depth of the tree.
              kind_of_value: '{integer, None}'
              name: max_depth_tree
              optional: 'True'
              default_value: None
              path: max_depth
            - description: The minimum number of samples required to split an internal node.
              kind_of_value: '{integer, float}'
              name: min_samples_split
              optional: 'True'
              default_value: '2'
              path: min_samples_split
            - description: The minimum number of samples required to be at a leaf node.
              kind_of_value: '{integer, float}'
              name: min_samples_leaf
              optional: 'True'
              default_value: '1'
              path: min_samples_leaf
            - description: The minimum weighted fraction of the sum total of weights (of
                all the input samples) required to be at a leaf node.
              kind_of_value: float
              name: min_weight_fraction_leaf
              optional: 'True'
              default_value: '0.0'
              path: min_weight_fraction_leaf
            - description: Grow a tree with max_leaf_nodes in best-first fashion.
              kind_of_value: '{integer, None}'
              name: max_leaf_nodes
              optional: 'True'
              default_value: None
              path: max_leaf_nodes
            - description: A node will be split if this split induces a decrease of the
                impurity greater than or equal to this value.
              kind_of_value: float
              name: min_impurity_decrease
              optional: 'True'
              default_value: '0.0'
              path: min_impurity_decrease
            - description: Whether bootstrap samples are used when building trees.
              kind_of_value: boolean
              name: bootstrap
              optional: 'True'
              default_value: 'True'
              path: bootstrap
            - description: Whether to use out-of-bag samples to estimate the generalization
                accuracy.
              kind_of_value: boolean
              name: oob_samples
              optional: 'False'
              default_value: 'False'
              path: oob_score
            - description: The seed of the pseudo random number generator to use when shuffling
                the data. If int, random_state is the seed used by the random number generator;
                If RandomState instance, random_state is the random number generator; If
                None, the random number generator is the RandomState instance used by np.random.
              kind_of_value: '{integer, RandomState instance, None}'
              name: random_state
              optional: 'True'
              default_value: None
              path: random_state
            - description: Controls the verbosity of the tree building process.
              kind_of_value: integer
              name: verbose
              optional: 'True'
              default_value: '0'
              path: verbose
            - description: When set to True, reuse the solution of the previous call to
                fit and add more estimators to the ensemble, otherwise, just fit a whole
                new forest.
              kind_of_value: boolean
              name: reuse_previous
              optional: 'True'
              default_value: 'False'
              path: warm_start
            - description: Weights associated with classes.
              kind_of_value: '{dict, ''balanced'', None}'
              name: class_weight
              optional: 'False'
              default_value: None
              path: class_weight
          optimisation_parameters:
            - description: The number of jobs to use for the computation. If -1 all CPUs
                are used.
              kind_of_value: integer
              name: jobs
              optional: 'True'
              default_value: '1'
              path: n_jobs
        name: random forest classifier
        other_names: []
        type: Classification
    :ensemble.forest.RandomForestRegressor:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: The number of trees in the forest.
              kind_of_value: integer
              name: num_estimators
              optional: 'True'
              default_value: '10'
              path: n_estimators
            - description: The function to measure the quality of a split.
              kind_of_value: '{''mse'', ''mae''}'
              name: split_quality
              optional: 'True'
              default_value: '''mse'''
              path: criterion
            - description: The number of features to consider when looking for the best
                split.
              kind_of_value: '{integer, float, ''auto'', ''sqrt'', ''log2'', None}'
              name: max_features
              optional: 'True'
              default_value: '''auto'''
              path: max_features
            - description: The maximum depth of the tree.
              kind_of_value: '{integer, None}'
              name: max_depth_tree
              optional: 'True'
              default_value: None
              path: max_depth
            - description: The minimum number of samples required to split an internal node.
              kind_of_value: '{integer, float}'
              name: min_samples_split
              optional: 'True'
              default_value: '2'
              path: min_samples_split
            - description: The minimum number of samples required to be at a leaf node.
              kind_of_value: '{integer, float}'
              name: min_samples_leaf
              optional: 'True'
              default_value: '1'
              path: min_samples_leaf
            - description: The minimum weighted fraction of the sum total of weights (of
                all the input samples) required to be at a leaf node.
              kind_of_value: float
              name: min_weight_fraction_leaf
              optional: 'True'
              default_value: '0.0'
              path: min_weight_fraction_leaf
            - description: Grow a tree with max_leaf_nodes in best-first fashion.
              kind_of_value: '{integer, None}'
              name: max_leaf_nodes
              optional: 'True'
              default_value: None
              path: max_leaf_nodes
            - description: A node will be split if this split induces a decrease of the
                impurity greater than or equal to this value.
              kind_of_value: float
              name: min_impurity_decrease
              optional: 'True'
              default_value: '0.0'
              path: min_impurity_decrease
            - description: Whether bootstrap samples are used when building trees.
              kind_of_value: boolean
              name: bootstrap
              optional: 'True'
              default_value: 'True'
              path: bootstrap
            - description: Whether to use out-of-bag samples to estimate the R^2 on unseen
                data.
              kind_of_value: boolean
              name: oob_samples
              optional: 'True'
              default_value: 'False'
              path: oob_score
            - description: The seed of the pseudo random number generator to use when shuffling
                the data. If int, random_state is the seed used by the random number generator;
                If RandomState instance, random_state is the random number generator; If
                None, the random number generator is the RandomState instance used by np.random.
              kind_of_value: '{integer, RandomState instance, None}'
              name: random_state
              optional: 'True'
              default_value: None
              path: random_state
            - description: Controls the verbosity of the tree building process.
              kind_of_value: integer
              name: verbose
              optional: 'True'
              default_value: '0'
              path: verbose
            - description: When set to True, reuse the solution of the previous call to
                fit and add more estimators to the ensemble, otherwise, just fit a whole
                new forest.
              kind_of_value: boolean
              name: reuse_previous
              optional: 'True'
              default_value: 'False'
              path: warm_start
          optimisation_parameters:
            - description: The number of jobs to use for the computation. If -1 all CPUs
                are used.
              kind_of_value: integer
              name: jobs
              optional: 'True'
              default_value: '1'
              path: n_jobs
        name: random forest regressor
        other_names: []
        type: Regression
    :ensemble.forest.RandomTreesEmbedding:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: The number of trees in the forest.
              kind_of_value: integer
              name: num_estimators
              optional: 'True'
              default_value: '10'
              path: n_estimators
            - description: The maximum depth of the tree.
              kind_of_value: '{integer, None}'
              name: max_depth_tree
              optional: 'True'
              default_value: None
              path: max_depth
            - description: The minimum number of samples required to split an internal node.
              kind_of_value: '{integer, float}'
              name: min_samples_split
              optional: 'True'
              default_value: '2'
              path: min_samples_split
            - description: The minimum number of samples required to be at a leaf node.
              kind_of_value: '{integer, float}'
              name: min_samples_leaf
              optional: 'True'
              default_value: '1'
              path: min_samples_leaf
            - description: The minimum weighted fraction of the sum total of weights (of
                all the input samples) required to be at a leaf node.
              kind_of_value: float
              name: min_weight_fraction_leaf
              optional: 'True'
              default_value: '0.0'
              path: min_weight_fraction_leaf
            - description: Grow a tree with max_leaf_nodes in best-first fashion.
              kind_of_value: '{integer, None}'
              name: max_leaf_nodes
              optional: 'True'
              default_value: None
              path: max_leaf_nodes
            - description: A node will be split if this split induces a decrease of the
                impurity greater than or equal to this value.
              kind_of_value: float
              name: min_impurity_decrease
              optional: 'True'
              default_value: '0.0'
              path: min_impurity_decrease
            - description: Whether bootstrap samples are used when building trees.
              kind_of_value: boolean
              name: bootstrap
              optional: 'True'
              default_value: 'True'
              path: bootstrap
            - description: Whether or not to return a sparse CSR matrix, as default behavior,
                or to return a dense array compatible with dense pipeline operators.
              kind_of_value: boolean
              name: sparse_output
              optional: 'True'
              default_value: 'True'
              path: sparse_output
            - description: Controls the verbosity of the tree building process.
              kind_of_value: integer
              name: verbose
              optional: 'True'
              default_value: '0'
              path: verbose
            - description: When set to True, reuse the solution of the previous call to
                fit and add more estimators to the ensemble, otherwise, just fit a whole
                new forest.
              kind_of_value: boolean
              name: reuse_previous
              optional: 'True'
              default_value: 'False'
              path: warm_start
            - description: The seed of the pseudo random number generator to use when shuffling
                the data. If int, random_state is the seed used by the random number generator;
                If RandomState instance, random_state is the random number generator; If
                None, the random number generator is the RandomState instance used by np.random.
              kind_of_value: '{integer, RandomState instance, None}'
              name: random_state
              optional: 'True'
              default_value: None
              path: random_state
          optimisation_parameters:
            - description: The number of jobs to use for the computation. If -1 all CPUs
                are used.
              kind_of_value: integer
              name: jobs
              optional: 'True'
              default_value: '1'
              path: n_jobs
        name: random trees ensemble
        other_names: []
        type: Classification
    :ensemble.gradient_boosting.GradientBoostingClassifier:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Loss function to be optimized.
              kind_of_value: '{''deviance'', ''exponential''}'
              name: loss
              optional: 'True'
              default_value: '''deviance'''
              path: loss
            - description: learning rate shrinks the contribution of each tree by learning_rate.
              kind_of_value: float
              name: learning_rate
              optional: 'True'
              default_value: '0.1'
              path: learning_rate
            - description: The number of boosting stages to perform. Gradient boosting is
                fairly robust to over-fitting so a large number usually results in better
                performance.
              kind_of_value: integer
              name: num_estimators
              optional: 'True'
              default_value: '100'
              path: n_estimators
            - description: The maximum depth of the individual regression estimators. The
                maximum depth limits the number of nodes in the tree. Tune this parameter
                for best performance; the best value depends on the interaction of the input
                variables.
              kind_of_value: integer
              name: max_depth_tree
              optional: 'True'
              default_value: '3'
              path: max_depth
            - description: The function to measure the quality of a split.
              kind_of_value: '{''mse'', ''friedman_mse'', ''mae''}'
              name: split_quality
              optional: 'True'
              default_value: '''friedman_mse'''
              path: criterion
            - description: The minimum number of samples required to split an internal node.
              kind_of_value: '{integer, float}'
              name: min_samples_split
              optional: 'True'
              default_value: '2'
              path: min_samples_split
            - description: The minimum number of samples required to be at a leaf node.
              kind_of_value: '{integer, float}'
              name: min_samples_leaf
              optional: 'True'
              default_value: '1'
              path: min_samples_leaf
            - description: The minimum weighted fraction of the sum total of weights (of
                all the input samples) required to be at a leaf node.
              kind_of_value: float
              name: min_weight_fraction_leaf
              optional: 'True'
              default_value: '0.0'
              path: min_weight_fraction_leaf
            - description: The fraction of samples to be used for fitting the individual
                base learners.
              kind_of_value: float
              name: frac_subsample
              optional: 'True'
              default_value: '1.0'
              path: subsample
            - description: The number of features to consider when looking for the best
                split.
              kind_of_value: '{integer, float, ''auto'', ''sqrt'', ''log2'', None}'
              name: max_features
              optional: 'True'
              default_value: None
              path: max_features
            - description: Grow a tree with max_leaf_nodes in best-first fashion.
              kind_of_value: integer, None
              name: max_leaf_nodes
              optional: 'True'
              default_value: None
              path: max_leaf_nodes
            - description: A node will be split if this split induces a decrease of the
                impurity greater than or equal to this value.
              kind_of_value: float
              name: min_impurity_decrease
              optional: 'True'
              default_value: '0.0'
              path: min_impurity_decrease
            - description: An estimator object that is used to compute the initial predictions.
              kind_of_value: BaseEstimator, None
              name: init_estimator
              optional: 'True'
              default_value: None
              path: init
            - description: Controls the verbosity of the tree building process.
              kind_of_value: integer
              name: verbose
              optional: 'True'
              default_value: '0'
              path: verbose
            - description: When set to True, reuse the solution of the previous call to
                fit and add more estimators to the ensemble, otherwise, just erase the previous
                solution.
              kind_of_value: boolean
              name: reuse_previous
              optional: 'False'
              default_value: 'False'
              path: warm_start
            - description: The seed of the pseudo random number generator to use when shuffling
                the data. If int, random_state is the seed used by the random number generator;
                If RandomState instance, random_state is the random number generator; If
                None, the random number generator is the RandomState instance used by np.random.
              kind_of_value: '{integer, RandomState instance, None}'
              name: random_state
              optional: 'True'
              default_value: None
              path: random_state
          optimisation_parameters:
            - description: Whether to presort the data to speed up the finding of best splits
                in fitting.
              kind_of_value: '{boolean, ''auto''}'
              name: presort
              optional: 'True'
              default_value: '''auto'''
              path: presort
        name: gradient boosting for classification
        other_names: []
        type: Classification
    :ensemble.gradient_boosting.GradientBoostingRegressor:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Loss function to be optimized.
              kind_of_value: '{''ls'', ''lad'', ''huber'', ''quantile''}'
              name: loss
              optional: 'True'
              default_value: '''ls'''
              path: loss
            - description: learning rate shrinks the contribution of each tree by learning_rate.
              kind_of_value: float
              name: learning_rate
              optional: 'True'
              default_value: '0.1'
              path: learning_rate
            - description: The number of boosting stages to perform. Gradient boosting is
                fairly robust to over-fitting so a large number usually results in better
                performance.
              kind_of_value: integer
              name: num_estimators
              optional: 'False'
              default_value: '100'
              path: n_estimators
            - description: The maximum depth of the individual regression estimators. The
                maximum depth limits the number of nodes in the tree. Tune this parameter
                for best performance; the best value depends on the interaction of the input
                variables.
              kind_of_value: integer
              name: max_depth_tree
              optional: 'True'
              default_value: '3'
              path: max_depth
            - description: The function to measure the quality of a split.
              kind_of_value: '{''mse'', ''friedman_mse'', ''mae''}'
              name: split_quality
              optional: 'True'
              default_value: '''friedman_mse'''
              path: criterion
            - description: The minimum number of samples required to split an internal node.
              kind_of_value: '{integer, float}'
              name: min_samples_split
              optional: 'True'
              default_value: '2'
              path: min_samples_split
            - description: The minimum number of samples required to be at a leaf node.
              kind_of_value: '{integer, float}'
              name: min_samples_leaf
              optional: 'True'
              default_value: '1'
              path: min_samples_leaf
            - description: The minimum weighted fraction of the sum total of weights (of
                all the input samples) required to be at a leaf node.
              kind_of_value: float
              name: min_weight_fraction_leaf
              optional: 'True'
              default_value: '0.0'
              path: min_weight_fraction_leaf
            - description: The fraction of samples to be used for fitting the individual
                base learners.
              kind_of_value: float
              name: frac_subsample
              optional: 'True'
              default_value: '1.0'
              path: subsample
            - description: The number of features to consider when looking for the best
                split.
              kind_of_value: '{integer, float, ''auto'', ''sqrt'', ''log2'', None}'
              name: max_features
              optional: 'True'
              default_value: None
              path: max_features
            - description: Grow a tree with max_leaf_nodes in best-first fashion.
              kind_of_value: integer, None
              name: max_leaf_nodes
              optional: 'True'
              default_value: None
              path: max_leaf_nodes
            - description: A node will be split if this split induces a decrease of the
                impurity greater than or equal to this value.
              kind_of_value: float
              name: min_impurity_decrease
              optional: 'True'
              default_value: '0.0'
              path: min_impurity_decrease
            - description: 'The alpha-quantile of the huber loss function and the quantile
              loss function. '
              kind_of_value: float
              name: alpha_quantile
              optional: 'False'
              default_value: '0.9'
              path: alpha
            - description: An estimator object that is used to compute the initial predictions.
              kind_of_value: BaseEstimator, None
              name: init_estimator
              optional: 'True'
              default_value: None
              path: init
            - description: Controls the verbosity of the tree building process.
              kind_of_value: integer
              name: verbose
              optional: 'True'
              default_value: '0'
              path: verbose
            - description: When set to True, reuse the solution of the previous call to
                fit and add more estimators to the ensemble, otherwise, just erase the previous
                solution.
              kind_of_value: boolean
              name: reuse_previous
              optional: 'False'
              default_value: 'False'
              path: warm_start
            - description: The seed of the pseudo random number generator to use when shuffling
                the data. If int, random_state is the seed used by the random number generator;
                If RandomState instance, random_state is the random number generator; If
                None, the random number generator is the RandomState instance used by np.random.
              kind_of_value: '{integer, RandomState instance, None}'
              name: random_state
              optional: 'True'
              default_value: None
              path: random_state
          optimisation_parameters:
            - description: Whether to presort the data to speed up the finding of best splits
                in fitting.
              kind_of_value: '{boolean, ''auto''}'
              name: presort
              optional: 'True'
              default_value: '''auto'''
              path: presort
        name: gradient boosting for regression
        other_names: []
        type: Regression
    :ensemble.iforest.IsolationForest:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: The number of base estimators in the ensemble.
              kind_of_value: integer
              name: num_estimators
              optional: 'True'
              default_value: '100'
              path: n_estimators
            - description: The number of samples to draw from X to train each base estimator.
              kind_of_value: '{integer, float, ''auto''}'
              name: max_samples
              optional: 'True'
              default_value: '''auto'''
              path: max_samples
            - description: The amount of contamination of the data set, i.e. the proportion
                of outliers in the data set.
              kind_of_value: float in (0., 0.5)
              name: contamination
              optional: 'True'
              default_value: '0.1'
              path: contamination
            - description: The number of features to draw from X to train each base estimator.
              kind_of_value: '{integer, float}'
              name: max_features
              optional: 'True'
              default_value: '1.0'
              path: max_features
            - description: If True, individual trees are fit on random subsets of the training
                data sampled with replacement. If False, sampling without replacement is
                performed.
              kind_of_value: boolean
              name: bootstrap
              optional: 'True'
              default_value: 'False'
              path: bootstrap
            - description: The seed of the pseudo random number generator to use when shuffling
                the data. If int, random_state is the seed used by the random number generator;
                If RandomState instance, random_state is the random number generator; If
                None, the random number generator is the RandomState instance used by np.random.
              kind_of_value: '{integer, RandomState instance, None}'
              name: random_state
              optional: 'True'
              default_value: None
              path: random_state
            - description: Controls the verbosity of the tree building process.
              kind_of_value: integer
              name: verbose
              optional: 'True'
              default_value: '0'
              path: verbose
          optimisation_parameters:
            - description: The number of jobs to use for the computation. If -1 all CPUs
                are used.
              kind_of_value: integer
              name: jobs
              optional: 'True'
              default_value: '1'
              path: n_jobs
        name: isolation forest
        other_names: []
        type: Outlier Detection
    :ensemble.weight_boosting.AdaBoostClassifier:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: base_estimator.
              kind_of_value: '{object, None}'
              name: base_estimator
              optional: 'True'
              default_value: None
              path: base_estimator
            - description: The maximum number of estimators at which boosting is terminated.
                In case of perfect fit, the learning procedure is stopped early.
              kind_of_value: integer
              name: num_estimators
              optional: 'True'
              default_value: '50'
              path: n_estimators
            - description: Learning rate shrinks the contribution of each regressor by learning_rate.
              kind_of_value: float
              name: learning_rate
              optional: 'True'
              default_value: '1.0'
              path: learning_rate
            - description: "If \u2018SAMME.R\u2019 then use the SAMME.R real boosting algorithm.\
              \ base_estimator must support calculation of class probabilities. If \u2018\
              SAMME\u2019 then use the SAMME discrete boosting algorithm. The SAMME.R\
              \ algorithm typically converges faster than SAMME, achieving a lower test\
              \ error with fewer boosting iterations."
              kind_of_value: ' {''SAMME'', ''SAMME.R''}'
              name: boosting_algorithm
              optional: 'True'
              default_value: '''SAMME.R'''
              path: algorithm
            - description: The seed of the pseudo random number generator to use when shuffling
                the data. If int, random_state is the seed used by the random number generator;
                If RandomState instance, random_state is the random number generator; If
                None, the random number generator is the RandomState instance used by np.random.
              kind_of_value: '{integer, RandomState instance, None}'
              name: random_state
              optional: 'True'
              default_value: None
              path: random_state
          optimisation_parameters: []
        name: AdaBoost classifier
        other_names: []
        type: Classification
    :ensemble.weight_boosting.AdaBoostRegressor:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: base_estimator.
              kind_of_value: '{object, None}'
              name: base_estimator
              optional: 'True'
              default_value: None
              path: base_estimator
            - description: The maximum number of estimators at which boosting is terminated.
                In case of perfect fit, the learning procedure is stopped early.
              kind_of_value: integer
              name: num_estimators
              optional: 'True'
              default_value: '50'
              path: n_estimators
            - description: Learning rate shrinks the contribution of each regressor by learning_rate.
              kind_of_value: float
              name: learning_rate
              optional: 'True'
              default_value: '1.0'
              path: learning_rate
            - description: Loss function to be optimized.
              kind_of_value: '{''linear'', ''square'', ''exponential''}'
              name: loss
              optional: 'True'
              default_value: '''linear'''
              path: loss
            - description: The seed of the pseudo random number generator to use when shuffling
                the data. If int, random_state is the seed used by the random number generator;
                If RandomState instance, random_state is the random number generator; If
                None, the random number generator is the RandomState instance used by np.random.
              kind_of_value: '{integer, RandomState instance, None}'
              name: random_state
              optional: 'True'
              default_value: None
              path: random_state
          optimisation_parameters: []
        name: AdaBoost regressor
        other_names: []
        type: Regression
    :feature_selection.RFE:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: A supervised learning estimator with a fit method that provides
                information about feature importance either through a coef_ attribute or
                through a feature_importances_ attribute.
              kind_of_value: estimator object
              name: estimator
              optional: 'False'
              default_value: ''
              path: estimator
            - description: The number of features to select. If None, half of the features
                are selected.
              kind_of_value: '{integer, None}'
              name: n_features_to_select
              optional: 'False'
              default_value: None
              path: n_features_to_select
            - description: If greater than or equal to 1, then step corresponds to the (integer)
                number of features to remove at each iteration. If within (0.0, 1.0), then
                step corresponds to the percentage (rounded down) of features to remove
                at each iteration.
              kind_of_value: '{integer, float}'
              name: step
              optional: 'True'
              default_value: '1'
              path: step
            - description: Controls verbosity of output.
              kind_of_value: integer
              name: verbose
              optional: 'False'
              default_value: '0'
              path: verbose
          optimisation_parameters: []
        name: recursive feature elimination
        other_names:
          - RFE
        type: Feature Selection
    :feature_selection.RFECV:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: The base estimator from which the transformer is built.
              kind_of_value: estimator object
              name: estimator
              optional: 'False'
              default_value: ''
              path: estimator
            - description: If greater than or equal to 1, then step corresponds to the (integer)
                number of features to remove at each iteration. If within (0.0, 1.0), then
                step corresponds to the percentage (rounded down) of features to remove
                at each iteration.
              kind_of_value: '{integer, float}'
              name: step
              optional: 'True'
              default_value: '1'
              path: step
            - description: Determines the cross-validation splitting strategy.
              kind_of_value: '{integer, object (cross-validation generator),  iterable yielding
              train and test splits, None'
              name: cross_validation
              optional: 'True'
              default_value: None
              path: cv
            - description: Scoring parameter that is applied to the evaluated estimator.
              kind_of_value: "{callable, None, 'accuracy', 'average_precision', 'f1', 'f1_micro',\
              \ 'f1_macro', 'f1_weighted', 'f1_samples', 'neg_log_loss', 'precision',\
              \ 'recall', 'roc_auc', 'adjusted_mutual_info_score', 'adjusted_rand_score',\
              \ 'completeness_score', 'fowlkes_mallows_score', 'homogeneity_score', 'mutual_info_score',\
              \ 'normalized_mutual_info_score', 'v_measure_score', 'explained_variance',\
              \ 'neg_mean_absolute_error', '\u2018neg_mean_squared_error', 'neg_mean_squared_log_error',\
              \ 'neg_median_absolute_error', 'r2'}"
              name: scoring
              optional: 'True'
              default_value: None
              path: scoring
            - description: Controls verbosity of output.
              kind_of_value: integer
              name: verbose
              optional: 'False'
              default_value: '0'
              path: verbose
          optimisation_parameters:
            - description: The number of jobs to use for the computation. If -1 all CPUs
                are used.
              kind_of_value: integer
              name: jobs
              optional: 'True'
              default_value: '1'
              path: n_jobs
        name: recursive feature elimination with cross-validation
        other_names:
          - RFECV
        type: Feature Selection
    :feature_selection.SelectFromModel:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: The base estimator from which the transformer is built.
              kind_of_value: estimator object
              name: estimator
              optional: 'False'
              default_value: ''
              path: estimator
            - description: The threshold value to use for feature selection.
              kind_of_value: '{''median'', ''mean'', float, None}'
              name: threshold
              optional: 'True'
              default_value: None
              path: threshold
            - description: Whether a prefit model is expected to be passed into the constructor
                directly or not.
              kind_of_value: boolean
              name: prefit_model
              optional: 'False'
              default_value: 'False'
              path: prefit
            - description: Order of the norm used to filter the vectors of coefficients
                below threshold in the case where the coef_ attribute of the estimator is
                of dimension 2.
              kind_of_value: non-zero integer
              name: norm_order
              optional: 'False'
              default_value: '1'
              path: norm_order
          optimisation_parameters: []
        name: select from model
        other_names: []
        type: Feature Selection
    :feature_selection.univariate_selection.GenericUnivariateSelect:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: 'Function taking two arrays X and y, and returning a pair of
              arrays (scores, pvalues). '
              kind_of_value: callable
              name: score_function
              optional: 'False'
              default_value: <function f_classif>
              path: score_func
            - description: Feature selection mode.
              kind_of_value: ' {''percentile'', ''k_best'', ''fpr'', ''fdr'', ''fwe''}'
              name: mode
              optional: 'False'
              default_value: '''percentile'''
              path: mode
            - description: Parameter of the corresponding mode.
              kind_of_value: '{float, integer}'
              name: mode_parameter
              optional: 'False'
              default_value: 0,00001
              path: param
          optimisation_parameters: []
        name: univariate feature selector
        other_names: []
        type: Feature Selection
    :feature_selection.univariate_selection.SelectFdr:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: 'Function taking two arrays X and y, and returning a pair of
              arrays (scores, pvalues). '
              kind_of_value: callable
              name: score_function
              optional: 'False'
              default_value: <function f_classif>
              path: score_func
            - description: The highest uncorrected p-value for features to keep.
              kind_of_value: float
              name: max_uncorrected_p-value
              optional: 'True'
              default_value: '0.05'
              path: alpha
          optimisation_parameters: []
        name: select estimated false discovery rate
        other_names:
          - select Fdr
        type: Feature Selection
    :feature_selection.univariate_selection.SelectFpr:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: 'Function taking two arrays X and y, and returning a pair of
              arrays (scores, pvalues). '
              kind_of_value: callable
              name: score_function
              optional: 'False'
              default_value: <function f_classif>
              path: score_func
            - description: The highest uncorrected p-value for features to keep.
              kind_of_value: float
              name: max_uncorrected_p-value
              optional: 'True'
              default_value: '0.05'
              path: alpha
          optimisation_parameters: []
        name: select below false positive rate
        other_names:
          - select Fpr
        type: Feature Selection
    :feature_selection.univariate_selection.SelectFwe:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: 'Function taking two arrays X and y, and returning a pair of
              arrays (scores, pvalues). '
              kind_of_value: callable
              name: score_function
              optional: 'False'
              default_value: <function f_classif>
              path: score_func
            - description: The highest uncorrected p-value for features to keep.
              kind_of_value: float
              name: max_uncorrected_p-value
              optional: 'True'
              default_value: '0.05'
              path: alpha
          optimisation_parameters: []
        name: select familiy-wise error rate
        other_names:
          - select Fwe
        type: Feature Selection
    :feature_selection.univariate_selection.SelectKBest:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: 'Function taking two arrays X and y, and returning a pair of
              arrays (scores, pvalues). '
              kind_of_value: callable
              name: score_function
              optional: 'False'
              default_value: <function f_classif>
              path: score_func
            - description: Number of top features to select.
              kind_of_value: '{integer, ''all''}'
              name: k
              optional: 'True'
              default_value: '10'
              path: k
          optimisation_parameters: []
        name: select k best
        other_names: []
        type: Feature Selection
    :feature_selection.univariate_selection.SelectPercentile:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: 'Function taking two arrays X and y, and returning a pair of
              arrays (scores, pvalues). '
              kind_of_value: callable
              name: score_function
              optional: 'False'
              default_value: <function f_classif>
              path: score_func
            - description: Percent of features to keep.
              kind_of_value: integer
              name: percentile
              optional: 'True'
              default_value: '10'
              path: percentile
          optimisation_parameters: []
        name: select percentile
        other_names: []
        type: Feature Selection
    :feature_selection.variance_threshold.VarianceThreshold:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Features with a training-set variance lower than this threshold
                will be removed.
              kind_of_value: float
              name: threshold
              optional: 'True'
              default_value: '0.0'
              path: threshold
          optimisation_parameters: []
        name: variance threshold
        other_names: []
        type: Feature Selection
    :gaussian_process.gpc.GaussianProcessClassifier:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: The kernel specifying the covariance function of the GP.
              kind_of_value: kernel object
              name: kernel
              optional: 'False'
              default_value: None
              path: kernel
            - description: Optimizer to optimize the kernel parameters.
              kind_of_value: '{''fmin_l_bfgs_b'', externally defined optimizer passed as
              a callable }'
              name: kernel_optimizer
              optional: 'True'
              default_value: '''fmin_l_bfgs_b'''
              path: optimizer
            - description: The number of restarts of the optimizer for finding the kernel's
                parameters which maximize the log-marginal likelihood. The first run of
                the optimizer is performed from the kernel's initial parameters, the remaining
                ones (if any) from thetas sampled log-uniform randomly from the space of
                allowed theta-values.
              kind_of_value: integer
              name: n_restarts_optimizer
              optional: 'True'
              default_value: '0'
              path: n_restarts_optimizer
            - description: When set to True, the solution of the last Newton iteration on
                the Laplace approximation of the posterior mode is used as initialization
                for the next call, otherwise, just erase the previous solution.
              kind_of_value: boolean
              name: reuse_previous
              optional: 'True'
              default_value: 'False'
              path: warm_start
            - description: If True, a persistent copy of the training data is stored in
                the object. Otherwise, just a reference to the training data is stored,
                which might cause predictions to change if the data is modified externally.
              kind_of_value: boolean
              name: copy_X_train
              optional: 'True'
              default_value: 'True'
              path: copy_X_train
            - description: The seed of the pseudo random number generator to use when shuffling
                the data. If int, random_state is the seed used by the random number generator;
                If RandomState instance, random_state is the random number generator; If
                None, the random number generator is the RandomState instance used by np.random.
              kind_of_value: '{integer, RandomState instance, None}'
              name: random_state
              optional: 'True'
              default_value: None
              path: random_state
            - description: Specifies how multi-class classification problems are handled.
              kind_of_value: '{''one_vs_rest'', ''one_vs_one''}'
              name: multi_class
              optional: 'False'
              default_value: '''one_vs_rest'''
              path: multi_class
          optimisation_parameters:
            - description: "The maximum number of iterations in Newton\u2019s method for\
              \ approximating the posterior during predict. Smaller values will reduce\
              \ computation time at the cost of worse results."
              kind_of_value: integer
              name: max_iter_predict
              optional: 'True'
              default_value: '100'
              path: max_iter_predict
            - description: The number of jobs to use for the computation. If -1 all CPUs
                are used.
              kind_of_value: integer
              name: jobs
              optional: 'True'
              default_value: '1'
              path: n_jobs
        name: gaussian process classification
        other_names:
          - GPC
        type: Classification
    :gaussian_process.gpr.GaussianProcessRegressor:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: The kernel specifying the covariance function of the GP.
              kind_of_value: kernel object
              name: kernel
              optional: 'False'
              default_value: None
              path: kernel
            - description: Value added to the diagonal of the kernel matrix during fitting.
                Larger values correspond to increased noise level in the observations. This
                can also prevent a potential numerical issue during fitting, by ensuring
                that the calculated values form a positive definite matrix. If an array
                is passed, it must have the same number of entries as the data used for
                fitting and is used as datapoint-dependent noise level. Note that this is
                equivalent to adding a WhiteKernel with c=alpha. Allowing to specify the
                noise level directly as a parameter is mainly for convenience and for consistency
                with Ridge.
              kind_of_value: '{float, array}'
              name: alpha
              optional: 'True'
              default_value: '0.0000000001'
              path: alpha
            - description: Optimizer to optimize the kernel parameters.
              kind_of_value: '{''fmin_l_bfgs_b'', externally defined optimizer passed as
              a callable }'
              name: kernel_optimizer
              optional: 'True'
              default_value: '''fmin_l_bfgs_b'''
              path: optimizer
            - description: The number of restarts of the optimizer for finding the kernel's
                parameters which maximize the log-marginal likelihood. The first run of
                the optimizer is performed from the kernel's initial parameters, the remaining
                ones (if any) from thetas sampled log-uniform randomly from the space of
                allowed theta-values.
              kind_of_value: integer
              name: n_restarts_optimizer
              optional: 'True'
              default_value: '0'
              path: n_restarts_optimizer
            - description: Whether the target values y are normalized, i.e., the mean of
                the observed target values become zero. This parameter should be set to
                True if the target values' mean is expected to differ considerable from
                zero. When enabled, the normalization effectively modifies the GP's prior
                based on the data, which contradicts the likelihood principle.
              kind_of_value: boolean
              name: normalize_y
              optional: 'True'
              default_value: 'False'
              path: normalize_y
            - description: If True, a persistent copy of the training data is stored in
                the object. Otherwise, just a reference to the training data is stored,
                which might cause predictions to change if the data is modified externally.
              kind_of_value: boolean
              name: copy_X_train
              optional: 'True'
              default_value: 'True'
              path: copy_X_train
            - description: The seed of the pseudo random number generator to use when shuffling
                the data. If int, random_state is the seed used by the random number generator;
                If RandomState instance, random_state is the random number generator; If
                None, the random number generator is the RandomState instance used by np.random.
              kind_of_value: '{integer, RandomState instance, None}'
              name: random_state
              optional: 'True'
              default_value: None
              path: random_state
          optimisation_parameters: []
        name: gaussian process regression
        other_names:
          - GPR
        type: Regression
    :isotonic.IsotonicRegression:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: If not None, set the lowest value of the fit to min_fit
              kind_of_value: '{float, None}'
              name: min_fit
              optional: 'True'
              default_value: None
              path: y_min
            - description: If not None, set the highest value of the fit to max_fit
              kind_of_value: '{float, None}'
              name: max_fit
              optional: 'True'
              default_value: None
              path: y_max
            - description: "If boolean, whether or not to fit the isotonic regression with\
              \ outputs increasing or decreasing. The string value \u201Cauto\u201D determines\
              \ whether outputs should increase or decrease based on the Spearman correlation\
              \ estimate\u2019s sign."
              kind_of_value: '{''auto'', boolean}'
              name: increasing
              optional: 'True'
              default_value: 'True'
              path: increasing
            - description: Defines how input-values outside the training domain should be
                handled. 'nan' set predictions to NaN, 'clip' set predicted values to the
                value corresponding to the nearest train interval endpoint. 'raise' allows
                to throw a ValueError.
              kind_of_value: '{''nan, ''clip'', ''raise''}'
              name: out_of_bounds
              optional: 'True'
              default_value: '''nan'''
              path: out_of_bounds
          optimisation_parameters: []
        name: isotonic regression
        other_names: []
        type: Regression
    :kernel_ridge.KernelRidge:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Regularization strength; must be a positive float. Regularization
                improves the conditioning of the problem and reduces the variance of the
                estimates. Larger values specify stronger regularization. Lambda corresponds
                to C^-1 in other linear models such as LogisticRegression or LinearSVC.
              kind_of_value: float, array-like in the shape of the targets
              name: regularisation_strength
              optional: 'False'
              default_value: '1.0'
              path: alpha
            - description: Kernel mapping used internally.
              kind_of_value: '{''linear'', ''poly'', ''rbf'', ''sigmoid'', ''cosine'', ''gaussian'',
              ''tophat'', ''epanechnikov'', ''exponential'', ''precomputed'', callable
              which accepts two arguments and the keyword arguments passed to this object
              as kernel_params, and should return a floating point number.}'
              name: kernel
              optional: 'False'
              default_value: '''linear'''
              path: kernel
            - description: Gamma parameter for the RBF, laplacian, polynomial, exponential
                chi2 and sigmoid kernels. Interpretation depends on kernels.
              kind_of_value: float
              name: gamma
              optional: 'False'
              default_value: None
              path: gamma
            - description: Degree of the polynomial kernel.
              kind_of_value: float
              name: kernel_degree
              optional: 'False'
              default_value: '3.0'
              path: degree
            - description: Zero coefficient for polynomial and sigmoid kernels.
              kind_of_value: float
              name: zero_coefficient
              optional: 'False'
              default_value: '1.0'
              path: coef0
            - description: Additional parameters (keyword arguments) for kernel function
                passed as callable object.
              kind_of_value: mapping of string to any
              name: kernel_parameters
              optional: 'True'
              default_value: None
              path: kernel_params
          optimisation_parameters: []
        name: kernel ridge regression
        other_names:
          - KRR
        type: Regression
    :linear_model.base.LinearRegression:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Whether to calculate the intercept for this model.
              kind_of_value: boolean
              measurement_scale: nominal
              name: fit_intercept
              optional: 'True'
              range: '{True, False}'
              default_value: 'True'
              path: fit_intercept
            - description: Normalizes the regressors before regression by subtracting the
                mean and dividing by the l2-norm.
              kind_of_value: boolean
              measurement_scale: nominal
              name: normalize
              optional: 'True'
              range: '{True, False}'
              default_value: 'False'
              path: normalize
            - description: If True, X will be copied; else, it may be overwritten.
              kind_of_value: boolean
              measurement_scale: nominal
              name: copy_X
              optional: 'True'
              range: '{True, False}'
              default_value: 'True'
              path: copy_X
          optimisation_parameters:
            - description: The number of jobs to use for the computation. If -1 all CPUs
                are used.
              kind_of_value: integer
              measurement_scale: ratio
              name: jobs
              optional: 'True'
              range: Z >= -1
              default_value: '1'
              path: n_jobs
        name: linear regression
        other_names: []
        type: Regression
        wikidata_id: Q10861030
    :linear_model.bayes.ARDRegression:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Precision of the solution. (The tolerance for the optimisation.)
              kind_of_value: float
              name: tolerance
              optional: 'True'
              default_value: '0.001'
              path: tol
            - description: Shape parameter for the Gamma distribution prior over the alpha
                parameter.
              kind_of_value: float
              name: alpha_1
              optional: 'True'
              default_value: 1e-06
              path: alpha_1
            - description: Inverse scale parameter (rate parameter) for the Gamma distribution
                prior over the alpha parameter.
              kind_of_value: float
              name: alpha_2
              optional: 'True'
              default_value: 1e-06
              path: alpha_2
            - description: Shape parameter for the Gamma distribution prior over the lambda
                parameter.
              kind_of_value: float
              name: lambda_1
              optional: 'True'
              default_value: 1e-06
              path: lambda_1
            - description: Inverse scale parameter (rate parameter) for the Gamma distribution
                prior over the lambda parameter.
              kind_of_value: float
              name: lambda_2
              optional: 'True'
              default_value: 1e-06
              path: lambda_2
            - description: Threshold for removing (pruning) weights with high precision
                from the computation.
              kind_of_value: float
              name: threshold_lambda
              optional: 'True'
              default_value: '10000.0'
              path: threshold_lambda
            - description: Whether to calculate the intercept for this model.
              kind_of_value: boolean
              name: fit_intercept
              optional: 'True'
              default_value: 'True'
              path: fit_intercept
            - description: Normalizes the regressors before regression by subtracting the
                mean and dividing by the l2-norm.
              kind_of_value: boolean
              name: normalize
              optional: 'True'
              default_value: 'False'
              path: normalize
            - description: If True, X will be copied; else, it may be overwritten.
              kind_of_value: boolean
              name: copy_X
              optional: 'True'
              default_value: 'True'
              path: copy_X
            - description: Verbose mode when fitting the model.
              kind_of_value: boolean
              name: verbose
              optional: 'True'
              default_value: 'False'
              path: verbose
          optimisation_parameters:
            - description: Maximum number of iterations.
              kind_of_value: integer
              name: max_iterations
              optional: 'True'
              default_value: '300'
              path: n_iter
            - description: If True, compute the objective function at each step of the model.
              kind_of_value: boolean
              name: compute_score
              optional: 'True'
              default_value: 'False'
              path: compute_score
        name: automatic relevance determination regression
        other_names:
          - ARD regrssion
        type: Regression
    :linear_model.bayes.BayesianRidge:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Precision of the solution. (The tolerance for the optimisation.)
              kind_of_value: float
              name: tolerance
              optional: 'True'
              default_value: '0.001'
              path: tol
            - description: Shape parameter for the Gamma distribution prior over the alpha
                parameter.
              kind_of_value: float
              name: alpha_1
              optional: 'True'
              default_value: '0.000006'
              path: alpha_1
            - description: Inverse scale parameter (rate parameter) for the Gamma distribution
                prior over the alpha parameter.
              kind_of_value: float
              name: alpha_2
              optional: 'True'
              default_value: '0.000006'
              path: alpha_2
            - description: Shape parameter for the Gamma distribution prior over the lambda
                parameter.
              kind_of_value: float
              name: lambda_1
              optional: 'True'
              default_value: '0.000006'
              path: lambda_1
            - description: Inverse scale parameter (rate parameter) for the Gamma distribution
                prior over the lambda parameter.
              kind_of_value: float
              name: lambda_2
              optional: 'True'
              default_value: '0.000006'
              path: lambda_2
            - description: Whether to calculate the intercept for this model.
              kind_of_value: boolean
              name: fit_intercept
              optional: 'True'
              default_value: 'True'
              path: fit_intercept
            - description: Normalizes the regressors before regression by subtracting the
                mean and dividing by the l2-norm.
              kind_of_value: boolean
              name: normalize
              optional: 'True'
              default_value: 'False'
              path: normalize
            - description: If True, X will be copied; else, it may be overwritten.
              kind_of_value: boolean
              name: copy_X
              optional: 'True'
              default_value: 'True'
              path: copy_X
            - description: Verbose mode when fitting the model.
              kind_of_value: boolean
              name: verbose
              optional: 'True'
              default_value: 'False'
              path: verbose
          optimisation_parameters:
            - description: Maximum number of iterations.
              kind_of_value: integer
              name: max_iterations
              optional: 'True'
              default_value: '300'
              path: n_iter
            - description: If True, compute the objective function at each step of the model.
              kind_of_value: boolean
              name: compute_score
              optional: 'True'
              default_value: 'False'
              path: compute_score
        name: bayesian ridge regression
        other_names: []
        type: Regression
    :linear_model.coordinate_descent.ElasticNet:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Constant that multiplies the L1/L2 term.
              kind_of_value: float
              name: l1_l2_multiplier
              optional: 'True'
              default_value: '1.0'
              path: alpha
            - description: The ElasticNet mixing parameter, with 0 <= l1_ratio <= 1. For
                l1_ratio = 0 the penalty is an L2 penalty. For l1_ratio = 1 it is an L1
                penalty. For 0 < l1_ratio < 1, the penalty is a combination of L1 and L2.
              kind_of_value: float
              name: l1_ratio
              optional: 'False'
              default_value: '0.5'
              path: l1_ratio
            - description: Whether to calculate the intercept for this model.
              kind_of_value: boolean
              name: fit_intercept
              optional: 'False'
              default_value: 'True'
              path: fit_intercept
            - description: Normalizes the regressors before regression by subtracting the
                mean and dividing by the I2-norm.
              kind_of_value: boolean
              name: normalize
              optional: 'True'
              default_value: 'False'
              path: normalize
            - description: If True, X will be copied; else, it may be overwritten.
              kind_of_value: boolean
              name: copy_X
              optional: 'True'
              default_value: 'True'
              path: copy_X
            - description: 'The tolerance for the optimization: if the updates are smaller
              than tol, the optimization code checks the dual gap for optimality and continues
              until it is smaller than tol.'
              kind_of_value: float
              name: tolerance
              optional: 'True'
              default_value: '0.0001'
              path: tol
            - description: When set to True, reuse the solution of the previous call to
                fit as initialization, otherwise, just erase the previous solution.
              kind_of_value: boolean
              name: reuse_previous
              optional: 'True'
              default_value: 'False'
              path: warm_start
            - description: When set to True, forces the coefficients to be positive.
              kind_of_value: boolean
              name: positive_coef
              optional: 'True'
              default_value: 'False'
              path: positive
            - description: The seed of the pseudo random number generator to use when shuffling
                the data. If int, random_state is the seed used by the random number generator;
                If RandomState instance, random_state is the random number generator; If
                None, the random number generator is the RandomState instance used by np.random.
              kind_of_value: '{integer, RandomState instance, None}'
              name: random_state
              optional: 'True'
              default_value: None
              path: random_state
            - description: If set to 'random', a random coefficient is updated every iteration
                rather than looping over features sequentially by default.
              kind_of_value: '{''random'', ''cyclic''}'
              name: selection
              optional: 'False'
              default_value: '''cyclic'''
              path: selection
          optimisation_parameters:
            - description: Whether to use a precomputed Gram matrix to speed up calculations.
                The Gram matrix can also be passed as argument.
              kind_of_value: '{boolean, array-like, ''auto''}'
              name: precompute
              optional: 'False'
              default_value: 'False'
              path: precompute
            - description: Maximum number of iterations.
              kind_of_value: integer
              name: max_iterations
              optional: 'True'
              default_value: None
              path: max_iter
        name: elastic net
        other_names: []
        type: Regression
    :linear_model.coordinate_descent.Lasso:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Constant that multiplies the L1 term.
              kind_of_value: float
              name: l1_multiplier
              optional: 'True'
              default_value: '1.0'
              path: alpha
            - description: Whether to calculate the intercept for this model.
              kind_of_value: boolean
              name: fit_intercept
              optional: 'False'
              default_value: 'True'
              path: fit_intercept
            - description: Normalizes the regressors before regression by subtracting the
                mean and dividing by the I2-norm.
              kind_of_value: boolean
              name: normalize
              optional: 'True'
              default_value: 'False'
              path: normalize
            - description: If True, X will be copied; else, it may be overwritten.
              kind_of_value: boolean
              name: copy_X
              optional: 'True'
              default_value: 'True'
              path: copy_X
            - description: 'The tolerance for the optimization: if the updates are smaller
              than tolerance, the optimization code checks the dual gap for optimality
              and continues until it is smaller than tol.'
              kind_of_value: float
              name: tolerance
              optional: 'True'
              default_value: '0.0001'
              path: tol
            - description: When set to True, reuse the solution of the previous call to
                fit as initialization, otherwise, just erase the previous solution.
              kind_of_value: boolean
              name: reuse_previous
              optional: 'True'
              default_value: 'False'
              path: warm_start
            - description: When set to True, forces the coefficients to be positive.
              kind_of_value: boolean
              name: positive_coef
              optional: 'True'
              default_value: 'False'
              path: positive
            - description: The seed of the pseudo random number generator to use when shuffling
                the data. If int, random_state is the seed used by the random number generator;
                If RandomState instance, random_state is the random number generator; If
                None, the random number generator is the RandomState instance used by np.random.
              kind_of_value: '{integer, RandomState instance, None}'
              name: random_state
              optional: 'True'
              default_value: None
              path: random_state
            - description: If set to 'random', a random coefficient is updated every iteration
                rather than looping over features sequentially by default.
              kind_of_value: '{''cyclic'', ''random''}'
              name: selection
              optional: 'False'
              default_value: '''cyclic'''
              path: selection
          optimisation_parameters:
            - description: Maximum number of iterations.
              kind_of_value: integer
              name: max_iterations
              optional: 'True'
              default_value: None
              path: max_iter
            - description: Whether to use a precomputed Gram matrix to speed up calculations.
                The Gram matrix can also be passed as argument.
              kind_of_value: '{boolean, array-like, ''auto''}'
              name: precompute
              optional: 'False'
              default_value: 'False'
              path: precompute
        name: lasso
        other_names: []
        type: Regression
    :linear_model.coordinate_descent.MultiTaskElasticNet:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Constant that multiplies the L1/L2 term.
              kind_of_value: float
              name: l1_l2_multiplier
              optional: 'True'
              default_value: '1.0'
              path: alpha
            - description: The ElasticNet mixing parameter, with 0 <= l1_ratio <= 1. For
                l1_ratio = 0 the penalty is an L2 penalty. For l1_ratio = 1 it is an L1
                penalty. For 0 < l1_ratio < 1, the penalty is a combination of L1 and L2.
              kind_of_value: float
              name: l1_ratio
              optional: 'False'
              default_value: '0.5'
              path: l1_ratio
            - description: Whether to calculate the intercept for this model.
              kind_of_value: boolean
              name: fit_intercept
              optional: 'False'
              default_value: 'True'
              path: fit_intercept
            - description: Normalizes the regressors before regression by subtracting the
                mean and dividing by the I2-norm.
              kind_of_value: boolean
              name: normalize
              optional: 'True'
              default_value: 'False'
              path: normalize
            - description: If True, X will be copied; else, it may be overwritten.
              kind_of_value: boolean
              name: copy_X
              optional: 'True'
              default_value: 'True'
              path: copy_X
            - description: 'The tolerance for the optimization: if the updates are smaller
              than tol, the optimization code checks the dual gap for optimality and continues
              until it is smaller than tol.'
              kind_of_value: float
              name: tolerance
              optional: 'True'
              default_value: '0.0001'
              path: tol
            - description: When set to True, reuse the solution of the previous call to
                fit as initialization, otherwise, just erase the previous solution.
              kind_of_value: boolean
              name: reuse_previous
              optional: 'True'
              default_value: 'False'
              path: warm_start
            - description: The seed of the pseudo random number generator to use when shuffling
                the data. If int, random_state is the seed used by the random number generator;
                If RandomState instance, random_state is the random number generator; If
                None, the random number generator is the RandomState instance used by np.random.
              kind_of_value: '{integer, RandomState instance, None}'
              name: random_state
              optional: 'True'
              default_value: None
              path: random_state
            - description: If set to 'random', a random coefficient is updated every iteration
                rather than looping over features sequentially by default.
              kind_of_value: '{''random'', ''cyclic''}'
              name: selection
              optional: 'False'
              default_value: '''cyclic'''
              path: selection
          optimisation_parameters:
            - description: Maximum number of iterations.
              kind_of_value: integer
              name: max_iterations
              optional: 'True'
              default_value: None
              path: max_iter
        name: multi-task elastic net
        other_names: []
        type: Regression
    :linear_model.coordinate_descent.MultiTaskLasso:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Constant that multiplies the L1/L2 term.
              kind_of_value: float
              name: l1_l2_multiplier
              optional: 'True'
              default_value: '1.0'
              path: alpha
            - description: Whether to calculate the intercept for this model.
              kind_of_value: boolean
              name: fit_intercept
              optional: 'False'
              default_value: 'True'
              path: fit_intercept
            - description: Normalizes the regressors before regression by subtracting the
                mean and dividing by the I2-norm.
              kind_of_value: boolean
              name: normalize
              optional: 'True'
              default_value: 'False'
              path: normalize
            - description: If True, X will be copied; else, it may be overwritten.
              kind_of_value: boolean
              name: copy_X
              optional: 'True'
              default_value: 'True'
              path: copy_X
            - description: 'The tolerance for the optimization: if the updates are smaller
              than tol, the optimization code checks the dual gap for optimality and continues
              until it is smaller than tol.'
              kind_of_value: float
              name: tolerance
              optional: 'True'
              default_value: '0.0001'
              path: tol
            - description: When set to True, reuse the solution of the previous call to
                fit as initialization, otherwise, just erase the previous solution.
              kind_of_value: boolean
              name: reuse_previous
              optional: 'True'
              default_value: 'False'
              path: warm_start
            - description: The seed of the pseudo random number generator to use when shuffling
                the data. If int, random_state is the seed used by the random number generator;
                If RandomState instance, random_state is the random number generator; If
                None, the random number generator is the RandomState instance used by np.random.
              kind_of_value: '{integer, RandomState instance, None}'
              name: random_state
              optional: 'True'
              default_value: None
              path: random_state
            - description: If set to 'random', a random coefficient is updated every iteration
                rather than looping over features sequentially by default.
              kind_of_value: '{''random'', ''cyclic''}'
              name: selection
              optional: 'False'
              default_value: '''cyclic'''
              path: selection
          optimisation_parameters:
            - description: Maximum number of iterations.
              kind_of_value: integer
              name: max_iterations
              optional: 'True'
              default_value: None
              path: max_iter
        name: multi-task lasso
        other_names: []
        type: Regression
    :linear_model.huber.HuberRegressor:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: The parameter controls the number of samples that should be classified
                as outliers. The smaller the parameter, the more robust it is to outliers.
              kind_of_value: float > 1.0
              name: number_of_outliers
              optional: 'False'
              default_value: '1.35'
              path: epsilon
            - description: Regularization parameter.
              kind_of_value: float
              name: regularization_parameter
              optional: 'False'
              default_value: '0.0001'
              path: alpha
            - description: When set to True, reuse the solution of the previous call to
                fit as initialization, otherwise, just erase the previous solution.
              kind_of_value: boolean
              name: reuse_previous
              optional: 'False'
              default_value: 'False'
              path: warm_start
            - description: Whether to calculate the intercept for this model.
              kind_of_value: boolean
              name: fit_intercept
              optional: 'True'
              default_value: 'True'
              path: fit_intercept
            - description: The stopping criterion.
              kind_of_value: float
              name: tolerance
              optional: 'True'
              default_value: 1e-05
              path: tol
          optimisation_parameters:
            - description: Maximum number of iterations that scipy.optimize.fmin_l_bfgs_b
                should run for.
              kind_of_value: integer
              name: max_iterations
              optional: 'False'
              default_value: '100'
              path: max_iter
        name: huber regressor
        other_names: []
        type: Regression
    :linear_model.least_angle.Lars:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Whether to calculate the intercept for this model.
              kind_of_value: boolean
              name: fit_intercept
              optional: 'False'
              default_value: 'True'
              path: fit_intercept
            - description: Normalizes the regressors before regression by subtracting the
                mean and dividing by the I2-norm.
              kind_of_value: boolean
              name: normalize
              optional: 'True'
              default_value: 'False'
              path: normalize
            - description: Target number of non-zero coefficients.
              kind_of_value: integer
              name: nonzero_coefficients
              optional: 'True'
              default_value: '500'
              path: n_nonzero_coefs
            - description: The machine-precision regularization in the computation of the
                Cholesky diagonal factors. Increase this for very ill-conditioned systems.
              kind_of_value: float
              name: eps
              optional: 'True'
              default_value: '2.2204460492503131e-16'
              path: eps
            - description: If True, X will be copied; else, it may be overwritten.
              kind_of_value: boolean
              name: copy_X
              optional: 'True'
              default_value: 'True'
              path: copy_X
            - description: When set to True, forces the coefficients to be positive.
              kind_of_value: boolean
              name: positive_coef
              optional: 'True'
              default_value: 'False'
              path: positive
          optimisation_parameters:
            - description: Whether to use a precomputed Gram matrix to speed up calculations.
                The Gram matrix can also be passed as argument.
              kind_of_value: '{boolean, array-like, ''auto''}'
              name: precompute
              optional: 'False'
              default_value: 'False'
              path: precompute
            - description: If True the full path is stored in the coef_path_ attribute.
                If you compute the solution for a large problem or many targets, setting
                fit_path to False will lead to a speedup, especially with a small alpha.
              kind_of_value: boolean
              name: fit_path
              optional: 'False'
              default_value: 'True'
              path: fit_path
        name: least angle regression
        other_names:
          - LARS
        type: Regression
    :linear_model.least_angle.LassoLars:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Constant that multiplies the penalty term.
              kind_of_value: float
              name: penalty_multiplier
              optional: 'True'
              default_value: '1.0'
              path: alpha
            - description: Whether to calculate the intercept for this model.
              kind_of_value: boolean
              name: fit_intercept
              optional: 'False'
              default_value: 'True'
              path: fit_intercept
            - description: Sets the verbosity amount.
              kind_of_value: '{boolean, integer}'
              name: verbose
              optional: 'True'
              default_value: 'False'
              path: verbose
            - description: Normalizes the regressors before regression by subtracting the
                mean and dividing by the I2-norm.
              kind_of_value: boolean
              name: normalize
              optional: 'True'
              default_value: 'False'
              path: normalize
            - description: The machine-precision regularization in the computation of the
                Cholesky diagonal factors. Increase this for very ill-conditioned systems.
              kind_of_value: float
              name: eps
              optional: 'True'
              default_value: '2.2204460492503131e-16'
              path: eps
            - description: If True, X will be copied; else, it may be overwritten.
              kind_of_value: boolean
              name: copy_X
              optional: 'True'
              default_value: 'True'
              path: copy_X
            - description: When set to True, forces the coefficients to be positive.
              kind_of_value: boolean
              name: positive_coef
              optional: 'True'
              default_value: 'False'
              path: positive
          optimisation_parameters:
            - description: Whether to use a precomputed Gram matrix to speed up calculations.
                The Gram matrix can also be passed as argument.
              kind_of_value: '{True, False, ''auto''}'
              name: precompute
              optional: 'False'
              default_value: '''auto'''
              path: precompute
            - description: Maximum number of iterations.
              kind_of_value: integer
              name: max_iterations
              optional: 'True'
              default_value: None
              path: max_iter
            - description: If True the full path is stored in the coef_path_ attribute.
                If you compute the solution for a large problem or many targets, setting
                fit_path to False will lead to a speedup, especially with a small alpha.
              kind_of_value: boolean
              name: fit_path
              optional: 'False'
              default_value: 'True'
              path: fit_path
        name: lasso least angle regression
        other_names:
          - LassoLars
        type: Regression
    :linear_model.logistic.LogisticRegression:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Used to specify the norm used in the penalization.
              kind_of_value: '{l1, l2}'
              name: penalty_norm
              optional: 'False'
              default_value: '''l2'''
              path: penalty
            - description: Dual or primal formulation.
              kind_of_value: boolean
              name: dual
              optional: 'False'
              default_value: 'False'
              path: dual
            - description: Tolerance for stopping criteria.
              kind_of_value: float
              name: tolerance
              optional: 'False'
              default_value: '0.0001'
              path: tol
            - description: Inverse of regularization strength; must be a positive float.
                Like in support vector machines, smaller values specify stronger regularization.
              kind_of_value: float
              name: inverse_regularisation_strength
              optional: 'False'
              default_value: '1.0'
              path: C
            - description: Specifies if a constant (a.k.a. bias or intercept) should be
                added to the decision function.
              kind_of_value: boolean
              name: fit_intercept
              optional: 'False'
              default_value: 'True'
              path: fit_intercept
            - description: "Useful only when the solver \u2018liblinear\u2019 is used and\
              \ self.fit_intercept is set to True. In this case, x becomes [x, self.intercept_scaling],\
              \ i.e. a \u201Csynthetic\u201D feature with constant value equal to intercept_scaling\
              \ is appended to the instance vector. The intercept becomes intercept_scaling\
              \ * synthetic_feature_weight."
              kind_of_value: float
              name: intercept_scaling
              optional: 'False'
              default_value: '1'
              path: intercept_scaling
            - description: Weights associated with classes.
              kind_of_value: '{dict, ''balanced'', None}'
              name: class_weight
              optional: 'False'
              default_value: None
              path: class_weight
            - description: The seed of the pseudo random number generator to use when shuffling
                the data. If int, random_state is the seed used by the random number generator;
                If RandomState instance, random_state is the random number generator; If
                None, the random number generator is the RandomState instance used by np.random.
              kind_of_value: '{integer, RandomState instance, None}'
              name: random_state
              optional: 'True'
              default_value: None
              path: random_state
            - description: Solver to use in the computational routines.
              kind_of_value: '{''newton-cg'', ''lbfgs'', ''liblinear'', ''sag'', ''saga''}'
              name: solver
              optional: 'False'
              default_value: '''liblinear'''
              path: solver
            - description: "If the option chosen is \u2018ovr\u2019, then a binary problem\
              \ is fit for each label. Else the loss minimised is the multinomial loss\
              \ fit across the entire probability distribution."
              kind_of_value: '{''ovr'', ''multinomial''}'
              name: multi_class
              optional: 'False'
              default_value: '''ovr'''
              path: multi_class
            - description: For the liblinear and lbfgs solvers set verbose to any positive
                number for verbosity.
              kind_of_value: integer
              name: verbose
              optional: 'True'
              default_value: '0'
              path: verbose
          optimisation_parameters:
            - description: Maximum number of iterations.
              kind_of_value: integer
              name: max_iterations
              optional: 'False'
              default_value: '100'
              path: max_iter
            - description: When set to True, reuse the solution of the previous call to
                fit as initialization, otherwise, just erase the previous solution.
              kind_of_value: boolean
              name: reuse_previous
              optional: 'False'
              default_value: 'False'
              path: warm_start
            - description: Number of CPU cores used when parallelizing over classes.
              kind_of_value: integer
              name: jobs
              optional: 'False'
              default_value: '1'
              path: n_jobs
        name: logistic regression
        other_names:
          - logit regression
          - maximum-entropy classification
          - MaxEnt
          - log-linear classifier
        type: Classification
    :linear_model.omp.OrthogonalMatchingPursuit:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Target number of non-zero coefficients.
              kind_of_value: integer
              name: nonzero_coef
              optional: 'True'
              default_value: None
              path: n_nonzero_coefs
            - description: Maximum norm of the residual.
              kind_of_value: float
              name: tolerance
              optional: 'True'
              default_value: None
              path: tol
            - description: Whether to calculate the intercept for this model.
              kind_of_value: boolean
              name: fit_intercept
              optional: 'True'
              default_value: 'True'
              path: fit_intercept
            - description: Normalizes the regressors before regression by subtracting the
                mean and dividing by the l2-norm.
              kind_of_value: boolean
              name: normalize
              optional: 'True'
              default_value: 'True'
              path: normalize
          optimisation_parameters:
            - description: Whether to use a precomputed Gram matrix  and Xy matrix to speed
                up calculations. Matrices can also be directly passed to the fit method.
              kind_of_value: '{boolean, ''auto''}'
              name: precompute
              optional: 'False'
              default_value: '''auto'''
              path: precompute
        name: orthogonal matching pursuit model
        other_names:
          - OMP
        type: Model Fit Aproximator
    :linear_model.orthogonal_mp:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Input data. Columns are assumed to have unit norm.
              kind_of_value: array, shape (n_samples, n_features)
              name: feature_matrix
              optional: 'False'
              default_value: ''
              path: X
            - description: Input targets
              kind_of_value: array, shape (n_samples) or (n_samples, n_targets)
              name: input_targets
              optional: 'False'
              default_value: ''
              path: Y
            - description: Target number of non-zero coefficients.
              kind_of_value: integer
              name: nonzero_coefficients
              optional: 'False'
              default_value: None
              path: n_nonzero_coefs
            - description: Maximum norm of the residual.
              kind_of_value: float
              name: tolerance
              optional: 'True'
              default_value: None
              path: tol
            - description: If True, X will be copied; else, it may be overwritten.
              kind_of_value: boolean
              name: copy_X
              optional: 'True'
              default_value: 'True'
              path: copy_X
            - description: Whether to return every value of the nonzero coefficients along
                the forward path. Useful for cross-validation.
              kind_of_value: boolean
              name: return_path
              optional: 'True'
              default_value: 'False'
              path: return_path
            - description: Whether or not to return the number of iterations.
              kind_of_value: boolean
              name: return_n_iter
              optional: 'True'
              default_value: 'False'
              path: return_n_iter
          optimisation_parameters:
            - description: Whether to perform precomputations.
              kind_of_value: '{True, False, ''auto''}'
              name: precompute
              optional: 'False'
              default_value: '''auto'''
              path: precompute
        name: n-target orthogonal matching pursuit
        other_names: []
        type: Model Fit Aproximator
    :linear_model.passive_aggressive.PassiveAggressiveClassifier:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Maximum step size (regularization).
              kind_of_value: float
              name: regualrisation
              optional: 'False'
              default_value: '1.0'
              path: C
            - description: Whether the intercept should be estimated or not.
              kind_of_value: boolean
              name: fit_intercept
              optional: 'False'
              default_value: 'True'
              path: fit_intercept
            - description: The stopping criterion.
              kind_of_value: float
              name: tolerance
              optional: 'True'
              default_value: None
              path: tol
            - description: Whether or not the training data should be shuffled after each
                epoch.
              kind_of_value: boolean
              name: shuffle
              optional: 'True'
              default_value: 'True'
              path: shuffle
            - description: The verbosity level.
              kind_of_value: integer
              name: verbose
              optional: 'True'
              default_value: '0'
              path: verbose
            - description: The loss function to be used.
              kind_of_value: '{''hinge'', ''squared_hinge''}'
              name: loss_function
              optional: 'True'
              default_value: '''hinge'''
              path: loss
            - description: The seed of the pseudo random number generator to use when shuffling
                the data. If int, random_state is the seed used by the random number generator;
                If RandomState instance, random_state is the random number generator; If
                None, the random number generator is the RandomState instance used by np.random.
              kind_of_value: '{integer, RandomState instance, None}'
              name: random_state
              optional: 'True'
              default_value: None
              path: random_state
            - description: When set to True, reuse the solution of the previous call to
                fit as initialization, otherwise, just erase the previous solution.
              kind_of_value: boolean
              name: reuse_previous
              optional: 'True'
              default_value: 'False'
              path: warm_start
            - description: Weights associated with classes.
              kind_of_value: '{dict,''balanced'', None}'
              name: class_weight
              optional: 'True'
              default_value: None
              path: class_weight
            - description: When set to True, computes the averaged SGD weights and stores
                the result in the coef_ attribute. If set to an int greater than 1, averaging
                will begin once the total number of samples seen reaches average. So average=10
                will begin averaging after seeing 10 samples.
              kind_of_value: '{boolean, integer}'
              name: average
              optional: 'True'
              default_value: 'False'
              path: average
          optimisation_parameters:
            - description: The maximum number of passes over the training data (aka epochs).
              kind_of_value: integer
              name: epochs
              optional: 'True'
              default_value: None
              path: max_iter
            - description: The number of of CPUs to use for the computation. If -1 all CPUs
                are used.
              kind_of_value: integer
              name: jobs
              optional: 'True'
              default_value: '1'
              path: n_jobs
        name: passive aggressive classifier
        other_names: []
        type: Classification
    :linear_model.passive_aggressive.PassiveAggressiveRegressor:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Maximum step size (regularization).
              kind_of_value: float
              name: regualrisation
              optional: 'False'
              default_value: '1.0'
              path: C
            - description: Whether the intercept should be estimated or not.
              kind_of_value: boolean
              name: fit_intercept
              optional: 'False'
              default_value: 'True'
              path: fit_intercept
            - description: The stopping criterion.
              kind_of_value: float
              name: tolerance
              optional: 'True'
              default_value: None
              path: tol
            - description: Whether or not the training data should be shuffled after each
                epoch.
              kind_of_value: boolean
              name: shuffle
              optional: 'True'
              default_value: 'True'
              path: shuffle
            - description: The verbosity level.
              kind_of_value: integer
              name: verbose
              optional: 'True'
              default_value: '0'
              path: verbose
            - description: The loss function to be used.
              kind_of_value: '{''epsilon_insensitive'', ''squared_epsilon_insensitive''}'
              name: loss_function
              optional: 'True'
              default_value: '''epsilon_insensitive'''
              path: loss
            - description: If the difference between the current prediction and the correct
                label is below this threshold, the model is not updated.
              kind_of_value: float
              name: update_threshold
              optional: 'False'
              default_value: '0.1'
              path: epsilon
            - description: The seed of the pseudo random number generator to use when shuffling
                the data. If int, random_state is the seed used by the random number generator;
                If RandomState instance, random_state is the random number generator; If
                None, the random number generator is the RandomState instance used by np.random.
              kind_of_value: '{integer, RandomState instance, None}'
              name: random_state
              optional: 'True'
              default_value: None
              path: random_state
            - description: When set to True, reuse the solution of the previous call to
                fit as initialization, otherwise, just erase the previous solution.
              kind_of_value: boolean
              name: reuse_previous
              optional: 'True'
              default_value: 'False'
              path: warm_start
            - description: When set to True, computes the averaged SGD weights and stores
                the result in the coef_ attribute. If set to an int greater than 1, averaging
                will begin once the total number of samples seen reaches average. So average=10
                will begin averaging after seeing 10 samples.
              kind_of_value: '{boolean, integer}'
              name: average
              optional: 'True'
              default_value: 'False'
              path: average
          optimisation_parameters:
            - description: The maximum number of passes over the training data (aka epochs).
              kind_of_value: integer
              name: epochs
              optional: 'True'
              default_value: None
              path: max_iter
        name: passive aggressive regressor
        other_names: []
        type: Regression
    :linear_model.perceptron.Perceptron:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: The penalty (aka regularization term) to be used.
              kind_of_value: '{none, ''l2'', ''l1'', ''elasticnet''}'
              name: regularization_term
              optional: 'False'
              default_value: None
              path: penalty
            - description: Constant that multiplies the regularization term.
              kind_of_value: float
              name: regularisation_multiplier
              optional: 'False'
              default_value: '0.0001'
              path: alpha
            - description: Whether the intercept should be estimated or not.
              kind_of_value: boolean
              name: fit_intercept
              optional: 'False'
              default_value: 'True'
              path: fit_intercept
            - description: The stopping criterion.
              kind_of_value: float
              name: tolerance
              optional: 'True'
              default_value: None
              path: tol
            - description: Whether or not the training data should be shuffled after each
                epoch.
              kind_of_value: boolean
              name: shuffle
              optional: 'True'
              default_value: 'True'
              path: shuffle
            - description: The verbosity level.
              kind_of_value: integer
              name: verbose
              optional: 'True'
              default_value: '0'
              path: verbose
            - description: The initial learning rate for the 'constant' or 'invscaling'
                schedules.
              kind_of_value: double
              name: eta0
              optional: 'False'
              default_value: '1.0'
              path: eta0
            - description: Weights associated with classes.
              kind_of_value: '{{class_label: weight}, ''balanced'',  None}'
              name: class_weight
              optional: 'True'
              default_value: None
              path: class_weight
            - description: When set to True, reuse the solution of the previous call to
                fit as initialization, otherwise, just erase the previous solution.
              kind_of_value: boolean
              name: reuse_previous
              optional: 'True'
              default_value: 'False'
              path: warm_start
          optimisation_parameters:
            - description: Maximum number of iterations.
              kind_of_value: integer
              name: max_iterations
              optional: 'True'
              default_value: None
              path: max_iter
            - description: The number of jobs to use for the computation. If -1 all CPUs
                are used.
              kind_of_value: integer
              name: jobs
              optional: 'True'
              default_value: '1'
              path: n_jobs
            - description: When set to True, reuse the solution of the previous call to
                fit as initialization, otherwise, just erase the previous solution.
              kind_of_value: boolean
              name: reuse_previous
              optional: 'True'
              default_value: 'False'
              path: warm_start
        name: perceptron
        other_names: []
        type: Classification
    :linear_model.ransac.RANSACRegressor:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: base_estimator.
              kind_of_value: '{object, None}'
              name: base_estimator
              optional: 'True'
              default_value: None
              path: base_estimator
            - description: Minimum number of samples chosen randomly from original data.
              kind_of_value: '[int (>= 1), float ([0, 1])}'
              name: min_samples
              optional: 'True'
              default_value: None
              path: min_samples
            - description: Maximum residual for a data sample to be classified as an inlier.
                By default the threshold is chosen as the MAD (median absolute deviation)
                of the target values y.
              kind_of_value: float
              name: residual_threshold
              optional: 'True'
              default_value: None
              path: residual_threshold
            - description: 'This function is called with the randomly selected data before
              the model is fitted to it: is_data_valid(X, y). If its return value is False
              the current randomly chosen sub-sample is skipped.'
              kind_of_value: callable
              name: is_data_valid
              optional: 'True'
              default_value: None
              path: is_data_valid
            - description: 'This function is called with the estimated model and the randomly
              selected data: is_model_valid(model, X, y). If its return value is False
              the current randomly chosen sub-sample is skipped. Rejecting samples with
              this function is computationally costlier than with is_data_valid. is_model_valid
              should therefore only be used if the estimated model is needed for making
              the rejection decision..'
              kind_of_value: callable
              name: is_model_valid
              optional: 'True'
              default_value: None
              path: is_model_valid
            - description: If loss is a callable, then it should be a function that takes
                two arrays as inputs, the true and predicted value and returns a 1-D array
                with the i-th value of the array corresponding to the loss on X[i].
              kind_of_value: '{''absolute_loss'', ''squared_loss''}'
              name: loss
              optional: 'True'
              default_value: absolute_loss
              path: loss
            - description: The seed of the pseudo random number generator to use when shuffling
                the data. If int, random_state is the seed used by the random number generator;
                If RandomState instance, random_state is the random number generator; If
                None, the random number generator is the RandomState instance used by np.random.
              kind_of_value: '{integer, RandomState instance, None}'
              name: random_state
              optional: 'True'
              default_value: None
              path: random_state
          optimisation_parameters:
            - description: Maximum number of iterations for random sample selection.
              kind_of_value: integer
              name: iterations_random_sampling
              optional: 'True'
              default_value: '100'
              path: max_trials
            - description: Maximum number of iterations that can be skipped due to finding
                zero inliers or invalid data.
              kind_of_value: integer
              name: max_skips
              optional: 'True'
              default_value: inf
              path: max_skips
            - description: Stop iteration if at least this number of inliers are found.
              kind_of_value: integer
              name: stop_n_inliers
              optional: 'True'
              default_value: inf
              path: stop_n_inliers
            - description: Stop iteration if score is greater equal than this threshold.
              kind_of_value: float
              name: stop_score
              optional: 'True'
              default_value: inf
              path: stop_score
            - description: RANSAC iteration stops if at least one outlier-free set of the
                training data is sampled in RANSAC.
              kind_of_value: float in range [0,1]
              name: stop_probability
              optional: 'True'
              default_value: '0.99'
              path: stop_probability
        name: random sample consensus regressor
        other_names:
          - RANSAC
        type: Regression
    :linear_model.ridge.Ridge:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Regularization strength. Regularization improves the conditioning
                of the problem and reduces the variance of the estimates. Larger values
                specify stronger regularization.
              kind_of_value: float, array-like in the shape of the targets
              name: regularisation_strength
              optional: 'False'
              default_value: '1.0'
              path: alpha
            - description: Whether to calculate the intercept for this model.
              kind_of_value: boolean
              name: fit_intercept
              optional: 'False'
              default_value: 'True'
              path: fit_intercept
            - description: Normalizes the regressors before regression by subtracting the
                mean and dividing by the l2-norm.
              kind_of_value: boolean
              name: normalize
              optional: 'True'
              default_value: 'False'
              path: normalize
            - description: If True, X will be copied; else, it may be overwritten.
              kind_of_value: boolean
              name: copy_X
              optional: 'True'
              default_value: 'True'
              path: copy_X
            - description: Precision of the solution. (The tolerance for the optimisation.)
              kind_of_value: float
              name: tolerance
              optional: 'False'
              default_value: '0.001'
              path: tol
            - description: Solver to use in the computational routines.
              kind_of_value: string
              measurement_scale: nominal
              name: solver
              optional: 'False'
              range: '{''auto'', ''svd'', ''cholesky'', ''lsqr'', ''sparse_cg'', ''sag'',
              ''saga''}'
              default_value: '''auto'''
              path: solver
            - description: The seed of the pseudo random number generator to use when shuffling
                the data. If int, random_state is the seed used by the random number generator;
                If RandomState instance, random_state is the random number generator; If
                None, the random number generator is the RandomState instance used by np.random.
              kind_of_value: '{integer, RandomState instance, None}'
              name: random_state
              optional: 'True'
              default_value: None
              path: random_state
          optimisation_parameters:
            - description: Maximum number of iterations.
              kind_of_value: integer
              name: max_iterations
              optional: 'True'
              default_value: None
              path: max_iter
        name: ridge regression
        other_names:
          - Tikhonov regularization
          - weight decay
          - "Tikhonov\u2013Miller method"
          - "Phillips\u2013Twomey method"
          - constrained linear inversion
          - linear regularization
        type: Regression
    :linear_model.stochastic_gradient.SGDClassifier:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: The loss function to be used.
              kind_of_value: '{''hinge'', ''log'', ''modified_huber'', ''squared_hinge'',
              ''perceptron'', ''squared_loss'', ''huber'', ''epsilon_insensitive'', ''squared_epsilon_insensitive''}'
              name: loss_function
              optional: 'False'
              default_value: '''hinge'''
              path: loss
            - description: The penalty (aka regularization term) to be used.
              kind_of_value: '{''none'', ''l2'', ''l1'', ''elasticnet''}'
              name: regularization_term
              optional: 'False'
              default_value: '''l2'''
              path: penalty
            - description: Constant that multiplies the regularization term.
              kind_of_value: float
              name: regualrisation_multiplier
              optional: 'False'
              default_value: '0.0001'
              path: alpha
            - description: The Elastic Net mixing parameter.
              kind_of_value: float
              name: l1_ratio
              optional: 'False'
              default_value: '0.15'
              path: l1_ratio
            - description: Whether the intercept should be estimated or not.
              kind_of_value: boolean
              name: fit_intercept
              optional: 'False'
              default_value: 'True'
              path: fit_intercept
            - description: The stopping criterion.
              kind_of_value: float
              name: tolerance
              optional: 'True'
              default_value: None
              path: tol
            - description: Whether or not the training data should be shuffled after each
                epoch.
              kind_of_value: boolean
              name: shuffle
              optional: 'True'
              default_value: 'True'
              path: shuffle
            - description: The verbosity level.
              kind_of_value: integer
              name: verbose
              optional: 'True'
              default_value: '0'
              path: verbose
            - description: "For \u2018huber\u2019, determines the threshold at which it\
              \ becomes less important to get the prediction exactly right. For epsilon-insensitive,\
              \ any differences between the current prediction and the correct label are\
              \ ignored if they are less than this threshold."
              kind_of_value: float
              name: epsilon
              optional: 'False'
              default_value: '0.1'
              path: epsilon
            - description: The seed of the pseudo random number generator to use when shuffling
                the data. If int, random_state is the seed used by the random number generator;
                If RandomState instance, random_state is the random number generator; If
                None, the random number generator is the RandomState instance used by np.random.
              kind_of_value: '{integer, RandomState instance, None}'
              name: random_state
              optional: 'True'
              default_value: None
              path: random_state
            - description: Where t0 is chosen by a heuristic proposed by Leon Bottou.
              kind_of_value: '{constant, optimal, invscaling}'
              name: learning_rate
              optional: 'True'
              default_value: optimal
              path: learning_rate
            - description: The initial learning rate for the 'constant' or 'invscaling'
                schedules.
              kind_of_value: double
              name: eta0
              optional: 'False'
              default_value: '0.0'
              path: eta0
            - description: The exponent for inverse scaling learning rate.
              kind_of_value: double
              name: inverse_scaling_exponent
              optional: 'False'
              default_value: '0.5'
              path: power_t
            - description: Weights associated with classes.
              kind_of_value: '{{class_label: weight}, ''balanced'',  None}'
              name: class_weight
              optional: 'True'
              default_value: None
              path: class_weight
            - description: When set to True, reuse the solution of the previous call to
                fit as initialization, otherwise, just erase the previous solution.
              kind_of_value: boolean
              name: reuse_previous
              optional: 'True'
              default_value: 'False'
              path: warm_start
            - description: The stopping criterion.
              kind_of_value: float
              name: tolerance
              optional: 'True'
              default_value: None
              path: tol
            - description: When set to True, computes the averaged SGD weights and stores
                the result in the coef_ attribute. If set to an int greater than 1, averaging
                will begin once the total number of samples seen reaches average. So average=10
                will begin averaging after seeing 10 samples.
              kind_of_value: '{boolean, integer}'
              name: average
              optional: 'True'
              default_value: 'False'
              path: average
          optimisation_parameters:
            - description: Maximum number of iterations.
              kind_of_value: integer
              name: max_iterations
              optional: 'True'
              default_value: None
              path: max_iter
            - description: The number of CPUs to use to do the OVA (One Versus All, for
                multi-class problems) computation. -1 means 'all CPUs'.
              kind_of_value: integer
              name: jobs
              optional: 'True'
              default_value: '1'
              path: n_jobs
            - description: Whether the intercept should be estimated or not.
              kind_of_value: boolean
              name: fit_intercept
              optional: 'False'
              default_value: 'True'
              path: fit_intercept
        name: stochastic gradient descent classifier
        other_names:
          - SGD classifier
        type: Classification
    :linear_model.stochastic_gradient.SGDRegressor:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: The loss function to be used.
              kind_of_value: '{''squared_loss'', ''huber'', ''epsilon_insensitive'', ''squared_epsilon_insensitive''}'
              name: loss_function
              optional: 'False'
              default_value: '''squared_loss'''
              path: loss
            - description: The penalty (aka regularization term) to be used.
              kind_of_value: '{''none'', ''l2'', ''l1'', ''elasticnet''}'
              name: regularization_term
              optional: 'False'
              default_value: '''l2'''
              path: penalty
            - description: Constant that multiplies the regularization term.
              kind_of_value: float
              name: regualrisation_multiplier
              optional: 'False'
              default_value: '0.0001'
              path: alpha
            - description: The Elastic Net mixing parameter.
              kind_of_value: float
              name: l1_ratio
              optional: 'False'
              default_value: '0.15'
              path: l1_ratio
            - description: Whether the intercept should be estimated or not.
              kind_of_value: boolean
              name: fit_intercept
              optional: 'False'
              default_value: 'True'
              path: fit_intercept
            - description: The stopping criterion.
              kind_of_value: float
              name: tolerance
              optional: 'True'
              default_value: None
              path: tol
            - description: Whether or not the training data should be shuffled after each
                epoch.
              kind_of_value: boolean
              name: shuffle
              optional: 'True'
              default_value: 'True'
              path: shuffle
            - description: The verbosity level.
              kind_of_value: integer
              name: verbose
              optional: 'True'
              default_value: '0'
              path: verbose
            - description: "For \u2018huber\u2019, determines the threshold at which it\
              \ becomes less important to get the prediction exactly right. For epsilon-insensitive,\
              \ any differences between the current prediction and the correct label are\
              \ ignored if they are less than this threshold."
              kind_of_value: float
              name: epsilon
              optional: 'False'
              default_value: '0.1'
              path: epsilon
            - description: The seed of the pseudo random number generator to use when shuffling
                the data. If int, random_state is the seed used by the random number generator;
                If RandomState instance, random_state is the random number generator; If
                None, the random number generator is the RandomState instance used by np.random.
              kind_of_value: '{integer, RandomState instance, None}'
              name: random_state
              optional: 'True'
              default_value: None
              path: random_state
            - description: where t0 is chosen by a heuristic proposed by Leon Bottou.
              kind_of_value: '{''constant'', ''optimal'', ''invscaling''}'
              name: learning_rate
              optional: 'True'
              default_value: '''invscaling'''
              path: learning_rate
            - description: The initial learning rate for the 'constant' or 'invscaling'
                schedules.
              kind_of_value: double
              name: eta0
              optional: 'False'
              default_value: '0.01'
              path: eta0
            - description: The exponent for inverse scaling learning rate.
              kind_of_value: double
              name: inverse_scaling_exponent
              optional: 'False'
              default_value: '0.25'
              path: power_t
            - description: When set to True, reuse the solution of the previous call to
                fit as initialization, otherwise, just erase the previous solution.
              kind_of_value: boolean
              name: reuse_previous
              optional: 'True'
              default_value: 'False'
              path: warm_start
            - description: When set to True, computes the averaged SGD weights and stores
                the result in the coef_ attribute. If set to an int greater than 1, averaging
                will begin once the total number of samples seen reaches average. So average=10
                will begin averaging after seeing 10 samples.
              kind_of_value: '{boolean, integer}'
              name: average
              optional: 'True'
              default_value: 'False'
              path: average
          optimisation_parameters:
            - description: Maximum number of iterations.
              kind_of_value: integer
              name: max_iterations
              optional: 'True'
              default_value: None
              path: max_iter
        name: stochastic gradient descent regressor
        other_names:
          - SGD regressor
        type: Regression
    :linear_model.theil_sen.TheilSenRegressor:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Whether to calculate the intercept for this model.
              kind_of_value: boolean
              name: fit_intercept
              optional: 'True'
              default_value: 'True'
              path: fit_intercept
            - description: If True, X will be copied; else, it may be overwritten.
              kind_of_value: boolean
              name: copy_X
              optional: 'True'
              default_value: 'True'
              path: copy_X
            - description: "Instead of computing with a set of cardinality \u2018n choose\
              \ k\u2019, where n is the number of samples and k is the number of subsamples\
              \ (at least number of features), consider only a stochastic subpopulation\
              \ of a given maximal size if \u2018n choose k\u2019 is larger than max_subpopulation.\
              \ For other than small problem sizes this parameter will determine memory\
              \ usage and runtime if n_subsamples is not changed."
              kind_of_value: integer
              name: max_subpopulation
              optional: 'True'
              default_value: '10000'
              path: max_subpopulation
            - description: Number of samples to calculate the parameters.
              kind_of_value: integer
              name: num_subsamples
              optional: 'True'
              default_value: None
              path: n_subsamples
            - description: Tolerance when calculating spatial median.
              kind_of_value: float
              name: tolerance
              optional: 'True'
              default_value: '0.001'
              path: tol
            - description: The seed of the pseudo random number generator to use when shuffling
                the data. If int, random_state is the seed used by the random number generator;
                If RandomState instance, random_state is the random number generator; If
                None, the random number generator is the RandomState instance used by np.random.
              kind_of_value: '{integer, RandomState instance, None}'
              name: random_state
              optional: 'True'
              default_value: None
              path: random_state
            - description: Verbose mode when fitting the model.
              kind_of_value: boolean
              name: verbose
              optional: 'True'
              default_value: 'False'
              path: verbose
          optimisation_parameters:
            - description: Maximum number of iterations for the calculation of spatial median.
              kind_of_value: integer
              name: max_iterations
              optional: 'True'
              default_value: '300'
              path: max_iter
            - description: The number of CPUs to use for the computation. If -1 all CPUs
                are used.
              kind_of_value: integer
              name: jobs
              optional: 'True'
              default_value: '1'
              path: n_jobs
        name: theil-sen estimator
        other_names: []
        type: Regression
    :manifold.isomap.Isomap:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Number of neighbors to consider for each point.
              kind_of_value: integer
              name: num_neighbours
              optional: 'False'
              default_value: '5'
              path: n_neighbors
            - description: Number of coordinates for the manifold.
              kind_of_value: integer
              name: num_components
              optional: 'False'
              default_value: '2'
              path: n_components
            - description: Solver for the eigenvalue decomposition.
              kind_of_value: '{''auto'', ''arpack'', ''dense'']'
              name: eigen_solver
              optional: 'False'
              default_value: '''auto'''
              path: eigen_solver
            - description: Tolerance passed to the eigenvalue decomposition solver
              kind_of_value: float
              name: tolerance
              optional: 'False'
              default_value: '0'
              path: tol
            - description: "Method to use in finding shortest path. 'auto' : attempt to\
              \ choose the best algorithm automatically. 'FW' : Floyd-Warshall algorithm.\
              \ 'D' : Dijkstra\u2019s algorithm."
              kind_of_value: '{''auto'', ''FW'', ''D''}'
              name: path_method
              optional: 'False'
              default_value: '''auto'''
              path: path_method
            - description: Algorithm to use for nearest neighbors search, passed to neighbors.
                NearestNeighbors instance.
              kind_of_value: '{''auto'', ''brute'', ''kd_tree'', ''ball_tree''}'
              name: neighbors_algorithm
              optional: 'False'
              default_value: '''auto'''
              path: neighbors_algorithm
          optimisation_parameters:
            - description: Maximum number of iterations for eigenvalue decomposition solver.
              kind_of_value: integer
              name: max_iterations
              optional: 'False'
              default_value: None
              path: max_iter
            - description: The number of jobs to use for the computation. If -1 all CPUs
                are used.
              kind_of_value: integer
              name: jobs
              optional: 'True'
              default_value: '1'
              path: n_jobs
        name: isomap embedding
        other_names: []
        type: Dimensionality Reduction
    :manifold.locally_linear.LocallyLinearEmbedding:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Number of neighbors to consider for each point.
              kind_of_value: integer
              name: num_neighbours
              optional: 'False'
              default_value: '5'
              path: n_neighbors
            - description: Number of coordinates for the manifold.
              kind_of_value: integer
              name: num_components
              optional: 'False'
              default_value: '2'
              path: n_components
            - description: Regularization constant, multiplies the trace of the local covariance
                matrix of the distances.
              kind_of_value: float
              name: regularization_constant
              optional: 'False'
              default_value: '0.001'
              path: reg
            - description: Solver for the eigenvalue decomposition.
              kind_of_value: '{''auto'', ''arpack'', ''dense'']'
              name: eigen_solver
              optional: 'False'
              default_value: '''auto'''
              path: eigen_solver
            - description: Tolerance passed to the eigenvalue decomposition solver
              kind_of_value: float
              name: tolerance
              optional: 'True'
              default_value: '0.000001'
              path: tol
            - description: Embedding method.
              kind_of_value: '{''standard'', ''hessian'', ''modified'', ''ltsa''}'
              name: embedding_method
              optional: 'False'
              default_value: '''standard'''
              path: method
            - description: Tolerance for Hessian eigenmapping method.
              kind_of_value: float
              name: hessian_tol
              optional: 'True'
              default_value: '0.0001'
              path: hessian_tol
            - description: Tolerance for modified LLE method.
              kind_of_value: float
              name: modified_tol
              optional: 'True'
              default_value: '0.000000000001'
              path: modified_tol
            - description: Algorithm to use for nearest neighbors search, passed to neighbors.NearestNeighbors
                instance.
              kind_of_value: '{''auto'', ''brute'', ''kd_tree'', ''ball_tree''}'
              name: neighbors_algorithm
              optional: 'False'
              default_value: '''auto'''
              path: neighbors_algorithm
            - description: The seed of the pseudo random number generator to use when shuffling
                the data. If int, random_state is the seed used by the random number generator;
                If RandomState instance, random_state is the random number generator; If
                None, the random number generator is the RandomState instance used by np.random.
              kind_of_value: '{integer, RandomState instance, None}'
              name: random_state
              optional: 'True'
              default_value: None
              path: random_state
          optimisation_parameters:
            - description: Maximum number of iterations for eigenvalue decomposition solver.
              kind_of_value: integer
              name: max_iterations
              optional: 'False'
              default_value: '100'
              path: max_iter
            - description: The number of jobs to use for the computation. If -1 all CPUs
                are used.
              kind_of_value: integer
              name: jobs
              optional: 'True'
              default_value: '1'
              path: n_jobs
        name: object oriented locally linear embedding analysis
        other_names: []
        type: Dimensionality Reduction
    :manifold.locally_linear_embedding:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Sample data.
              kind_of_value: '{array-like shape (n_samples, n_features), sparse matrix,
              BallTree, KDTree, NearestNeighbors}'
              name: sample_data
              optional: 'False'
              default_value: ''
              path: X
            - description: Number of neighbors to consider for each point.
              kind_of_value: integer
              name: num_neighbours
              optional: 'False'
              default_value: ''
              path: n_neighbors
            - description: Number of coordinates for the manifold.
              kind_of_value: integer
              name: num_components
              optional: 'False'
              default_value: ''
              path: n_components
            - description: Regularization constant, multiplies the trace of the local covariance
                matrix of the distances.
              kind_of_value: float
              name: regularization_constant
              optional: 'False'
              default_value: '0.001'
              path: reg
            - description: Solver for the eigenvalue decomposition.
              kind_of_value: '{''auto'', ''arpack'', ''dense'']'
              name: eigen_solver
              optional: 'False'
              default_value: '''auto'''
              path: eigen_solver
            - description: Tolerance passed to the eigenvalue decomposition solver
              kind_of_value: float
              name: tolerance
              optional: 'True'
              default_value: '0.000001'
              path: tol
            - description: Embedding method.
              kind_of_value: '{''standard'', ''hessian'', ''modified'', ''ltsa''}'
              name: embedding_method
              optional: 'False'
              default_value: '''standard'''
              path: method
            - description: Tolerance for Hessian eigenmapping method.
              kind_of_value: float
              name: hessian_tol
              optional: 'True'
              default_value: '0.0001'
              path: hessian_tol
            - description: Tolerance for modified LLE method.
              kind_of_value: float
              name: modified_tol
              optional: 'True'
              default_value: '0.000000000001'
              path: modified_tol
            - description: The seed of the pseudo random number generator to use when shuffling
                the data. If int, random_state is the seed used by the random number generator;
                If RandomState instance, random_state is the random number generator; If
                None, the random number generator is the RandomState instance used by np.random.
              kind_of_value: '{integer, RandomState instance, None}'
              name: random_state
              optional: 'True'
              default_value: None
              path: random_state
          optimisation_parameters:
            - description: Maximum number of iterations for eigenvalue decomposition solver.
              kind_of_value: integer
              name: max_iterations
              optional: 'False'
              default_value: '100'
              path: max_iter
            - description: The number of jobs to use for the computation. If -1 all CPUs
                are used.
              kind_of_value: integer
              name: jobs
              optional: 'True'
              default_value: '1'
              path: n_jobs
        name: locally linear embedding analysis
        other_names: []
        type: Dimensionality Reduction
    :manifold.mds.MDS:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Number of coordinates for the manifold.
              kind_of_value: integer
              name: num_components
              optional: 'False'
              default_value: '2'
              path: n_components
            - description: If True, perform metric MDS; otherwise, perform nonmetric MDS.
              kind_of_value: boolean
              name: metric_MDS
              optional: 'True'
              default_value: 'True'
              path: metric
            - description: Level of verbosity.
              kind_of_value: integer
              name: verbose
              optional: 'True'
              default_value: '0'
              path: verbose
            - description: Relative tolerance with respect to stress at which to declare
                convergence.
              kind_of_value: float
              name: eps
              optional: 'True'
              default_value: '0.001'
              path: eps
            - description: The seed of the pseudo random number generator to use when shuffling
                the data. If int, random_state is the seed used by the random number generator;
                If RandomState instance, random_state is the random number generator; If
                None, the random number generator is the RandomState instance used by np.random.
              kind_of_value: '{integer, RandomState instance, None}'
              name: random_state
              optional: 'True'
              default_value: None
              path: random_state
            - description: Dissimilarity measure to use.
              kind_of_value: '{''euclidean'', ''precomputed''}'
              name: dissimilarity
              optional: 'True'
              default_value: '''euclidean'''
              path: dissimilarity
          optimisation_parameters:
            - description: Maximum number of iterations of the SMACOF algorithm for a single
                run.
              kind_of_value: integer
              name: max_iterations
              optional: 'False'
              default_value: '300'
              path: max_iter
            - description: The number of jobs to use for the computation. If -1 all CPUs
                are used.
              kind_of_value: integer
              name: jobs
              optional: 'True'
              default_value: '1'
              path: n_jobs
            - description: Number of times the SMACOF algorithm will be run with different
                initializations. The final results will be the best output of the runs,
                determined by the run with the smallest final stress.
              kind_of_value: integer
              name: num_initializations
              optional: 'True'
              default_value: '4'
              path: n_init
        name: multidimensional scaling
        other_names:
          - MDS
        type: Dimensionality Reduction
    :manifold.spectral_embedding:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: The adjacency matrix of the graph to embed.
              kind_of_value: 'array-like or sparse matrix, shape: (n_samples, n_samples)'
              name: adjacency_matrix
              optional: 'False'
              default_value: ''
              path: adjacency
            - description: The dimension of the projection subspace.
              kind_of_value: integer
              name: num_components
              optional: 'True'
              default_value: '8'
              path: n_components
            - description: Solver for the eigenvalue decomposition.
              kind_of_value: '{''arpack'', ''lobpcg'', ''amg'', None}'
              name: eigen_solver
              optional: 'False'
              default_value: None
              path: eigen_solver
            - description: Stopping criterion for eigendecomposition of the Laplacian matrix.
              kind_of_value: float
              name: eigen_tol
              optional: 'True'
              default_value: '0.0'
              path: eigen_tol
            - description: If True, then compute normalized Laplacian.
              kind_of_value: boolean
              name: norm_laplacian
              optional: 'True'
              default_value: 'True'
              path: norm_laplacian
            - description: Whether to drop the first eigenvector. For spectral embedding,
                this should be True as the first eigenvector should be constant vector for
                connected graph, but for spectral clustering, this should be kept as False
                to retain the first eigenvector.
              kind_of_value: boolean
              name: drop_first
              optional: 'True'
              default_value: 'True'
              path: drop_first
          optimisation_parameters: []
        name: spectral embedding
        other_names: []
        type: Dimensionality Reduction
    :manifold.spectral_embedding_.SpectralEmbedding:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: The dimension of the projection subspace.
              kind_of_value: integer
              name: num_components
              optional: 'True'
              default_value: '8'
              path: n_components
            - description: How to construct the affinity matrix.
              kind_of_value: '{''nearest_neighbors'', ''rbf'', ''precomputed'', callable:
              use passed in function as affinity the function takes in data matrix (n_samples,
              n_features) and return affinity matrix (n_samples, n_samples)}'
              name: affinity_matrix
              optional: 'False'
              default_value: '''nearest_neighbors'''
              path: affinity
            - description: Kernel coefficient for rbf kernel.
              kind_of_value: '{float, None}'
              name: gamma
              optional: 'True'
              default_value: None
              path: gamma
            - description: Solver for the eigenvalue decomposition.
              kind_of_value: '{''arpack'', ''lobpcg'', ''amg'', None}'
              name: eigen_solver
              optional: 'False'
              default_value: None
              path: eigen_solver
            - description: Number of nearest neighbors for nearest_neighbors graph building.
              kind_of_value: '{integer, None}'
              name: num_neighbours
              optional: 'False'
              default_value: None
              path: n_neighbors
          optimisation_parameters:
            - description: The number of jobs to use for the computation. If -1 all CPUs
                are used.
              kind_of_value: integer
              name: jobs
              optional: 'True'
              default_value: '1'
              path: n_jobs
        name: object oriented spectral embedding
        other_names: []
        type: Dimensionality Reduction
    :manifold.t_sne.TSNE:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: The dimension of the projection subspace.
              kind_of_value: integer
              name: num_components
              optional: 'True'
              default_value: '2'
              path: n_components
            - description: The perplexity is related to the number of nearest neighbors
                that is used in other manifold learning algorithms. Larger datasets usually
                require a larger perplexity. Consider selecting a value between 5 and 50.
                The choice is not extremely critical since t-SNE is quite insensitive to
                this parameter.
              kind_of_value: float
              name: perplexity
              optional: 'True'
              default_value: '30'
              path: perplexity
            - description: Controls how tight natural clusters in the original space are
                in the embedded space and how much space will be between them. For larger
                values, the space between natural clusters will be larger in the embedded
                space. Again, the choice of this parameter is not very critical. If the
                cost function increases during initial optimization, the early exaggeration
                factor or the learning rate might be too high.
              kind_of_value: float
              name: early_exaggeration
              optional: 'True'
              default_value: '12.0'
              path: early_exaggeration
            - description: "The learning rate for t-SNE is usually in the range [10.0, 1000.0].\
              \ If the learning rate is too high, the data may look like a \u2018ball\u2019\
              \ with any point approximately equidistant from its nearest neighbours.\
              \ If the learning rate is too low, most points may look compressed in a\
              \ dense cloud with few outliers. If the cost function gets stuck in a bad\
              \ local minimum increasing the learning rate may help."
              kind_of_value: float
              name: learning_rate
              optional: 'True'
              default_value: '200.0'
              path: learning_rate
            - description: If the gradient norm is below this threshold, the optimization
                will be stopped.
              kind_of_value: float
              name: min_grad_norm
              optional: 'True'
              default_value: '0.0000001'
              path: min_grad_norm
            - description: The metric to use when calculating distance between instances
                in a feature array.
              kind_of_value: '{''cityblock'', ''cosine'', ''euclidean'', ''l1'', ''l2'',
              ''manhattan'', ''braycurtis'', ''canberra'', ''chebyshev'', ''correlation'',
              ''dice'', ''hamming'', ''jaccard'', ''kulsinski'', ''mahalanobis'', ''matching'',
              ''minkowski'', ''rogerstanimoto'', ''russellrao'', ''seuclidean'', ''sokalmichener'',
              ''sokalsneath'', ''sqeuclidean'', ''yule'', a callable that should take
              two arrays as input and return one value indicating the distance between
              them}'
              name: distance_metric
              optional: 'False'
              default_value: '''euclidean'''
              path: metric
            - description: Initialization of embedding.
              kind_of_value: '{''random'', ''pca'', numpy array of shape (n_samples, n_components)}'
              name: initialisation
              optional: 'True'
              default_value: '''random'''
              path: init
            - description: Controls the verbosity level.
              kind_of_value: integer
              name: verbose
              optional: 'True'
              default_value: '0'
              path: verbose
            - description: The seed of the pseudo random number generator to use when shuffling
                the data. If int, random_state is the seed used by the random number generator;
                If RandomState instance, random_state is the random number generator; If
                None, the random number generator is the RandomState instance used by np.random.
              kind_of_value: '{integer, RandomState instance, None}'
              name: random_state
              optional: 'True'
              default_value: None
              path: random_state
            - description: Gradient calculation algorithm optimisation.
              kind_of_value: '{''barnes_hut'', ''exact''}'
              name: optimisation_method
              optional: 'False'
              default_value: '''barnes_hut'''
              path: method
            - description: The angular size of a distant node as measured from a point.
                If this size is below 'angle' then it is used as a summary node of all points
                contained within it. This method is not very sensitive to changes in this
                parameter in the range of 0.2 - 0.8. Angle less than 0.2 has quickly increasing
                computation time and angle greater 0.8 has quickly increasing error.
              kind_of_value: float
              name: angle
              optional: 'False'
              default_value: '0.5'
              path: angle
          optimisation_parameters:
            - description: Maximum number of iterations for the optimization.
              kind_of_value: integer
              name: max_iterations
              optional: 'True'
              default_value: '1000'
              path: n_iter
            - description: Maximum number of iterations without progress before we abort
                the optimization, used after 250 initial iterations with early exaggeration.
                Note that progress is only checked every 50 iterations so this value is
                rounded to the next multiple of 50.
              kind_of_value: integer
              name: max_iterations_without_progress
              optional: 'True'
              default_value: '300'
              path: n_iter_without_progress
        name: t-distributed stochastic neighbor embedding
        other_names:
          - TSNE
          - t-SNE
        type: Dimensionality Reduction
    :mixture.bayesian_mixture.BayesianGaussianMixture:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: The number of mixture components.
              kind_of_value: integer
              name: num_components
              optional: 'False'
              default_value: '1'
              path: n_components
            - description: String describing the type of covariance parameters to use.
              kind_of_value: '{''full'', ''tied'', ''diag'', ''spherical''}'
              name: covariance_type
              optional: 'False'
              default_value: '''full'''
              path: covariance_type
            - description: The convergence threshold.
              kind_of_value: float
              name: tolerance
              optional: 'False'
              default_value: '0.001'
              path: tol
            - description: Non-negative regularization added to the diagonal of covariance.
                Allows to assure that the covariance matrices are all positive.
              kind_of_value: float
              name: reg_covariance
              optional: 'False'
              default_value: '0.000001'
              path: reg_covar
            - description: The method used to initialize the weights, the means and the
                precisions.
              kind_of_value: '{''kmeans'', ''random''}'
              name: init_params
              optional: 'False'
              default_value: '''kmeans'''
              path: init_params
            - description: String describing the type of the weight concentration prior.
              kind_of_value: '{''dirichlet_process'', ''dirichlet_distribution''}'
              name: weight_concentration_prior_type
              optional: 'False'
              default_value: '''dirichlet_process'''
              path: weight_concentration_prior_type
            - description: The dirichlet concentration of each component on the weight distribution
                (Dirichlet). This is commonly called gamma in the literature. The higher
                concentration puts more mass in the center and will lead to more components
                being active, while a lower concentration parameter will lead to more mass
                at the edge of the mixture weights simplex.
              kind_of_value: '{float > 0, None}'
              name: weight_concentration_prior
              optional: 'True'
              default_value: None
              path: weight_concentration_prior
            - description: The precision prior on the mean distribution (Gaussian). Controls
                the extend to where means can be placed. Smaller values concentrate the
                means of each clusters around mean_prior.
              kind_of_value: '{float > 0, None}'
              name: mean_precision_prior
              optional: 'True'
              default_value: None
              path: mean_precision_prior
            - description: The prior on the mean distribution (Gaussian).
              kind_of_value: '{array-like, shape (n_features, ), None}'
              name: mean_prior
              optional: 'True'
              default_value: None
              path: mean_prior
            - description: 'The prior of the number of degrees of freedom on the covariance
              distributions (Wishart). '
              kind_of_value: '{float, None}'
              name: degrees_of_freedom_prior
              optional: 'True'
              default_value: None
              path: degrees_of_freedom_prior
            - description: The user-provided initial precisions (inverse of the covariance
                matrices).
              kind_of_value: '{array-like depending on ''covariance_type'': float if ''spherical'',
              (n_features, n_features) if ''tied'', (n_features, ) if ''diag'',(n_features,
              n_features) if ''full'', None}'
              name: covariance_prior
              optional: 'True'
              default_value: None
              path: covariance_prior
            - description: The seed of the pseudo random number generator to use when shuffling
                the data. If int, random_state is the seed used by the random number generator;
                If RandomState instance, random_state is the random number generator; If
                None, the random number generator is the RandomState instance used by np.random.
              kind_of_value: '{integer, RandomState instance, None}'
              name: random_state
              optional: 'True'
              default_value: None
              path: random_state
            - description: When set to True, reuse the solution of the previous call to
                fit as initialization, otherwise, just erase the previous solution.
              kind_of_value: boolean
              name: reuse_previous
              optional: 'False'
              default_value: 'False'
              path: warm_start
            - description: Enable verbose output. If 1 then it prints the current initialization
                and each iteration step. If greater than 1 then it prints also the log probability
                and the time needed for each step.
              kind_of_value: integer
              name: verbose
              optional: 'False'
              default_value: '0'
              path: verbose
            - description: Number of iteration done before the next print.
              kind_of_value: integer
              name: verbose_interval
              optional: 'False'
              default_value: '10'
              path: verbose_interval
          optimisation_parameters:
            - description: Maximum number of iterations.
              kind_of_value: integer
              name: max_iterations
              optional: 'True'
              default_value: '100'
              path: max_iter
            - description: The number of initializations to perform. The best results are
                kept.
              kind_of_value: integer
              name: num_initializations
              optional: 'False'
              default_value: '1'
              path: n_init
        name: Bayesian Gaussian mixture
        other_names: []
        type: Clustering
    :mixture.gaussian_mixture.GaussianMixture:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: The number of mixture components.
              kind_of_value: integer
              name: num_components
              optional: 'False'
              default_value: '1'
              path: n_components
            - description: String describing the type of covariance parameters to use.
              kind_of_value: '{''full'', ''tied'', ''diag'', ''spherical''}'
              name: covariance_type
              optional: 'False'
              default_value: '''full'''
              path: covariance_type
            - description: The convergence threshold.
              kind_of_value: float
              name: tolerance
              optional: 'False'
              default_value: '0.001'
              path: tol
            - description: Non-negative regularization added to the diagonal of covariance.
                Allows to assure that the covariance matrices are all positive.
              kind_of_value: float
              name: reg_covariance
              optional: 'False'
              default_value: '0.000001'
              path: reg_covar
            - description: The method used to initialize the weights, the means and the
                precisions.
              kind_of_value: '{''kmeans'', ''random''}'
              name: init_params
              optional: 'False'
              default_value: '''kmeans'''
              path: init_params
            - description: The user-provided initial weights.
              kind_of_value: '{array-like, shape (n_components, ), None}'
              name: weights_init
              optional: 'True'
              default_value: None
              path: weights_init
            - description: The user-provided initial means.
              kind_of_value: '{array-like, shape (n_components,  n_features), None}'
              name: means_init
              optional: 'True'
              default_value: None
              path: means_init
            - description: The user-provided initial precisions (inverse of the covariance
                matrices).
              kind_of_value: '{array-like depending on ''covariance_type'': (n_components,)
              if ''spherical'', (n_features, n_features) if ''tied'', (n_components, n_features)
              if ''diag'',(n_components, n_features, n_features) if ''full'', None}'
              name: precisions_init
              optional: 'True'
              default_value: None
              path: precisions_init
            - description: The seed of the pseudo random number generator to use when shuffling
                the data. If int, random_state is the seed used by the random number generator;
                If RandomState instance, random_state is the random number generator; If
                None, the random number generator is the RandomState instance used by np.random.
              kind_of_value: '{integer, RandomState instance, None}'
              name: random_state
              optional: 'True'
              default_value: None
              path: random_state
            - description: When set to True, reuse the solution of the previous call to
                fit as initialization, otherwise, just erase the previous solution.
              kind_of_value: boolean
              name: reuse_previous
              optional: 'False'
              default_value: 'False'
              path: warm_start
            - description: Enable verbose output. If 1 then it prints the current initialization
                and each iteration step. If greater than 1 then it prints also the log probability
                and the time needed for each step.
              kind_of_value: integer
              name: verbose
              optional: 'False'
              default_value: '0'
              path: verbose
            - description: Number of iteration done before the next print.
              kind_of_value: integer
              name: verbose_interval
              optional: 'False'
              default_value: '10'
              path: verbose_interval
          optimisation_parameters:
            - description: Maximum number of iterations.
              kind_of_value: integer
              name: max_iterations
              optional: 'True'
              default_value: '100'
              path: max_iter
            - description: The number of initializations to perform. The best results are
                kept.
              kind_of_value: integer
              name: num_initializations
              optional: 'False'
              default_value: '1'
              path: n_init
        name: Gaussian mixture
        other_names: []
        type: Density Estimation
    :multiclass.OneVsOneClassifier:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: An estimator object implementing fit and either predict or decision.
              kind_of_value: estimator object
              name: estimator
              optional: 'False'
              default_value: ''
              path: estimator
          optimisation_parameters:
            - description: The number of jobs to use for the computation. If -1 all CPUs
                are used.
              kind_of_value: integer
              name: jobs
              optional: 'True'
              default_value: '1'
              path: n_jobs
        name: one vs one classifier
        other_names: []
        type: Classification
    :multiclass.OneVsRestClassifier:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: An estimator object implementing fit and either predict or decision.
              kind_of_value: estimator object
              name: estimator
              optional: 'False'
              default_value: ''
              path: estimator
          optimisation_parameters:
            - description: The number of jobs to use for the computation. If -1 all CPUs
                are used.
              kind_of_value: integer
              name: jobs
              optional: 'True'
              default_value: '1'
              path: n_jobs
        name: one vs rest classifier
        other_names:
          - one vs all classifier
        type: Classification
    :multiclass.OutputCodeClassifier:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: An estimator object implementing fit and either predict or decision.
              kind_of_value: estimator object
              name: estimator
              optional: 'False'
              default_value: ''
              path: estimator
            - description: Percentage of the number of classes to be used to create the
                code book. A number between 0 and 1 will require fewer classifiers than
                one-vs-the-rest. A number greater than 1 will require more classifiers than
                one-vs-the-rest.
              kind_of_value: float
              name: code_size
              optional: 'False'
              default_value: '1.5'
              path: code_size
            - description: The seed of the pseudo random number generator to use when shuffling
                the data. If int, random_state is the seed used by the random number generator;
                If RandomState instance, random_state is the random number generator; If
                None, the random number generator is the RandomState instance used by np.random.
              kind_of_value: '{integer, RandomState instance, None}'
              name: random_state
              optional: 'True'
              default_value: None
              path: random_state
          optimisation_parameters:
            - description: The number of jobs to use for the computation. If -1 all CPUs
                are used.
              kind_of_value: integer
              name: jobs
              optional: 'True'
              default_value: '1'
              path: n_jobs
        name: output code classifier
        other_names: []
        type: Classification
    :multioutput.ClassifierChain:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: The base estimator from which the classifier chain is built.
              kind_of_value: estimator
              name: base_estimator
              optional: 'False'
              default_value: ''
              path: base_estimator
            - description: Order in which the chain makes predictions about the columns
                in the label matrix Y.
              kind_of_value: '{array-like, shape=[n_outputs], ''random'', None}'
              name: prediction_order
              optional: 'True'
              default_value: None
              path: order
            - description: Determines the cross-validation splitting strategy.
              kind_of_value: '{integer, object (cross-validation generator),  iterable yielding
              train and test splits, None'
              name: cross_validation
              optional: 'True'
              default_value: None
              path: cv
            - description: The seed of the pseudo random number generator to use when shuffling
                the data. If int, random_state is the seed used by the random number generator;
                If RandomState instance, random_state is the random number generator; If
                None, the random number generator is the RandomState instance used by np.random.
              kind_of_value: '{integer, RandomState instance, None}'
              name: random_state
              optional: 'True'
              default_value: None
              path: random_state
          optimisation_parameters: []
        name: classifier chain
        other_names: []
        type: Classification
    :multioutput.MultiOutputRegressor:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: An estimator object implementing fit and predict.
              kind_of_value: estimator object
              name: estimator
              optional: 'False'
              default_value: ''
              path: estimator
          optimisation_parameters:
            - description: The number of jobs to use for the computation. If -1 all CPUs
                are used.
              kind_of_value: integer
              name: jobs
              optional: 'True'
              default_value: '1'
              path: n_jobs
        name: multi target regression
        other_names: []
        type: Regression
    :naive_bayes.BernoulliNB:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Additive (Laplace/Lidstone) smoothing parameter.
              kind_of_value: float
              name: smoothing parameter
              optional: 'True'
              default_value: '1.0'
              path: alpha
            - description: Threshold for binarizing (mapping to booleans) of sample features.
              kind_of_value: float
              name: binarizeing_threshold
              optional: 'True'
              default_value: '0.0'
              path: binarize
            - description: Whether to learn class prior probabilities or not.
              kind_of_value: boolean
              name: learn_prior_probabilities
              optional: 'True'
              default_value: 'True'
              path: fit_prior
            - description: Prior probabilities of the classes. If specified the priors are
                not adjusted according to the data.
              kind_of_value: array-like, shape (n_classes,)
              name: class_priors
              optional: 'False'
              default_value: None
              path: class_prior
          optimisation_parameters: []
        name: bernoulli naive bayes classifier
        other_names: []
        type: Classification
    :naive_bayes.GaussianNB:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Prior probabilities of the classes. If specified the priors are
                not adjusted according to the data.
              kind_of_value: array-like, shape (n_classes,)
              name: class_priors
              optional: 'False'
              default_value: None
              path: priors
          optimisation_parameters: []
        name: gaussian naive bayes
        other_names: []
        type: Classification
    :naive_bayes.MultinomialNB:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Additive (Laplace/Lidstone) smoothing parameter.
              kind_of_value: float
              name: smoothing parameter
              optional: 'True'
              default_value: '1.0'
              path: alpha
            - description: Whether to learn class prior probabilities or not.
              kind_of_value: boolean
              name: learn_prior_probabilities
              optional: 'True'
              default_value: 'True'
              path: fit_prior
            - description: Prior probabilities of the classes. If specified the priors are
                not adjusted according to the data.
              kind_of_value: array-like, shape (n_classes,)
              name: class_priors
              optional: 'False'
              default_value: None
              path: class_prior
          optimisation_parameters: []
        name: multinomial naive bayes classifier
        other_names: []
        type: Classification
    :neighbors.BallTree:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: n_samples is the number of points in the data set, and n_features
                is the dimension of the parameter space.
              kind_of_value: 'array, shape: [n_samples, n_features]'
              name: feature_matrix
              optional: 'False'
              default_value: ''
              path: X
            - description: The distance metric to use for the tree.
              kind_of_value: '{''seuclidean'', ''hamming'', ''dice'', ''jaccard'', ''matching'',
              ''russellrao'',  ''euclidean'', ''kulsinski'', ''wminkowski'', ''chebyshev'',
              ''mahalanobis'', ''sokalmichener'', ''rogerstanimoto'', ''infinity'', ''p'',
              ''canberra'',  ''haversine'', ''sokalsneath'', ''l1'', ''minkowski'', ''pyfunc'',
              ''l2'', ''cityblock'', ''braycurtis'', ''manhattan''}'
              name: distance_metric
              optional: 'False'
              default_value: '''minkowski'''
              path: metric
          optimisation_parameters:
            - description: Number of points at which to switch to brute-force. Changing
                leaf_size will not affect the results of a query, but can significantly
                impact the speed of a query and the memory required to store the constructed
                tree.
              kind_of_value: positive integer
              name: leaf_size
              optional: 'False'
              default_value: '40'
              path: leaf_size
        name: ball tree
        other_names: []
        type: Search Tree
    :neighbors.KDTree:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: n_samples is the number of points in the data set, and n_features
                is the dimension of the parameter space.
              kind_of_value: 'array, shape: [n_samples, n_features]'
              name: feature_matrix
              optional: 'False'
              default_value: ''
              path: X
            - description: The distance metric to use for the tree.
              kind_of_value: '{''p'', ''l1'', ''chebyshev'', ''manhattan'', ''minkowski'',
              ''cityblock'', ''l2'', ''euclidean'', ''infinity''}'
              name: distance_metric
              optional: 'False'
              default_value: '''minkowski'''
              path: metric
          optimisation_parameters:
            - description: Number of points at which to switch to brute-force. Changing
                leaf_size will not affect the results of a query, but can significantly
                impact the speed of a query and the memory required to store the constructed
                tree.
              kind_of_value: positive integer
              name: leaf_size
              optional: 'False'
              default_value: '40'
              path: leaf_size
        name: k-d tree
        other_names:
          - KDTree
          - k-dimensional tree
        type: Search Tree
    :neighbors.classification.KNeighborsClassifier:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Number of neighbors to use.
              kind_of_value: integer
              name: n_neighbors
              optional: 'True'
              default_value: '5'
              path: n_neighbors
            - description: Weight function used in prediction.
              kind_of_value: '{''uniform'', ''distance'', callable: a user-defined function
              which accepts an array of distances, and returns an array of the same shape
              containing the weights.}'
              name: weight_function
              optional: 'False'
              default_value: '''uniform'''
              path: weights
            - description: Algorithm used to compute the nearest neighbors.
              kind_of_value: '{''auto'', ''ball_tree'', ''kd_tree'', ''brute''}'
              name: nn_algorithm
              optional: 'True'
              default_value: '''auto'''
              path: algorithm
            - description: Leaf size passed to BallTree or KDTree. This can affect the speed
                of the construction and query, as well as the memory required to store the
                tree. The optimal value depends on the nature of the problem.
              kind_of_value: integer
              name: leaf_size
              optional: 'True'
              default_value: '30'
              path: leaf_size
            - description: Parameter for the Minkowski metric.
              kind_of_value: integer
              name: minkowski_parameter
              optional: 'True'
              default_value: '2'
              path: p
            - description: The distance metric to use for the tree.
              kind_of_value: '{''cityblock'', ''cosine'', ''euclidean'', ''l1'', ''l2'',
              ''manhattan'', ''braycurtis'', ''canberra'', ''chebyshev'', ''correlation'',
              ''dice'', ''hamming'', ''jaccard'', ''kulsinski'', ''mahalanobis'', ''matching'',
              ''minkowski'', ''rogerstanimoto'', ''russellrao'', ''seuclidean'', ''sokalmichener'',
              ''sokalsneath'', ''sqeuclidean'', ''yule'', a callable that should take
              two arrays as input and return one value indicating the distance between
              them}'
              name: distance_metric
              optional: 'False'
              default_value: '''minkowski'''
              path: metric
            - description: Additional keyword arguments for the metric function.
              kind_of_value: dict
              name: metric_parameters
              optional: 'True'
              default_value: None
              path: metric_params
          optimisation_parameters:
            - description: The number of jobs to use for the computation. If -1 all CPUs
                are used.
              kind_of_value: integer
              name: jobs
              optional: 'True'
              default_value: '1'
              path: n_jobs
        name: k-nn classifier
        other_names:
          - k-nearest neighbors classifier
        type: Classification
    :neighbors.classification.RadiusNeighborsClassifier:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Range of parameter space to use.
              kind_of_value: float
              name: radius
              optional: 'True'
              default_value: '1.0'
              path: radius
            - description: Weight function used in prediction.
              kind_of_value: '{''uniform'', ''distance'', callable: a user-defined function
              which accepts an array of distances, and returns an array of the same shape
              containing the weights.}'
              name: weight_function
              optional: 'False'
              default_value: '''uniform'''
              path: weights
            - description: Algorithm used to compute the nearest neighbors.
              kind_of_value: '{''auto'', ''ball_tree'', ''kd_tree'', ''brute''}'
              name: nn_algorithm
              optional: 'True'
              default_value: '''auto'''
              path: algorithm
            - description: Leaf size passed to BallTree or KDTree. This can affect the speed
                of the construction and query, as well as the memory required to store the
                tree. The optimal value depends on the nature of the problem.
              kind_of_value: integer
              name: leaf_size
              optional: 'True'
              default_value: '30'
              path: leaf_size
            - description: Parameter for the Minkowski metric.
              kind_of_value: integer
              name: minkowski_parameter
              optional: 'True'
              default_value: '2'
              path: p
            - description: The distance metric to use for the tree.
              kind_of_value: '{''cityblock'', ''cosine'', ''euclidean'', ''l1'', ''l2'',
              ''manhattan'', ''braycurtis'', ''canberra'', ''chebyshev'', ''correlation'',
              ''dice'', ''hamming'', ''jaccard'', ''kulsinski'', ''mahalanobis'', ''matching'',
              ''minkowski'', ''rogerstanimoto'', ''russellrao'', ''seuclidean'', ''sokalmichener'',
              ''sokalsneath'', ''sqeuclidean'', ''yule'', a callable that should take
              two arrays as input and return one value indicating the distance between
              them}'
              name: distance_metric
              optional: 'False'
              default_value: '''minkowski'''
              path: metric
            - description: Label, which is given for outlier samples (samples with no neighbors
                on given radius). If set to None, ValueError is raised, when outlier is
                detected.
              kind_of_value: '{integer, None}'
              name: outlier_label
              optional: 'True'
              default_value: None
              path: outlier_label
            - description: Additional keyword arguments for the metric function.
              kind_of_value: dict
              name: metric_parameters
              optional: 'True'
              default_value: None
              path: metric_params
          optimisation_parameters: []
        name: radius neighbors classifier
        other_names: []
        type: Classification
    :neighbors.kde.KernelDensity:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: The bandwidth of the kernel.
              kind_of_value: float
              name: bandwidth
              optional: 'True'
              default_value: '1.0'
              path: bandwidth
            - description: The tree algorithm to use.
              kind_of_value: '{''auto'', ''ball_tree'', ''kd_tree''}'
              name: algorithm
              optional: 'True'
              default_value: '''auto'''
              path: algorithm
            - description: The kernel to use.
              kind_of_value: '{''gaussian'', ''tophat'', ''epanechnikov'', ''exponential'',
              ''linear'', ''cosine''}'
              name: kernel
              optional: 'False'
              default_value: '''gaussian'''
              path: kernel
            - description: The distance metric to use.
              kind_of_value: '{''cityblock'', ''cosine'', ''euclidean'', ''l1'', ''l2'',
              ''manhattan'', ''braycurtis'', ''canberra'', ''chebyshev'', ''correlation'',
              ''dice'', ''hamming'', ''jaccard'', ''kulsinski'', ''mahalanobis'', ''matching'',
              ''minkowski'', ''rogerstanimoto'', ''russellrao'', ''seuclidean'', ''sokalmichener'',
              ''sokalsneath'', ''sqeuclidean'', ''yule'', a callable that should take
              two arrays as input and return one value indicating the distance between
              them}'
              name: distance_metric
              optional: 'False'
              default_value: '''euclidean'''
              path: metric
            - description: The desired absolute tolerance of the result. A larger tolerance
                will generally lead to faster execution. Default is 0.
              kind_of_value: float
              name: absolute_tolerance
              optional: 'False'
              default_value: '0'
              path: atol
            - description: The desired relative tolerance of the result. A larger tolerance
                will generally lead to faster execution.
              kind_of_value: float
              name: relative_tolerance
              optional: 'False'
              default_value: '0'
              path: rtol
            - description: If true (default), use a breadth-first approach to the problem.
                Otherwise use a depth-first approach.
              kind_of_value: boolean
              name: breadth_first
              optional: Fasle
              default_value: 'True'
              path: breadth_first
            - description: Leaf size passed to BallTree or KDTree. This can affect the speed
                of the construction and query, as well as the memory required to store the
                tree. The optimal value depends on the nature of the problem.
              kind_of_value: integer
              name: leaf_size
              optional: 'True'
              default_value: '40'
              path: leaf_size
            - description: Additional keyword arguments for the metric function.
              kind_of_value: '{dict, None}'
              name: metric_parameters
              optional: 'True'
              default_value: None
              path: metric_params
          optimisation_parameters: []
        name: kernel density
        other_names: []
        type: Density Estimation
    :neighbors.lof.LocalOutlierFactor:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Number of neighbors to use by default for kneighbors queries.
              kind_of_value: integer
              name: num_neighbours
              optional: 'True'
              default_value: '20'
              path: n_neighbors
            - description: The algorithm to be used by the NearestNeighbors module to compute
                pointwise distances and find nearest neighbors.
              kind_of_value: '{''auto'', ''ball_tree'', ''kd_tree'', ''brute''}'
              name: algorithm
              optional: 'True'
              default_value: '''auto'''
              path: algorithm
            - description: Leaf size passed to BallTree or KDTree. This can affect the speed
                of the construction and query, as well as the memory required to store the
                tree. The optimal value depends on the nature of the problem.
              kind_of_value: integer
              name: leaf_size
              optional: 'True'
              default_value: '30'
              path: leaf_size
            - description: The metric to use when calculating distance between instances
                in a feature array.
              kind_of_value: '{''cityblock'', ''cosine'', ''euclidean'', ''l1'', ''l2'',
              ''manhattan'', ''braycurtis'', ''canberra'', ''chebyshev'', ''correlation'',
              ''dice'', ''hamming'', ''jaccard'', ''kulsinski'', ''mahalanobis'', ''matching'',
              ''minkowski'', ''rogerstanimoto'', ''russellrao'', ''seuclidean'', ''sokalmichener'',
              ''sokalsneath'', ''sqeuclidean'', ''yule'', a callable that should take
              two arrays as input and return one value indicating the distance between
              them}'
              name: distance_metric
              optional: 'False'
              default_value: '''minkowski'''
              path: metric
            - description: Parameter for the Minkowski metric. When minkowski_parameter
                = 1, this is equivalent to using manhattan_distance (l1), and euclidean_distance
                (l2) for minkowski_parameter = 2. For arbitrary minkowski_parameter, minkowski_distance
                (l_p) is used.
              kind_of_value: '{integer, None}'
              name: minkowski_parameter
              optional: 'True'
              default_value: '2'
              path: p
            - description: Additional keyword arguments for the metric function.
              kind_of_value: '{dict, None}'
              name: metric_parameters
              optional: 'True'
              default_value: None
              path: metric_params
            - description: The amount of contamination of the data set, i.e. the proportion
                of outliers in the data set.
              kind_of_value: float in (0., 0.5)
              name: contamination
              optional: 'True'
              default_value: '0.1'
              path: contamination
          optimisation_parameters:
            - description: The number of jobs to use for the computation. If -1 all CPUs
                are used.
              kind_of_value: integer
              name: jobs
              optional: 'True'
              default_value: '1'
              path: n_jobs
        name: local outlier factor
        other_names:
          - LOF
        type: Outlier Detection
    :neighbors.nearest_centroid.NearestCentroid:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: The metric to use when calculating distance between instances
                in a feature array.
              kind_of_value: '{''cityblock'', ''cosine'', ''euclidean'', ''l1'', ''l2'',
              ''manhattan'', ''braycurtis'', ''canberra'', ''chebyshev'', ''correlation'',
              ''dice'', ''hamming'', ''jaccard'', ''kulsinski'', ''mahalanobis'', ''matching'',
              ''minkowski'', ''rogerstanimoto'', ''russellrao'', ''seuclidean'', ''sokalmichener'',
              ''sokalsneath'', ''sqeuclidean'', ''yule''}'
              name: distance_metric
              optional: 'False'
              default_value: '''euclidean'''''
              path: metric
            - description: Threshold for shrinking centroids to remove features.
              kind_of_value: '{float, None}'
              name: shrink_threshold
              optional: 'True'
              default_value: None
              path: shrink_threshold
          optimisation_parameters: []
        name: nearest centroid classifier
        other_names: []
        type: Classification
    :neighbors.regression.KNeighborsRegressor:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Number of neighbors to use.
              kind_of_value: integer
              name: n_neighbors
              optional: 'True'
              default_value: '5'
              path: n_neighbors
            - description: Weight function used in prediction.
              kind_of_value: '{''uniform'', ''distance'', callable: a user-defined function
              which accepts an array of distances, and returns an array of the same shape
              containing the weights.}'
              name: weight_function
              optional: 'False'
              default_value: '''uniform'''
              path: weights
            - description: Algorithm used to compute the nearest neighbors.
              kind_of_value: '{''auto'', ''ball_tree'', ''kd_tree'', ''brute''}'
              name: nn_algorithm
              optional: 'True'
              default_value: '''auto'''
              path: algorithm
            - description: Leaf size passed to BallTree or KDTree. This can affect the speed
                of the construction and query, as well as the memory required to store the
                tree. The optimal value depends on the nature of the problem.
              kind_of_value: integer
              name: leaf_size
              optional: 'True'
              default_value: '30'
              path: leaf_size
            - description: Parameter for the Minkowski metric.
              kind_of_value: integer
              name: minkowski_parameter
              optional: 'True'
              default_value: '2'
              path: p
            - description: The distance metric to use for the tree.
              kind_of_value: '{''cityblock'', ''cosine'', ''euclidean'', ''l1'', ''l2'',
              ''manhattan'', ''braycurtis'', ''canberra'', ''chebyshev'', ''correlation'',
              ''dice'', ''hamming'', ''jaccard'', ''kulsinski'', ''mahalanobis'', ''matching'',
              ''minkowski'', ''rogerstanimoto'', ''russellrao'', ''seuclidean'', ''sokalmichener'',
              ''sokalsneath'', ''sqeuclidean'', ''yule'', a callable that should take
              two arrays as input and return one value indicating the distance between
              them}'
              name: distance_metric
              optional: 'False'
              default_value: '''minkowski'''
              path: metric
            - description: Additional keyword arguments for the metric function.
              kind_of_value: dict
              name: metric_parameters
              optional: 'True'
              default_value: None
              path: metric_params
          optimisation_parameters:
            - description: The number of jobs to use for the computation. If -1 all CPUs
                are used.
              kind_of_value: integer
              name: jobs
              optional: 'True'
              default_value: '1'
              path: n_jobs
        name: k-nn regressor
        other_names:
          - k-nearest neighbors regressor
        type: Regression
    :neighbors.regression.RadiusNeighborsRegressor:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Range of parameter space to use.
              kind_of_value: float
              name: radius
              optional: 'True'
              default_value: '1.0'
              path: radius
            - description: Weight function used in prediction.
              kind_of_value: '{''uniform'', ''distance'', callable: a user-defined function
              which accepts an array of distances, and returns an array of the same shape
              containing the weights.}'
              name: weight_function
              optional: 'False'
              default_value: '''uniform'''
              path: weights
            - description: Algorithm used to compute the nearest neighbors.
              kind_of_value: '{''auto'', ''ball_tree'', ''kd_tree'', ''brute''}'
              name: nn_algorithm
              optional: 'True'
              default_value: '''auto'''
              path: algorithm
            - description: Leaf size passed to BallTree or KDTree. This can affect the speed
                of the construction and query, as well as the memory required to store the
                tree. The optimal value depends on the nature of the problem.
              kind_of_value: integer
              name: leaf_size
              optional: 'True'
              default_value: '30'
              path: leaf_size
            - description: Parameter for the Minkowski metric.
              kind_of_value: integer
              name: minkowski_parameter
              optional: 'True'
              default_value: '2'
              path: p
            - description: The distance metric to use for the tree.
              kind_of_value: '{''cityblock'', ''cosine'', ''euclidean'', ''l1'', ''l2'',
              ''manhattan'', ''braycurtis'', ''canberra'', ''chebyshev'', ''correlation'',
              ''dice'', ''hamming'', ''jaccard'', ''kulsinski'', ''mahalanobis'', ''matching'',
              ''minkowski'', ''rogerstanimoto'', ''russellrao'', ''seuclidean'', ''sokalmichener'',
              ''sokalsneath'', ''sqeuclidean'', ''yule'', a callable that should take
              two arrays as input and return one value indicating the distance between
              them}'
              name: distance_metric
              optional: 'False'
              default_value: '''minkowski'''
              path: metric
            - description: Additional keyword arguments for the metric function.
              kind_of_value: dict
              name: metric_parameters
              optional: 'True'
              default_value: None
              path: metric_params
          optimisation_parameters: []
        name: radius neighbors regressor
        other_names: []
        type: Regression
    :neighbors.unsupervised.NearestNeighbors:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Number of neighbors to use by default for kneighbors queries.
              kind_of_value: integer
              name: num_neighbours
              optional: 'True'
              default_value: '5'
              path: n_neighbors
            - description: Range of parameter space to use by default for radius_neighbors
                queries.
              kind_of_value: float
              name: radius
              optional: 'True'
              default_value: '1.0'
              path: radius
            - description: Algorithm used to compute the nearest neighbors.
              kind_of_value: '{''ball_tree'', ''kd_tree'', ''brute'', ''auto''}'
              name: algorithm
              optional: 'True'
              default_value: '''auto'''
              path: algorithm
            - description: Leaf size passed to BallTree or KDTree. This can affect the speed
                of the construction and query, as well as the memory required to store the
                tree. The optimal value depends on the nature of the problem.
              kind_of_value: integer
              name: leaf_size
              optional: 'True'
              default_value: '30'
              path: leaf_size
            - description: Metric to use for distance computation.
              kind_of_value: '{''cityblock'', ''cosine'', ''euclidean'', ''l1'', ''l2'',
              ''manhattan'', ''braycurtis'', ''canberra'', ''chebyshev'', ''correlation'',
              ''dice'', ''hamming'', ''jaccard'', ''kulsinski'', ''mahalanobis'', ''matching'',
              ''minkowski'', ''rogerstanimoto'', ''russellrao'', ''seuclidean'', ''sokalmichener'',
              ''sokalsneath'', ''sqeuclidean'', ''yule'', a callable that should take
              two arrays as input and return one value indicating the distance between
              them}'
              name: distance_metric
              optional: 'False'
              default_value: '''minkowski'''
              path: metric
            - description: Parameter for the Minkowski metric.
              kind_of_value: integer
              name: minkowski_parameter
              optional: 'True'
              default_value: '2'
              path: p
            - description: Additional keyword arguments for the metric function.
              kind_of_value: dict
              name: metric_parameters
              optional: 'True'
              default_value: None
              path: metric_params
          optimisation_parameters:
            - description: The number of jobs to use for the computation. If -1 all CPUs
                are used.
              kind_of_value: integer
              name: jobs
              optional: 'True'
              default_value: '1'
              path: n_jobs
        name: nearest neighbours
        other_names: []
        type: Clustering
    :neural_network.multilayer_perceptron.MLPClassifier:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: The ith element represents the number of neurons in the ith hidden
                layer.
              kind_of_value: tuple, length = n_layers - 2
              name: hidden_layer_sizes
              optional: 'False'
              default_value: (100,)
              path: hidden_layer_sizes
            - description: Activation function for the hidden layer.
              kind_of_value: ' {''identity'', ''logistic'', ''tanh'', ''relu''}'
              name: activation
              optional: 'False'
              default_value: '''relu'''
              path: activation
            - description: The solver for weight optimization.
              kind_of_value: '{''lbfgs'', ''sgd'', ''adam''}'
              name: solver
              optional: 'False'
              default_value: '''adam'''
              path: solver
            - description: L2 penalty (regularization term) parameter.
              kind_of_value: float
              name: l2_penalty
              optional: 'True'
              default_value: '0.0001'
              path: alpha
            - description: Size of minibatches for stochastic optimizers.
              kind_of_value: '{integer, ''auto''}'
              name: batch_size
              optional: 'True'
              default_value: '''auto'''
              path: batch_size
            - description: Learning rate schedule for weight updates.
              kind_of_value: '{''constant'', ''invscaling'', ''adaptive''}'
              name: learning_rate
              optional: 'False'
              default_value: '''constant'''
              path: learning_rate
            - description: The initial learning rate used. It controls the step-size in
                updating the weights.
              kind_of_value: double
              name: learning_rate_init
              optional: 'True'
              default_value: '0.001'
              path: learning_rate_init
            - description: The exponent for inverse scaling learning rate.
              kind_of_value: double
              name: inverse_scaling_exponent
              optional: 'True'
              default_value: '0.5'
              path: power_t
            - description: Whether to shuffle samples in each iteration.
              kind_of_value: boolean
              name: shuffle
              optional: 'True'
              default_value: 'True'
              path: shuffle
            - description: The seed of the pseudo random number generator to use when shuffling
                the data. If int, random_state is the seed used by the random number generator;
                If RandomState instance, random_state is the random number generator; If
                None, the random number generator is the RandomState instance used by np.random.
              kind_of_value: '{integer, RandomState instance, None}'
              name: random_state
              optional: 'True'
              default_value: None
              path: random_state
            - description: Precision of the solution. (The tolerance for the optimisation.)
              kind_of_value: float
              name: tolerance
              optional: 'True'
              default_value: '0.0001'
              path: tol
            - description: Whether to print progress messages to stdout.
              kind_of_value: boolean
              name: verbose
              optional: 'True'
              default_value: 'False'
              path: verbose
            - description: When set to True, reuse the solution of the previous call to
                fit as initialization, otherwise, just erase the previous solution.
              kind_of_value: boolean
              name: reuse_previous
              optional: 'True'
              default_value: 'False'
              path: warm_start
            - description: Momentum for gradient descent update.
              kind_of_value: float
              name: gradient_momentum
              optional: 'False'
              default_value: '0.9'
              path: momentum
            - description: "Whether to use Nesterov\u2019s momentum."
              kind_of_value: boolean
              name: nesterovs_momentum
              optional: 'False'
              default_value: 'True'
              path: nesterovs_momentum
            - description: Whether to use early stopping to terminate training when validation
                score is not improving. If set to true, it will automatically set aside
                10% of training data as validation and terminate training when validation
                score is not improving by at least tol for two consecutive epochs.
              kind_of_value: boolean
              name: early_stopping
              optional: 'False'
              default_value: Flase
              path: early_stopping
            - description: The proportion of training data to set aside as validation set
                for early stopping.
              kind_of_value: float between 0 and 1
              name: validation_fraction
              optional: 'True'
              default_value: '0.1'
              path: validation_fraction
            - description: Exponential decay rate for estimates of first moment vector in
                adam.
              kind_of_value: float should be in [0, 1)
              name: adam_beta_1
              optional: 'True'
              default_value: '0.9'
              path: beta_1
            - description: Exponential decay rate for estimates of second moment vector
                in adam.
              kind_of_value: float should be in [0, 1)
              name: adam_beta_2
              optional: 'True'
              default_value: '0.999'
              path: beta_2
            - description: Value for numerical stability in adam.
              kind_of_value: float
              name: adam_epsilon
              optional: 'True'
              default_value: '0.00000001'
              path: epsilon
          optimisation_parameters:
            - description: Maximum number of iterations.
              kind_of_value: integer
              name: max_iterations
              optional: 'True'
              default_value: '200'
              path: max_iter
        name: multi-layer perceptron classifier
        other_names:
          - MLP classifier
        type: Classification
    :neural_network.multilayer_perceptron.MLPRegressor:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: The ith element represents the number of neurons in the ith hidden
                layer.
              kind_of_value: tuple, length = n_layers - 2
              name: hidden_layer_sizes
              optional: 'False'
              default_value: (100,)
              path: hidden_layer_sizes
            - description: Activation function for the hidden layer.
              kind_of_value: ' {''identity'', ''logistic'', ''tanh'', ''relu''}'
              name: activation
              optional: 'False'
              default_value: '''relu'''
              path: activation
            - description: The solver for weight optimization.
              kind_of_value: '{''lbfgs'', ''sgd'', ''adam''}'
              name: solver
              optional: 'False'
              default_value: '''adam'''
              path: solver
            - description: L2 penalty (regularization term) parameter.
              kind_of_value: float
              name: l2_penalty
              optional: 'True'
              default_value: '0.0001'
              path: alpha
            - description: Size of minibatches for stochastic optimizers.
              kind_of_value: '{integer, ''auto''}'
              name: batch_size
              optional: 'True'
              default_value: '''auto'''
              path: batch_size
            - description: Learning rate schedule for weight updates.
              kind_of_value: '{''constant'', ''invscaling'', ''adaptive''}'
              name: learning_rate
              optional: 'False'
              default_value: '''constant'''
              path: learning_rate
            - description: The initial learning rate used. It controls the step-size in
                updating the weights.
              kind_of_value: double
              name: learning_rate_init
              optional: 'True'
              default_value: '0.001'
              path: learning_rate_init
            - description: The exponent for inverse scaling learning rate.
              kind_of_value: double
              name: inverse_scaling_exponent
              optional: 'True'
              default_value: '0.5'
              path: power_t
            - description: Whether to shuffle samples in each iteration.
              kind_of_value: boolean
              name: shuffle
              optional: 'True'
              default_value: 'True'
              path: shuffle
            - description: The seed of the pseudo random number generator to use when shuffling
                the data. If int, random_state is the seed used by the random number generator;
                If RandomState instance, random_state is the random number generator; If
                None, the random number generator is the RandomState instance used by np.random.
              kind_of_value: '{integer, RandomState instance, None}'
              name: random_state
              optional: 'True'
              default_value: None
              path: random_state
            - description: Precision of the solution. (The tolerance for the optimisation.)
              kind_of_value: float
              name: tolerance
              optional: 'True'
              default_value: '0.0001'
              path: tol
            - description: Whether to print progress messages to stdout.
              kind_of_value: boolean
              name: verbose
              optional: 'True'
              default_value: 'False'
              path: verbose
            - description: When set to True, reuse the solution of the previous call to
                fit as initialization, otherwise, just erase the previous solution.
              kind_of_value: boolean
              name: reuse_previous
              optional: 'True'
              default_value: 'False'
              path: warm_start
            - description: Momentum for gradient descent update.
              kind_of_value: float
              name: gradient_momentum
              optional: 'False'
              default_value: '0.9'
              path: momentum
            - description: "Whether to use Nesterov\u2019s momentum."
              kind_of_value: boolean
              name: nesterovs_momentum
              optional: 'False'
              default_value: 'True'
              path: nesterovs_momentum
            - description: Whether to use early stopping to terminate training when validation
                score is not improving. If set to true, it will automatically set aside
                10% of training data as validation and terminate training when validation
                score is not improving by at least tol for two consecutive epochs.
              kind_of_value: boolean
              name: early_stopping
              optional: Flase
              default_value: Flase
              path: early_stopping
            - description: The proportion of training data to set aside as validation set
                for early stopping.
              kind_of_value: float between 0 and 1
              name: validation_fraction
              optional: 'True'
              default_value: '0.1'
              path: validation_fraction
            - description: Exponential decay rate for estimates of first moment vector in
                adam.
              kind_of_value: float should be in [0, 1)
              name: adam_beta_1
              optional: 'True'
              default_value: '0.9'
              path: beta_1
            - description: Exponential decay rate for estimates of second moment vector
                in adam.
              kind_of_value: float should be in [0, 1)
              name: adam_beta_2
              optional: 'True'
              default_value: '0.999'
              path: beta_2
            - description: Value for numerical stability in adam.
              kind_of_value: float
              name: adam_epsilon
              optional: 'True'
              default_value: '0.00000001'
              path: epsilon
          optimisation_parameters:
            - description: Maximum number of iterations.
              kind_of_value: integer
              name: max_iterations
              optional: 'True'
              default_value: '200'
              path: max_iter
        name: multi-layer perceptron regressor
        other_names:
          - MLP regressor
        type: Regression
    :neural_network.rbm.BernoulliRBM:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Number of binary hidden units.
              kind_of_value: integer
              name: num_components
              optional: 'True'
              default_value: '256'
              path: n_components
            - description: The learning rate for weight updates.
              kind_of_value: float
              name: learning_rate
              optional: 'True'
              default_value: '0.1'
              path: learning_rate
            - description: Number of examples per minibatch.
              kind_of_value: integer
              name: batch_size
              optional: 'True'
              default_value: '10'
              path: batch_size
            - description: he verbosity level. The default, zero, means silent mode.
              kind_of_value: integer
              name: verbose
              optional: 'True'
              default_value: '0'
              path: verbose
            - description: A random number generator instance to define the state of the
                random permutations generator. If an integer is given, it fixes the seed.
                Defaults to the global numpy random number generator.
              kind_of_value: '{integer, RandomState instance, None}'
              name: random_state
              optional: 'True'
              default_value: None
              path: random_state
          optimisation_parameters:
            - description: Number of iterations/sweeps over the training dataset to perform
                during training.
              kind_of_value: integer
              name: num_iter
              optional: 'True'
              default_value: '10'
              path: n_iter
        name: Bernoulli restricted Boltzmann machines
        other_names:
          - Bernoulli RBM
        type: Unsupervised Neural Network Model
    :semi_supervised.label_propagation.LabelPropagation:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Specifies the kernel type to be used in the algorithm.
              kind_of_value: '{''knn'', ''rbf'', a callable taking two inputs in shape (n_samples,
              n_features) and returns weight matrix in shape [n_samples, n_samples]}'
              name: kernel
              optional: 'False'
              default_value: '''rbf'''
              path: kernel
            - description: Parameter for rbf kernel
              kind_of_value: float
              name: rbf_parameter
              optional: 'False'
              default_value: '20'
              path: gamma
            - description: Number of neighbors to use by for knn kernel.
              kind_of_value: integer > 0
              name: num_neighbours
              optional: 'True'
              default_value: '7'
              path: n_neighbors
            - description: 'Convergence tolerance: threshold to consider the system at steady
              state'
              kind_of_value: float
              name: tolerance
              optional: 'False'
              default_value: '0.001'
              path: tol
          optimisation_parameters:
            - description: Maximum number of iterations.
              kind_of_value: integer
              name: max_iterations
              optional: 'False'
              default_value: '1000'
              path: max_iter
            - description: The number of jobs to use for the computation. If -1 all CPUs
                are used.
              kind_of_value: integer
              name: jobs
              optional: 'True'
              default_value: '1'
              path: n_jobs
        name: label propagation
        other_names: []
        type: Classification
    :semi_supervised.label_propagation.LabelSpreading:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Specifies the kernel type to be used in the algorithm.
              kind_of_value: '{''knn'', ''rbf'', a callable taking two inputs in shape (n_samples,
              n_features) and returns weight matrix in shape [n_samples, n_samples]}'
              name: kernel
              optional: 'False'
              default_value: '''rbf'''
              path: kernel
            - description: Parameter for rbf kernel
              kind_of_value: float
              name: rbf_parameter
              optional: 'False'
              default_value: '20'
              path: gamma
            - description: Number of neighbors to use by for knn kernel.
              kind_of_value: integer > 0
              name: num_neighbours
              optional: 'True'
              default_value: '7'
              path: n_neighbors
            - description: Clamping factor. A value in [0, 1] that specifies the relative
                amount that an instance should adopt the information from its neighbors
                as opposed to its initial label. 0 means  keeping the initial label information;
                1 means replacing all initial information.
              kind_of_value: float in [0,1]
              name: calmping_factor
              optional: 'False'
              default_value: '0.2'
              path: alpha
            - description: 'Convergence tolerance: threshold to consider the system at steady
              state'
              kind_of_value: float
              name: tolerance
              optional: 'False'
              default_value: '0.001'
              path: tol
          optimisation_parameters:
            - description: Maximum number of iterations.
              kind_of_value: integer
              name: max_iterations
              optional: 'False'
              default_value: '30'
              path: max_iter
            - description: The number of jobs to use for the computation. If -1 all CPUs
                are used.
              kind_of_value: integer
              name: jobs
              optional: 'True'
              default_value: '1'
              path: n_jobs
        name: label spreading
        other_names: []
        type: Classification
    :svm.classes.LinearSVC:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Specifies the norm used in the penalization.
              kind_of_value: '{''l1'', ''l2''}'
              name: penalty_norm
              optional: 'False'
              default_value: '''l2'''
              path: penalty
            - description: The loss function to be used.
              kind_of_value: '{''hinge'', ''squared_hinge''}'
              name: loss_function
              optional: 'False'
              default_value: '''squared_hinge'''
              path: loss
            - description: Select the algorithm to either solve the dual or primal optimization
                problem.
              kind_of_value: boolean
              name: dual
              optional: 'False'
              default_value: 'True'
              path: dual
            - description: Tolerance for stopping criteria.
              kind_of_value: float
              name: tolerance
              optional: 'True'
              default_value: '0.0001'
              path: tol
            - description: Penalty parameter of the error term.
              kind_of_value: float
              name: error_penalty
              optional: 'True'
              default_value: '1.0'
              path: C
            - description: Determines the multi-class strategy if y contains more than two
                classes.
              kind_of_value: '{''ovr'', ''crammer_singer''}'
              name: multi_class_strategy
              optional: 'False'
              default_value: '''ovr'''
              path: multi_class
            - description: Whether to calculate the intercept for this model.
              kind_of_value: boolean
              name: fit_intercept
              optional: 'True'
              default_value: 'True'
              path: fit_intercept
            - description: "Useful only when the solver \u2018liblinear\u2019 is used and\
              \ self.fit_intercept is set to True. In this case, x becomes [x, self.intercept_scaling],\
              \ i.e. a \u201Csynthetic\u201D feature with constant value equal to intercept_scaling\
              \ is appended to the instance vector. The intercept becomes intercept_scaling\
              \ * synthetic_feature_weight."
              kind_of_value: float
              name: intercept_scaling
              optional: 'False'
              default_value: '1'
              path: intercept_scaling
            - description: "Weights the classes. The \u201Cbalanced\u201D mode uses the\
              \ values of y to automatically adjust weights inversely proportional to\
              \ class frequencies in the input data as n_samples / (n_classes * np.bincount(y))."
              kind_of_value: '{dictionary with weights for all calsses, ''balanced'', None}'
              name: class_weight
              optional: 'True'
              default_value: None
              path: class_weight
            - description: Enable verbose output.
              kind_of_value: integer
              name: verbose
              optional: 'False'
              default_value: '0'
              path: verbose
            - description: The seed of the pseudo random number generator to use when shuffling
                the data. If int, random_state is the seed used by the random number generator;
                If RandomState instance, random_state is the random number generator; If
                None, the random number generator is the RandomState instance used by np.random.
              kind_of_value: '{integer, RandomState instance, None}'
              name: random_state
              optional: 'True'
              default_value: None
              path: random_state
          optimisation_parameters:
            - description: The maximum number of iterations to be run.
              kind_of_value: integer
              name: max_iterations
              optional: 'False'
              default_value: '1000'
              path: max_iter
        name: linear-support vector classification
        other_names:
          - linear SVC
        type: Classification
    :svm.classes.LinearSVR:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Penalty parameter of the error term.
              kind_of_value: float
              name: error_penalty
              optional: 'True'
              default_value: '1.0'
              path: C
            - description: The loss function to be used.
              kind_of_value: '{''epsilon_insensitive'', ''squared_epsilon_insensitive''}'
              name: loss_function
              optional: 'False'
              default_value: '''epsilon_insensitive'''
              path: loss
            - description: Epsilon parameter in the epsilon-insensitive loss function. Note
                that the value of this parameter depends on the scale of the target variable
                y.
              kind_of_value: float
              name: epsilon
              optional: 'True'
              default_value: '0.0'
              path: epsilon
            - description: Select the algorithm to either solve the dual or primal optimization
                problem.
              kind_of_value: boolean
              name: dual
              optional: 'False'
              default_value: 'True'
              path: dual
            - description: Tolerance for stopping criterion.
              kind_of_value: float
              name: tolerance
              optional: 'True'
              default_value: '0.0001'
              path: tol
            - description: Whether to calculate the intercept for this model.
              kind_of_value: boolean
              name: fit_intercept
              optional: 'True'
              default_value: 'True'
              path: fit_intercept
            - description: "When self.fit_intercept is True, instance vector x becomes [x,\
              \ self.intercept_scaling], i.e. a \u201Csynthetic\u201D feature with constant\
              \ value equals to intercept_scaling is appended to the instance vector.\
              \ The intercept becomes intercept_scaling * synthetic feature weight Note!\
              \ the synthetic feature weight is subject to l1/l2 regularization as all\
              \ other features. To lessen the effect of regularization on synthetic feature\
              \ weight (and therefore on the intercept) intercept_scaling has to be increased."
              kind_of_value: float
              name: intercept_scaling
              optional: 'True'
              default_value: '1'
              path: intercept_scaling
            - description: Enable verbose output.
              kind_of_value: integer
              name: verbose
              optional: 'False'
              default_value: '0'
              path: verbose
            - description: The seed of the pseudo random number generator to use when shuffling
                the data. If int, random_state is the seed used by the random number generator;
                If RandomState instance, random_state is the random number generator; If
                None, the random number generator is the RandomState instance used by np.random.
              kind_of_value: '{integer, RandomState instance, None}'
              name: random_state
              optional: 'True'
              default_value: None
              path: random_state
          optimisation_parameters:
            - description: The maximum number of iterations to be run.
              kind_of_value: integer
              name: max_iterations
              optional: 'False'
              default_value: '1000'
              path: max_iter
        name: linear-support vector regression
        other_names:
          - linearSVR
        type: Regression
    :svm.classes.NuSVC:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: An upper bound on the fraction of training errors and a lower
                bound of the fraction of support vectors. Should be in the interval (0,
                1].
              kind_of_value: float (0, 1]
              name: nu
              optional: 'True'
              default_value: '0.5'
              path: nu
            - description: Specifies the kernel type to be used in the algorithm.
              kind_of_value: '{''linear'', ''poly'', ''rbf'', ''sigmoid'', ''precomputed'',
              a callable in shape (n_samples, n_samples)}'
              name: kernel
              optional: 'True'
              default_value: '''rbf'''
              path: kernel
            - description: 'Degree of the polynomial kernel function (''poly''). '
              kind_of_value: integer
              name: poly_degree
              optional: 'True'
              default_value: '3'
              path: degree
            - description: Kernel coefficient for 'rbf', 'poly' and 'sigmoid'. If kernel_coefficient
                is 'auto' then 1/n_features will be used instead.
              kind_of_value: '{float, ''auto''}'
              name: kernel_coefficient
              optional: 'True'
              default_value: '''auto'''
              path: gamma
            - description: Independent term in kernel function. It is only significant in
                'poly' and 'sigmoid'.
              kind_of_value: float
              name: independent_kernel_term
              optional: 'True'
              default_value: '0.0'
              path: coef0
            - description: Whether to use the shrinking heuristic.
              kind_of_value: boolean
              name: shrinking
              optional: 'True'
              default_value: 'True'
              path: shrinking
            - description: Whether to enable probability estimates. This must be enabled
                prior to calling fit, and will slow down that method.
              kind_of_value: boolean
              name: probability
              optional: 'True'
              default_value: 'False'
              path: probability
            - description: Tolerance for stopping criterion.
              kind_of_value: float
              name: tolerance
              optional: 'True'
              default_value: '0.001'
              path: tol
            - description: "Weights the classes. The \u201Cbalanced\u201D mode uses the\
              \ values of y to automatically adjust weights inversely proportional to\
              \ class frequencies in the input data as n_samples / (n_classes * np.bincount(y))."
              kind_of_value: '{dictionary with weights for all calsses, ''balanced'', None}'
              name: class_weight
              optional: 'True'
              default_value: None
              path: class_weight
            - description: Enable verbose output.
              kind_of_value: boolean
              name: verbose
              optional: 'True'
              default_value: 'False'
              path: verbose
            - description: Whether to return a one-vs-rest ('ovr') decision function of
                shape (n_samples, n_classes) as all other classifiers, or the original one-vs-one
                ('ovo') decision function of libsvm which has shape (n_samples, n_classes
                * (n_classes - 1) / 2).
              kind_of_value: '{''ovo'', ''ovr''}'
              name: decision_function_shape
              optional: 'False'
              default_value: 'False'
              path: decision_function_shape
            - description: The seed of the pseudo random number generator to use when shuffling
                the data. If int, random_state is the seed used by the random number generator;
                If RandomState instance, random_state is the random number generator; If
                None, the random number generator is the RandomState instance used by np.random.
              kind_of_value: '{integer, RandomState instance, None}'
              name: random_state
              optional: 'True'
              default_value: None
              path: random_state
          optimisation_parameters:
            - description: Specify the size of the kernel cache (in MB).
              kind_of_value: float
              name: cache_size
              optional: 'True'
              default_value: '200'
              path: cache_size
            - description: Hard limit on iterations within solver, or -1 for no limit.
              kind_of_value: integer
              name: max_iterations
              optional: 'True'
              default_value: '-1'
              path: max_iter
        name: nu-support vector classification
        other_names:
          - nuSVC
        type: Classification
    :svm.classes.NuSVR:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Penalty parameter of the error term.
              kind_of_value: float
              name: error_penalty
              optional: 'True'
              default_value: '1.0'
              path: C
            - description: An upper bound on the fraction of training errors and a lower
                bound of the fraction of support vectors. Should be in the interval (0,
                1].
              kind_of_value: float (0, 1]
              name: nu
              optional: 'True'
              default_value: '0.5'
              path: nu
            - description: Specifies the kernel type to be used in the algorithm.
              kind_of_value: '{''linear'', ''poly'', ''rbf'', ''sigmoid'', ''precomputed'',
              a callable in shape (n_samples, n_samples)}'
              name: kernel
              optional: 'True'
              default_value: '''rbf'''
              path: kernel
            - description: 'Degree of the polynomial kernel function (''poly''). '
              kind_of_value: integer
              name: poly_degree
              optional: 'True'
              default_value: '3'
              path: degree
            - description: Kernel coefficient for 'rbf', 'poly' and 'sigmoid'. If kernel_coefficient
                is 'auto' then 1/n_features will be used instead.
              kind_of_value: '{float, ''auto''}'
              name: kernel_coefficient
              optional: 'True'
              default_value: '''auto'''
              path: gamma
            - description: Independent term in kernel function. It is only significant in
                'poly' and 'sigmoid'.
              kind_of_value: float
              name: independent_kernel_term
              optional: 'True'
              default_value: '0.0'
              path: coef0
            - description: Whether to use the shrinking heuristic.
              kind_of_value: boolean
              name: shrinking
              optional: 'True'
              default_value: 'True'
              path: shrinking
            - description: Tolerance for stopping criterion.
              kind_of_value: float
              name: tolerance
              optional: 'True'
              default_value: '0.001'
              path: tol
            - description: Enable verbose output.
              kind_of_value: boolean
              name: verbose
              optional: 'False'
              default_value: 'False'
              path: verbose
          optimisation_parameters:
            - description: Specify the size of the kernel cache (in MB).
              kind_of_value: float
              name: cache_size
              optional: 'True'
              default_value: '200'
              path: cache_size
            - description: Hard limit on iterations within solver, or -1 for no limit.
              kind_of_value: integer
              name: max_iterations
              optional: 'True'
              default_value: '-1'
              path: max_iter
        name: nu-support vector regression
        other_names:
          - nuSVR
        type: Regression
    :svm.classes.OneClassSVM:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: An upper bound on the fraction of training errors and a lower
                bound of the fraction of support vectors. Should be in the interval (0,
                1].
              kind_of_value: float (0, 1]
              name: nu
              optional: 'True'
              default_value: '0.5'
              path: nu
            - description: Specifies the kernel type to be used in the algorithm.
              kind_of_value: '{''linear'', ''poly'', ''rbf'', ''sigmoid'', ''precomputed'',
              a callable in shape (n_samples, n_samples)}'
              name: kernel
              optional: 'True'
              default_value: '''rbf'''
              path: kernel
            - description: 'Degree of the polynomial kernel function (''poly''). '
              kind_of_value: integer
              name: poly_degree
              optional: 'True'
              default_value: '3'
              path: degree
            - description: Kernel coefficient for 'rbf', 'poly' and 'sigmoid'. If kernel_coefficient
                is 'auto' then 1/n_features will be used instead.
              kind_of_value: '{float, ''auto''}'
              name: kernel_coefficient
              optional: 'True'
              default_value: '''auto'''
              path: gamma
            - description: Independent term in kernel function. It is only significant in
                'poly' and 'sigmoid'.
              kind_of_value: float
              name: independent_kernel_term
              optional: 'True'
              default_value: '0.0'
              path: coef0
            - description: Whether to use the shrinking heuristic.
              kind_of_value: boolean
              name: shrinking
              optional: 'True'
              default_value: 'True'
              path: shrinking
            - description: Tolerance for stopping criterion.
              kind_of_value: float
              name: tolerance
              optional: 'True'
              default_value: '0.001'
              path: tol
            - description: Enable verbose output.
              kind_of_value: boolean
              name: verbose
              optional: 'False'
              default_value: 'False'
              path: verbose
            - description: The seed of the pseudo random number generator to use when shuffling
                the data. If int, random_state is the seed used by the random number generator;
                If RandomState instance, random_state is the random number generator; If
                None, the random number generator is the RandomState instance used by np.random.
              kind_of_value: '{integer, RandomState instance, None}'
              name: random_state
              optional: 'True'
              default_value: None
              path: random_state
          optimisation_parameters:
            - description: Specify the size of the kernel cache (in MB).
              kind_of_value: float
              name: cache_size
              optional: 'True'
              default_value: '200'
              path: cache_size
            - description: Hard limit on iterations within solver, or -1 for no limit.
              kind_of_value: integer
              name: max_iterations
              optional: 'True'
              default_value: '-1'
              path: max_iter
        name: one-class support vector machine
        other_names:
          - one-calss SVM
        type: Outlier Detection
    :svm.classes.SVC:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Penalty parameter of the error term.
              kind_of_value: float
              name: error_penalty
              optional: 'True'
              default_value: '1.0'
              path: C
            - description: Specifies the kernel type to be used in the algorithm.
              kind_of_value: '{''linear'', ''poly'', ''rbf'', ''sigmoid'', ''precomputed'',
              a callable in shape (n_samples, n_samples)}'
              name: kernel
              optional: 'True'
              default_value: '''rbf'''
              path: kernel
            - description: 'Degree of the polynomial kernel function (''poly''). '
              kind_of_value: integer
              name: poly_degree
              optional: 'True'
              default_value: '3'
              path: degree
            - description: Kernel coefficient for 'rbf', 'poly' and 'sigmoid'. If kernel_coefficient
                is 'auto' then 1/n_features will be used instead.
              kind_of_value: '{float, ''auto''}'
              name: kernel_coefficient
              optional: 'True'
              default_value: '''auto'''
              path: gamma
            - description: Independent term in kernel function. It is only significant in
                'poly' and 'sigmoid'.
              kind_of_value: float
              name: independent_kernel_term
              optional: 'True'
              default_value: '0.0'
              path: coef0
            - description: Whether to enable probability estimates. This must be enabled
                prior to calling fit, and will slow down that method.
              kind_of_value: boolean
              name: probability
              optional: 'True'
              default_value: 'False'
              path: probability
            - description: Whether to use the shrinking heuristic.
              kind_of_value: boolean
              name: shrinking
              optional: 'True'
              default_value: 'True'
              path: shrinking
            - description: Tolerance for stopping criterion.
              kind_of_value: float
              name: tolerance
              optional: 'True'
              default_value: '0.001'
              path: tol
            - description: "Weights the classes. The \u201Cbalanced\u201D mode uses the\
              \ values of y to automatically adjust weights inversely proportional to\
              \ class frequencies in the input data as n_samples / (n_classes * np.bincount(y))."
              kind_of_value: '{dictionary with weights for all calsses, ''balanced'', None}'
              name: class_weight
              optional: 'True'
              default_value: None
              path: class_weight
            - description: Enable verbose output.
              kind_of_value: boolean
              name: verbose
              optional: 'True'
              default_value: 'False'
              path: verbose
            - description: Whether to return a one-vs-rest ('ovr') decision function of
                shape (n_samples, n_classes) as all other classifiers, or the original one-vs-one
                ('ovo') decision function of libsvm which has shape (n_samples, n_classes
                * (n_classes - 1) / 2).
              kind_of_value: '{''ovo'', ''ovr''}'
              name: decision_function_shape
              optional: 'False'
              default_value: 'False'
              path: decision_function_shape
            - description: The seed of the pseudo random number generator to use when shuffling
                the data. If int, random_state is the seed used by the random number generator;
                If RandomState instance, random_state is the random number generator; If
                None, the random number generator is the RandomState instance used by np.random.
              kind_of_value: '{integer, RandomState instance, None}'
              name: random_state
              optional: 'True'
              default_value: None
              path: random_state
          optimisation_parameters:
            - description: Specify the size of the kernel cache (in MB).
              kind_of_value: float
              name: cache_size
              optional: 'True'
              default_value: '200'
              path: cache_size
            - description: Hard limit on iterations within solver, or -1 for no limit.
              kind_of_value: integer
              name: max_iterations
              optional: 'True'
              default_value: '-1'
              path: max_iter
        name: c-oja pas vector classification
        other_names:
          - SVC
        type: Classification
    :svm.classes.SVR:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: Penalty parameter of the error term.
              kind_of_value: float
              name: error_penalty
              optional: 'True'
              default_value: '1.0'
              path: C
            - description: Epsilon in the epsilon-SVR model. It specifies the epsilon-tube
                within which no penalty is associated in the training loss function with
                points predicted within a distance epsilon from the actual value.
              kind_of_value: float
              name: epsilon
              optional: 'True'
              default_value: '0.1'
              path: epsilon
            - description: Specifies the kernel type to be used in the algorithm.
              kind_of_value: '{''linear'', ''poly'', ''rbf'', ''sigmoid'', ''precomputed'',
              a callable in shape (n_samples, n_samples)}'
              name: kernel
              optional: 'True'
              default_value: '''rbf'''
              path: kernel
            - description: 'Degree of the polynomial kernel function (''poly''). '
              kind_of_value: integer
              name: poly_degree
              optional: 'True'
              default_value: '3'
              path: degree
            - description: Kernel coefficient for 'rbf', 'poly' and 'sigmoid'. If kernel_coefficient
                is 'auto' then 1/n_features will be used instead.
              kind_of_value: float or 'auto'
              name: kernel_coefficient
              optional: 'True'
              default_value: '''auto'''
              path: gamma
            - description: Independent term in kernel function. It is only significant in
                'poly' and 'sigmoid'.
              kind_of_value: float
              name: independent_kernel_term
              optional: 'True'
              default_value: '0.0'
              path: coef0
            - description: Whether to use the shrinking heuristic.
              kind_of_value: boolean
              name: shrinking
              optional: 'True'
              default_value: 'True'
              path: shrinking
            - description: Tolerance for stopping criterion.
              kind_of_value: float
              name: tolerance
              optional: 'True'
              default_value: '0.001'
              path: tol
            - description: Enable verbose output.
              kind_of_value: boolean
              name: verbose
              optional: 'False'
              default_value: 'False'
              path: verbose
          optimisation_parameters:
            - description: Specify the size of the kernel cache (in MB).
              kind_of_value: float
              name: cache_size
              optional: 'True'
              default_value: '200'
              path: cache_size
            - description: Hard limit on iterations within solver, or -1 for no limit.
              kind_of_value: integer
              name: max_iterations
              optional: 'True'
              default_value: '-1'
              path: max_iter
        name: epsilon-support vector regression
        other_names:
          - SVR
        type: Regression
    !!python/pPath tree.tree.DecisionTreeClassifier:
      ;default_model: ~
      data:
        name: decision tree classifier
        other_names: []
        type: Classification
        hyper_parameters:
          model_parameters:
            - name: split_quality
              kind_of_value: "{'gini', 'entropy'}"
              optional: 'True'
              description: The function to measure the quality of a split.
              default_value: "'gini'"
              path: criterion
            - name: splitting_strategy
              kind_of_value: "{'best', 'random'}"
              optional: 'True'
              description: The strategy used to choose the split at each node.
              default_value: "'best'"
              path: splitter
            - name: max_depth_tree
              kind_of_value: integer
              optional: 'True'
              description: The maximum depth of the tree.
              default_value: None
              path: max_depth
            - name: min_samples_split
              kind_of_value: "{integer, float}"
              optional: 'True'
              description: The minimum number of samples required to split an internal node.
              default_value: '2'
              path: min_samples_split
            - name: min_samples_leaf
              kind_of_value: "{integer, float}"
              optional: 'True'
              description: The minimum number of samples required to be at a leaf node.
              default_value: '1'
              path: min_samples_leaf
            - name: min_weight_fraction_leaf
              kind_of_value: float
              optional: 'True'
              description: The minimum weighted fraction of the sum total of weights (of all
                the input samples) required to be at a leaf node.
              default_value: '1'
              path: min_weight_fraction_leaf
            - name: max_features
              kind_of_value: "{integer, float, 'auto', 'sqrt', 'log2', None}"
              optional: 'True'
              description: The number of features to consider when looking for the best split.
              default_value: None
              path: max_features
            - name: random_state
              kind_of_value: "{integer, RandomState instance, None}"
              optional: 'True'
              description: The seed of the pseudo random number generator to use when shuffling
                the data. If int, random_state is the seed used by the random number generator;
                If RandomState instance, random_state is the random number generator; If None,
                the random number generator is the RandomState instance used by np.random.
              default_value: None
              path: random_state
            - name: max_leaf_nodes
              kind_of_value: integer
              optional: 'True'
              description: Grow a tree with max_leaf_nodes in best-first fashion.
              default_value: None
              path: max_leaf_nodes
            - name: min_impurity_decrease
              kind_of_value: float
              optional: 'True'
              description: A node will be split if this split induces a decrease of the impurity
                greater than or equal to this value.
              default_value: '0'
              path: min_impurity_decrease
            - name: class_weight
              kind_of_value: "{dict, list of dicts, 'balanced', None}"
              optional: 'False'
              description: Weights associated with classes.
              default_value: None
              path: class_weight
          optimisation_parameters:
            - name: presort
              kind_of_value: "{boolean, 'auto'}"
              optional: 'True'
              description: Whether to presort the data to speed up the finding of best splits
                in fitting.
              default_value: "'auto'"
              path: presort
          execution_parameters: []
    :tree.tree.DecisionTreeRegressor:
      ;default_model: ~
      data:
        hyper_parameters:
          execution_parameters: []
          model_parameters:
            - description: The function to measure the quality of a split.
              kind_of_value: '{''mse'', ''friedman_mse'', ''mae''}'
              name: split_quality
              optional: 'True'
              default_value: '''mse'''
              path: criterion
            - description: The strategy used to choose the split at each node.
              kind_of_value: '{''best'', ''random''}'
              name: splitting_strategy
              optional: 'True'
              default_value: '''best'''
              path: splitter
            - description: The maximum depth of the tree.
              kind_of_value: integer
              name: max_depth_tree
              optional: 'True'
              default_value: None
              path: max_depth
            - description: The minimum number of samples required to split an internal node.
              kind_of_value: '{integer, float}'
              name: min_samples_split
              optional: 'True'
              default_value: '2'
              path: min_samples_split
            - description: The minimum number of samples required to be at a leaf node.
              kind_of_value: '{integer, float}'
              name: min_samples_leaf
              optional: 'True'
              default_value: '1'
              path: min_samples_leaf
            - description: The minimum weighted fraction of the sum total of weights (of
                all the input samples) required to be at a leaf node.
              kind_of_value: float
              name: min_weight_fraction_leaf
              optional: 'True'
              default_value: '1'
              path: min_weight_fraction_leaf
            - description: The number of features to consider when looking for the best
                split.
              kind_of_value: '{integer, float, ''auto'', ''sqrt'', ''log2'', None}'
              name: max_features
              optional: 'True'
              default_value: None
              path: max_features
            - description: The seed of the pseudo random number generator to use when shuffling
                the data. If int, random_state is the seed used by the random number generator;
                If RandomState instance, random_state is the random number generator; If
                None, the random number generator is the RandomState instance used by np.random.
              kind_of_value: '{integer, RandomState instance, None}'
              name: random_state
              optional: 'True'
              default_value: None
              path: random_state
            - description: Grow a tree with max_leaf_nodes in best-first fashion.
              kind_of_value: integer
              name: max_leaf_nodes
              optional: 'True'
              default_value: None
              path: max_leaf_nodes
            - description: A node will be split if this split induces a decrease of the
                impurity greater than or equal to this value.
              kind_of_value: float
              name: min_impurity_decrease
              optional: 'True'
              default_value: '0'
              path: min_impurity_decrease
          optimisation_parameters:
            - description: Whether to presort the data to speed up the finding of best splits
                in fitting.
              kind_of_value: boolean
              name: presort
              optional: 'True'
              default_value: 'False'
              path: presort
        name: decision tree regressor
        other_names: []
        type: Regression
