metadata:
  author: "Thomas Wei√ügerber"
  version: "0.1.0"
  library:
    name: "sklearn"
    version: "0.19.1"

fragments:
  default_model:
    !!python/pPath __init__:
      hooks: "pypads_init"
    !!python/rSeg (fit|.fit_predict|fit_transform)$:
      hooks: "pypads_fit"
    !!python/rSeg (fit_predict|predict|score)$:
      hooks: "pypads_predict"
    !!python/rSeg (fit_transform|transform)$:
      hooks: "pypads_transform"

mappings:
  !!python/pPath sklearn:
    !!python/pPath base:
      !!python/pPath BaseEstimator:
        ;default_model: ~
        data:
          concepts: ["algorithm"]
      !!python/rSeg (RegressorMixin|ClassifierMixin|DensityMixin):
        !!python/pPath score:
          hooks: "pypads_metric"
    !!python/pPath metrics.classification:
      !!python/rSeg .*:
        hooks: "pypads_metric"
        data:
          concepts: ["Sklearn provided metric"]
    !!python/pPath datasets.base:
        !!python/rSeg (?!^load_data$)load_.*:
          hooks: "pypads_dataset"
          data:
            concepts: ["Sklearn provided dataset"]
    !!python/pPath model_selection:
      !!python/pPath _search.BaseSearchCV:
        !!python/pPath fit:
          hooks: ["pypads_param_search", "pypads_fit"]
          data:
            concepts: ["Sklearn provided hyperparameter search"]
        !!python/pPath predict:
          hooks: "pypads_predict"
      !!python/pPath _validation._fit_and_score:
          hooks: ["pypads_param_search_exec"]
          data:
            concepts: ["Sklearn provided hyperparameter search execution"]
    !!python/pPath model_selection._split:
      !!python/pPath BaseCrossValidator.split:
        hooks: ["pypads_split"]
        data:
          concepts: ["Sklearn provided splitting"]
      !!python/pPath BaseShuffleSplit.split:
        hooks: ["pypads_split"]
        data:
          concepts: ["Sklearn provided splitting"]
    !!python/pPath tree.tree.DecisionTreeClassifier:
      ;default_model: ~
      data:
        name: decision tree classifier
        other_names: []
        type: Classification
        hyper_parameters:
          model_parameters:
            - name: split_quality
              kind_of_value: "{'gini', 'entropy'}"
              optional: 'True'
              description: The function to measure the quality of a split.
              default_value: "'gini'"
              path: criterion
            - name: splitting_strategy
              kind_of_value: "{'best', 'random'}"
              optional: 'True'
              description: The strategy used to choose the split at each node.
              default_value: "'best'"
              path: splitter
            - name: max_depth_tree
              kind_of_value: integer
              optional: 'True'
              description: The maximum depth of the tree.
              default_value: None
              path: max_depth
            - name: min_samples_split
              kind_of_value: "{integer, float}"
              optional: 'True'
              description: The minimum number of samples required to split an internal node.
              default_value: '2'
              path: min_samples_split
            - name: min_samples_leaf
              kind_of_value: "{integer, float}"
              optional: 'True'
              description: The minimum number of samples required to be at a leaf node.
              default_value: '1'
              path: min_samples_leaf
            - name: min_weight_fraction_leaf
              kind_of_value: float
              optional: 'True'
              description: The minimum weighted fraction of the sum total of weights (of all
                the input samples) required to be at a leaf node.
              default_value: '1'
              path: min_weight_fraction_leaf
            - name: max_features
              kind_of_value: "{integer, float, 'auto', 'sqrt', 'log2', None}"
              optional: 'True'
              description: The number of features to consider when looking for the best split.
              default_value: None
              path: max_features
            - name: random_state
              kind_of_value: "{integer, RandomState instance, None}"
              optional: 'True'
              description: The seed of the pseudo random number generator to use when shuffling
                the data. If int, random_state is the seed used by the random number generator;
                If RandomState instance, random_state is the random number generator; If None,
                the random number generator is the RandomState instance used by np.random.
              default_value: None
              path: random_state
            - name: max_leaf_nodes
              kind_of_value: integer
              optional: 'True'
              description: Grow a tree with max_leaf_nodes in best-first fashion.
              default_value: None
              path: max_leaf_nodes
            - name: min_impurity_decrease
              kind_of_value: float
              optional: 'True'
              description: A node will be split if this split induces a decrease of the impurity
                greater than or equal to this value.
              default_value: '0'
              path: min_impurity_decrease
            - name: class_weight
              kind_of_value: "{dict, list of dicts, 'balanced', None}"
              optional: 'False'
              description: Weights associated with classes.
              default_value: None
              path: class_weight
          optimisation_parameters:
            - name: presort
              kind_of_value: "{boolean, 'auto'}"
              optional: 'True'
              description: Whether to presort the data to speed up the finding of best splits
                in fitting.
              default_value: "'auto'"
              path: presort
          execution_parameters: []
